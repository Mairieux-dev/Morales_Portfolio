,,,,,,,,,,,,,,,,,,,
#,-----------------------------------------------------
#,
#,Prototype,and,Template
#
#,split,(partypes,->,rettypes),sig,into,pair
def,splitSig(sig):
insig,,outsig,=,[],,[]
arrow,=,False
for,s,in,sig:
if,s,==,'->':
if,arrow:
raise,ParseError("arrow,appears,more,than,once,in,sig")
arrow,=,True
elif,arrow:
outsig.append(s)
else:
insig.append(s)
#if,len(outsig),==,0:
#raise,ParseError("signature,missing,return,type(s)")
return,insig,,outsig
#,indexes,where,list,items,pass,pred
def,where(pred,,li):
return,filter(pred,,range(0,,len(li)))
#,return,sublist,built,from,elements,at,given,indexes
def,sublist(li,,ixs):
res,=,[]
for,i,in,range(0,,len(ixs)):
res.append(li[ixs[i]])
return,res
#,number,of,list,items,that,pass,pred
def,count(pred,,li):
return,len(filter(pred,,li))
#,occurences,of,effect_type,in,type,list
def,effectCount(types):
return,types.count(effect_type)
#,occurences,of,data,(non-effect),types,in,type,list
def,dataCount(types):
return,len(types),-,effectCount(types)
#,position,of,nth,data,type,in,type,list
def,nthData(types,,n):
data,=,where(lambda,i:,not(types[i].isEffect()),,types)
return,data[n],if,n,<,len(data),else,-1
#,return,(resolved,type,list,,is-variadic)
def,parseSig(sig):
varin,=,False
types,=,[]
for,s,in,sig:
if,varin:
raise,ParseError("signature,%s,is,variadic,before,final,entry",%,sig)
if,s.startswith('['),and,s.endswith(']'):
varin,=,True
s,=,s[1:len(s),-,1]
types.append(getType(s))
return,types,,varin
#,InstrDef,>,Prototype,>,Template
#
class,InstrDef:
def,__init__(self,,name):
self.name,=,name
def,hrname(self):
return,"HR_%s",%,self.name
#
#,Prototype,has,signatures,but,no,body.
#
class,Prototype(InstrDef):
#,ctor,parses,and,optionally,checks,sigs.
#,protos,check,immediately,,tems,check,post-inference
def,__init__(self,,name,,argsig,,retsig,,check,=,True):
InstrDef.__init__(self,,name)
(self.partypes,,self.isvarin),=,parseSig(argsig)
(self.rettypes,,self.isvarout),=,parseSig(retsig)
if,check:
self.checkSigs()
#,overridden,to,return,true,in,Template
def,isTemplate(self):,
return,False
#,number,of,params
def,numParams(self):
return,len(self.partypes)
#,number,of,results
def,numResults(self):
return,len(self.rettypes)
#,check,signature,constraints,,set,shape
def,checkSigs(self):
#,variadic,param,xor,result
if,self.isvarin,and,self.isvarout:
raise,ParseError("args,and,results,cannot,both,be,variadic")
#,?,types,only,in,templates,,,,,,
if,not,self.isTemplate,and,(
self.rettypes.count(infer_type),>,0,or,
self.partypes.count(infer_type),>,0):
raise,ParseError("prototype,signatures,cannot,be,inferred")
#,set,shape
if,self.isvarin:
last,=,self.partypes[len(self.partypes),-,1]
self.varargs,=,EFFECT_IN,if,last.isEffect(),else,DATA_IN
elif,self.isvarout:
last,=,self.rettypes[len(self.rettypes),-,1]
self.varargs,=,EFFECT_OUT,if,last.isEffect(),else,DATA_OUT
else:
self.varargs,=,NONE
shapeinfo,=,[
effectCount(self.partypes),,dataCount(self.partypes),
effectCount(self.rettypes),,dataCount(self.rettypes)]
if,self.varargs,!=,NONE:
shapeinfo[self.varargs],-=,1
self.shape,=,shape(shapeinfo[EFFECT_IN],,shapeinfo[DATA_IN],
shapeinfo[EFFECT_OUT],,shapeinfo[DATA_OUT],
self.varargs)
#,self.rep,=,getRep(self,,self.numParents(),==,0)
#,linear,instructions,can,be,used,as,subexpressions.,linear,is:
#,-,at,most,one,effect,in,,
#,-,same,number,of,effect,in,and,out,,
#,-,exactly,one,data,out.
def,isLinear(self):
fixedeffectin,=,not(self.isvarin,and,self.partypes[len(self.partypes),-,1].isEffect())
neffectin,=,effectCount(self.partypes)
fixedout,=,not,self.isvarout
neffectout,=,effectCount(self.rettypes)
ndataout,=,dataCount(self.rettypes)
return,(fixedeffectin,and,fixedout,and
neffectin,<=,1,and,neffectout,==,neffectin,and,
ndataout,==,1)
#,pure,instructions,do,not,interact,with,effects
def,isPure(self):
return,effectCount(self.partypes),+,effectCount(self.rettypes),==,0
#,return,our,nesting,level
def,numParents(self):
return,0
def,dump(self):
argsig,=,',,'.join([t.dump(),for,t,in,self.partypes])
if,self.numParams(),!=,1:,argsig,=,'(',+,argsig,+,')'
retsig,=,',,'.join([t.dump(),for,t,in,self.rettypes])
if,self.numResults(),!=,1:,retsig,=,'(',+,retsig,+,')'
return,'%s:,%s,->,%s',%,(self.name,,argsig,,retsig)
def,dumpSig(self):
return,self.dump()
#
#,Template,adds,body,(list,of,statements),and,state,mgmt,
#
class,Template(Prototype):
#,ctor,sets,initial,sig,(to-infer,types,for,explicit,params,
#,plus,new,effect,input),,and,sets,up,state.
def,__init__(self,,name,,parnames,,body,,parent,=,None):
Prototype.__init__(self,,name,,['Effect'],+,(['?'],*,len(parnames)),,[],,False)
self.effectid,,self.dataid,,self.instrid,=,-1,,-1,,-1
self.parent,=,parent
self.ambeffects,=,[]
self.defAmbientEffect(self.genLocalName(effect_type))
self.parnames,=,[self.ambeffects[0]],+,parnames
self.locals,=,{}
self.body,=,body
self.labels,=,{}
self.done,=,False
def,isTemplate(self):
return,True
#,called,when,an,instr,produces,ambient,effect,(as,unbound,result)
def,defAmbientEffect(self,,varname):
self.ambeffects.append(varname)
return,varname
#,called,when,an,instr,consumes,ambient,effect,(as,implicit,arg)
def,useAmbientEffect(self):
if,not(self.hasAmbientEffect()):
raise,ParseError("no,ambient,effect,var,available")
return,self.ambeffects.pop()
#,True,if,ambient,effect,is,currently,available
def,hasAmbientEffect(self):
return,len(self.ambeffects),>,0
#,check,name,for,collisions,with,local,bindings.
#,as,with,generated,names,,we,insist,on,template-wide
#,uniqueness.
#
def,checkLocalName(self,,name):
if,self.parent,is,not,None:
self.parent.checkLocalName(name)
if,name,in,self.parnames:
raise,ParseError("local,name,%s,clashes,with,param,name",%,name)
if,name,in,self.locals:
raise,ParseError("local,%s,already,defined")
#,generate,new,local,variable,name,,based,on,a,key.
#,key,can,a,Type,,an,AST,node,representing,a,dependent-type-carrying
#,value,,or,a,string.
#
#,TODO:,if,we,refactor,type-carrying,values,so,that,they're,types,
#,this,code,will,get,cleaner.
#
#,note:,we,use,the,top-level,template's,suffix,generator,,so,that
#,all,variable,names,are,unique,template-wide.,this,may,not,always
#,be,necessary,for,CG,,but,collisions,in,certain,situations,are
#,hard,to,avoid,,even,with,block,scoping,in,generated,code.
#
def,genLocalName(self,,key):
if,self.parent,is,not,None:
return,self.parent.genLocalName(key)
#,at,top,level,,generate,unique,ids
if,type(key),==,str:
#,for,string,keys,,use,instrid
self.instrid,+=,1
return,'%s%i',%,(key,,self.instrid)
else:
#,may,be,Type,or,AST,node
if,key.isEffect():
self.effectid,+=,1
return,'effect%i',%,self.effectid
else:
self.dataid,+=,1
return,'data%i',%,self.dataid
#,given,a,local,or,param,name,,build,a,reference,node,or,throw
#,note,qualified,lookup:,incoming,name,is,unqualified,,but,may
#,refer,to,a,local,def,in,a,nested,template.
def,makeRef(self,,name):
if,name,in,self.parnames:
return,ParamRef(name,,self)
elif,name,in,self.locals:
return,LocalRef(name,,self)
elif,self.parent,is,not,None:
return,self.parent.makeRef(name)
else:
raise,ParseError("no,binding,for,name,'%s'",%,name)
#,add,an,effect,pass-through,to,a,pure,template
def,addEffect(self):
if,not(self.isPure()):
raise,ParseError("addEffect(),on,impure,template,'%s'",%,self.name)
effparam,=,self.genLocalName(effect_type)
self.parnames.insert(0,,effparam)
self.partypes.insert(0,,effect_type)
self.rettypes.insert(0,,effect_type)
retstmt,=,self.body[len(self.body),-,1]
if,(retstmt.kind,!=,'LocalDefs',or,
retstmt.expr.kind,!=,'Call',or
retstmt.expr.base.name,!=,'return'):
raise,ParseError("internal,error:,missing,return,stmt,in,pure,template,'%s'",%,self.name)
retstmt.expr.args.insert(0,,self.makeRef(effparam))
#,helper,-,dump,signature,items
def,dumpSigItems(self):
argsig,=,'(',+,',,'.join([n,+,':',+,t.dump(),for,n,t,in,zip(self.parnames,,self.partypes)]),+,')'
retsig,=,',,'.join([t.dump(),for,t,in,self.rettypes])
if,self.numResults(),!=,1:,retsig,=,'(',+,retsig,+,')'
return,argsig,,retsig
#,return,our,nesting,level
def,numParents(self):
return,0,if,self.parent,is,None,else,1,+,self.parent.numParents()
def,hasGoto(self):
return,any([stmt.hasGoto(),for,stmt,in,self.body])
#,true,if,all,paths,out,of,the,template,are,gotos,to,labels
#,defined,in,parent,templates
def,allPathsEscape(self):
return,all([e.isEscapingGoto(self),for,e,in,self.finalExprs()])
#,return,the,set,of,final,statements,in,this,template.
#,these,are,the,last,executable,statements,(i.e.,,prior
#,to,return),on,every,path,out,of,the,template.
def,finalExprs(self):
last,=,self.body[len(self.body),-,2]
expr,=,last.expr
if,expr.base.name,==,'if':
return,expr.iftrue.finalExprs(),+,expr.iffalse.finalExprs()
else:
return,[expr]
def,dump(self):
indent,=,2,*,self.numParents()
argsig,,retsig,=,self.dumpSigItems()
spaces,=,',',*,indent
labeldumps,=,''.join(['\n,,',+,spaces,+,label.dump()
for,label,in,self.labels.values()])
bodydump,=,'\n,,'.join([spaces,+,dumpItem(instr),for,instr,in,self.body])
return,'%s:,%s,->,%s\n,,%s%s',%,(self.name,,argsig,,retsig,,bodydump,,labeldumps)
def,dumpSig(self):
return,'%s:,%s,->,%s',%,((self.name,),+,self.dumpSigItems())
#,create,a,Template,or,Prototype,from,an,sexpr
def,toDef(sexpr):
setCurItem(sexpr)
if,len(sexpr),==,2:
argsig,,retsig,=,splitSig(sexpr[1])
return,Prototype(sexpr[0],,argsig,,retsig)
else:
return,Template(sexpr[0],,sexpr[1],,sexpr[2:])
#,helper,-,dump,a,list
def,dumpList(li):
if,len(li),==,1:,
return,''.join([e.dump(),for,e,in,li])
return,'(%s)',%,',,'.join([e.dump(),for,e,in,li])
#,-----------------------------------------------------
#
#,AST,nodes
#
#,Call,describes,an,instr,invocation.,Calls,always,deliver,
#,a,composite,result,,and,only,appear,on,RHS,of,binding,
#,statements,(LocalDefs),,not,as,subexpressions.
#,
class,Call:
kind,=,'Call'
def,__init__(self,,base,,args):
self.base,,self.args,=,base,,args
self.types_,=,self.calcTypes()
#,list,of,result,types,,,,
def,types(self):
return,self.types_
#,calculate,result,types,for,this,call,site.
#,base,case,simply,copies,the,result,types,of,the,
#,called,instr,(self.base),,but,if,there,is,a,registered
#,type,propagation,function,,we,call,that,instead
#
def,calcTypes(self):
if,self.base.name,in,calctypes_handlers.keys():
return,calctypes_handlers[self.base.name](self)
else:
return,self.base.rettypes
	,,
#,true,if,we,pass,through,at,most,one,effect,value,
#,and,generate,exactly,one,data,value
def,isLinear(self):
return,self.base.isLinear()
def,hasGoto(self):
return,False
#,true,if,this
def,isEscapingGoto(self,,tem):
return,False
#,helper,-,dump,list,of,types,to,list,of,strings
def,dumpTypes(self):
return,dumpList(self.types())
def,dump(self):
return,'%s(%s)',%,(self.base.name,,',,'.join([a.dump(),for,a,in,self.args]))
#,Goto,is,syntactically,almost,identical,to,a,Call,
#,but,semantics,are,fairly,different
#
class,Goto(Call):
def,__init__(self,,base,,args):
Call.__init__(self,,base,,args)
def,target(self):
return,self.base
def,hasGoto(self):
return,True
#,true,if,this,goto,jumps,to,a,label,outside,the,given,template
def,isEscapingGoto(self,,tem):
return,self.base.parent,!=,tem
def,dump(self):
return,'goto,%s(%s)',%,(self.base.name,,',,'.join([a.dump(),for,a,in,self.args]))
#,IfCall(condexpr,,iftrue,,iffalse)
#
class,IfCall:
kind,=,'Call'
def,__init__(self,,ifbase,,condexpr,,iftrue,,iffalse):
self.condexpr,=,condexpr
self.base,,self.args,=,ifbase,,[]
self.iftrue,,self.iffalse,=,iftrue,,iffalse
self.types_,=,self.calcTypes()
self.pure,=,not(self.types()[0].isEffect())
#,list,of,result,types
def,types(self):
return,self.types_
#,calculate,result,types,for,this,if.,
#
def,calcTypes(self):
truetypes,=,self.iftrue.rettypes
falsetypes,=,self.iffalse.rettypes
if,len(truetypes),!=,len(falsetypes):
#,no,obvious,better,place,to,do,this:,check,if,the,mismatch
#,is,due,to,purity,on,one,side,but,not,the,other,,and,fix,up
nt,,nf,=,len(truetypes),,len(falsetypes)
if,nt,==,nf,-,1,and,self.iftrue.isPure(),and,not(self.iffalse.isPure()):
self.iftrue.addEffect()
elif,nf,==,nt,-,1,and,self.iffalse.isPure(),and,not(self.iftrue.isPure()):
self.iffalse.addEffect()
else:
raise,ParseError("true,and,false,arms,return,different,shapes:,%s,,%s",%
(dumpList(truetypes),,dumpList(falsetypes)))
rettypes,=,[]
pos,=,0
#,build,this,call,site's,result,type,list,by,reconciling,the,type
#,lists,of,our,subtemplates.
#
#,NOTE:,this,is,one,of,a,few,places,(another,is,checkargtype),where
#,we,do,in-passing,type,inference,,rather,than,maintaining,a,substitution
#,table.,So,far,it,seems,like,a,good,tradeoff,,but,cases,are,definitely,
#,missed,due,to,limited,information,flow.,At,some,point,we'll,probably,
#,have,to,bite,the,bullet.,
#,,,,
for,tt,ft,in,zip(truetypes,,falsetypes):
if,tt.isSubOf(ft):
rettypes.append(ft)
elif,ft.isSubOf(tt):
rettypes.append(tt)
elif,tt,==,infer_type,and,ft,==,infer_type:
rettypes.append(top_type)
self.iftrue.rettypes[pos],=,top_type
self.iffalse.rettypes[pos],=,top_type
elif,tt,==,infer_type:
rettypes.append(ft)
self.iftrue.rettypes[pos],=,ft
retexpr,=,self.iftrue.body[len(self.iftrue.body),-,1].expr
if,retexpr.args[pos].kind,==,'ParamRef':
retexpr.args[pos].setParamType(ft)
elif,ft,==,infer_type:
rettypes.append(tt)
self.iffalse.rettypes[pos],=,tt
retexpr,=,self.iffalse.body[len(self.iffalse.body),-,1].expr
if,retexpr.args[pos].kind,==,'ParamRef':
retexpr.args[pos].setParamType(tt)
else:
raise,ParseError(
"true,and,false,arms,return,incompatible,types,at,position,%i:,%s,,%s",%
(pos,,tt.dump(),,ft.dump()))
pos,+=,1
return,rettypes
#,add,an,argument
def,addArg(self,,arg):
self.args.append(arg)
#,true,if,we,pass,through,at,most,one,effect,value,
#,and,generate,exactly,one,data,value
def,isLinear(self):
partypes,=,[arg.type(),for,arg,in,self.args]
rettypes,=,self.types()
neffectin,=,effectCount(partypes)
neffectout,=,effectCount(rettypes)
ndataout,=,dataCount(rettypes)
return,neffectin,<=,1,and,neffectout,==,neffectin,and,ndataout,==,1
def,hasGoto(self):
return,self.iftrue.hasGoto(),or,self.iffalse.hasGoto()
def,dump(self):
nparents,=,self.iftrue.numParents()
indent,=,',',*,2,*,nparents
return,('if,%s\n%s{,%s,}\n%s{,%s,}',%,(
dumpList([self.condexpr],+,self.args),,
indent,,self.iftrue.dump(),
indent,,self.iffalse.dump()))
#,A,LocalDefs,node,binds,a,set,of,names,to,a,shared,RHS.
#,Calls,and,non-composite,rvalues,are,ok.
#
class,LocalDefs:
kind,=,'LocalDefs'
def,__init__(self,,lhs,,expr):,
self.lhs,=,lhs
self.expr,=,expr
if,expr.kind,==,'Call':
self.names,=,lhs
self.defs,=,dict(zip(lhs,,[Selector(expr,,i),for,i,in,range(0,,len(lhs))]))
else:
self.names,=,[lhs]
self.defs,=,{,lhs,:,expr,}
def,hasGoto(self):
return,self.expr.kind,==,'Call',and,self.expr.hasGoto()
def,dumpnames(self):
decls,=,['%s:%s',%,(n,,self.defs[n].type().dump()),for,n,in,self.names]
return,'(%s)',%,',,'.join(decls),if,self.expr.kind,==,'Call',else,decls[0]
def,dump(self):
return,'%s,=,%s',%,(self.dumpnames(),,self.expr.dump())
#,Selector,extracts,an,item,from,a,composite,value,by,position.
#
class,Selector:
kind,=,'Selector'
def,__init__(self,,base,,pos):,
if,base.kind,!=,'Call':
raise,ParseError("selector,on,non-composite,base,%s",%,base.dump())
self.base,,self.pos,=,base,,pos
def,type(self):
return,self.base.types()[self.pos]
def,deref(self):
return,self
def,isSubOf(self,,t):
return,valueAsType(self).isSubOf(t)
def,isEffect(self):
return,valueAsType(self).isEffect()
def,dump(self):
return,'%s[%i]',%,(self.base.dump(),,self.pos)
#,LocalRef,refers,by,name,to,a,local,in,an,enclosing,template
#
class,LocalRef:
kind,=,'LocalRef'
def,__init__(self,,name,,tem):,
self.name,,self.tem,=,name,,tem
def,type(self):,
return,self.deref().type()
def,deref(self):,
return,self.tem.locals[self.name]
def,isSubOf(self,,t):,
return,self.deref().isSubOf(t)
def,isEffect(self):,
return,self.deref().isEffect()
def,dump(self):
return,self.name
#,ParamRef,refers,by,name,to,a,param,in,an,enclosing,template
#
class,ParamRef:
kind,=,'ParamRef'
def,__init__(self,,name,,tem):,
self.name,,self.tem,=,name,,tem
def,pos(self):,
return,self.tem.parnames.index(self.name)
def,type(self):,
return,self.tem.partypes[self.pos()]
def,deref(self):,
return,self
def,isSubOf(self,,t):,
return,valueAsType(self).isSubOf(t)
def,isEffect(self):,
return,valueAsType(self).isEffect()
def,setParamType(self,,newtype):
self.tem.partypes[self.pos()],=,newtype
return,self.type()
def,dump(self):,
return,self.name
#,TypeConst,holds,a,constant,type,value
#
class,TypeConst:
kind,=,'TypeConst'
def,__init__(self,,value):,
self.value,=,value
def,type(self):,
return,traits_type
def,deref(self):,
return,self.value
def,isSubOf(self,,t):,
return,self.deref().isSubOf(t)
def,isEffect(self):,
return,self.deref().isEffect()
def,dump(self):
return,self.value.dump()
#,NumConst,holds,a,constant,Int,or,Number,value
#
class,NumConst:
kind,=,'NumConst'
def,__init__(self,,value):,
self.value,=,value
def,type(self):,
return,int_type,if,type(self.value),==,int,else,number_type
def,deref(self):,
return,self.value
def,isSubOf(self,,t):
raise,ParseError("(%s).isSubOf(%s):,type,const,or,type-valued,expr,expected",
%,(self.dump(),,t.dump()))
def,isEffect(self):
raise,ParseError("(%s).isEffect():,type,const,or,type-valued,expr,expected",
%,self.dump())
def,dump(self):
return,'%i',%,self.value
#,VarRef,holds,the,name,of,a,C++,variable.
#,This,name,will,be,dumped,straight,into,generated,code.,
#,Types,are,looked,up,in,VarTypes,,
#
class,VarRef:
kind,=,'VarRef'
def,__init__(self,,value):,
self.value,=,value
if,not(value,in,VarTypes):
raise,ParseError("no,type,binding,for,name,'%s'",%,value)
self.type_,=,VarTypes[value]
def,type(self):,
return,self.type_
def,deref(self):,
return,self.value
def,isSubOf(self,,t):
raise,ParseError("(%s).isSubOf(%s):,type,const,or,type-valued,expr,expected",
%,(self.dump(),,t.dump()))
def,isEffect(self):
raise,ParseError("(%s).isEffect():,type,const,or,type-valued,expr,expected",
%,self.dump())
def,dump(self):
return,'%s',%,self.value
#
#,end,of,AST,nodes
#
#,C++,vars,registered,here,are,available,in,s-exprs
#
VarTypes,=,{
"true":,boolean_type,
"false":,boolean_type,
"kAtomTypeMask":,int_type,
"kObjectType":,int_type,
"kStringType":,int_type,
"kNamespaceType":,int_type,
"kSpecialType":,int_type,
"kBooleanType":,int_type,
"kIntptrType":,int_type,
"kDoubleType":,int_type
},
#,dependent,types,helper:,only,a,traits-typed,value,can,represent,
#,a,type,,and,it,can,represent,any,data,type.,
def,valueAsType(v):
if,v.type(),==,traits_type:
return,topdata_type
raise,ParseError("valueAsType(%s):,traits-typed,value,required",
%,v.dump())
#,check,type,of,arg,expr,against,type,of,param.
#,The,type,of,the,argument,must,be,a,subtype,of,the,type,of,the,
#,corresponding,parameter,of,the,called,instruction.
#
#,Type,inference,also,happens,here:,the,passing,of,params,(of,the,
#,calling,function),is,noticed.,(a),?-typed,params,are,constrained,
#,to,call-compatible,types,,and,(b),super-typed,params,are,tightened,
#,to,call-compatible,subtypes.
#
#,...this,isn't,full,unification,,since,the,collapsing,of,type,
#,wildcards,happens,only,in,the,direction,of,the,normal,flow,of
#,processing.,The,full,monty,would,require,differentiated,type,
#,vars,and,a,substitution,table,,but,I'm,avoiding,that,while,I
#,can.
#
def,checkArgType(expr,,goaltype,,base):
exprtype,=,expr.type()
if,expr.kind,==,'ParamRef':
if,exprtype,==,infer_type,or,(exprtype,!=,goaltype,and,goaltype.isSubOf(exprtype)):
exprtype,=,expr.setParamType(goaltype)
if,not(exprtype.isSubOf(goaltype)):
raise,ParseError("argument,type,%s,not,compatible,with,parameter,type,%s\n,,in,arg,'%s'\n,,in,call,to,=,%s",
%,(exprtype.dump(),,goaltype.dump(),,expr.dump(),,base.dump()))
#,check,binding,arity,-,may,insert,ambient,effect,local
#
def,checkBindingArity(rettypes,,names,,tem):
if,len(names),!=,len(rettypes):
if,len(names),==,len(rettypes),-,1,and,rettypes[0].isEffect():
names.insert(0,,tem.defAmbientEffect(tem.genLocalName(effect_type)))
else:
raise,ParseError("expected,%i,binding,vars,,got,%i:,%s",
%,(len(rettypes),,len(names),,','.join(names)))
#,generate,bindings,to,the,multiple,results,of,a,Call.
#
def,genCallBindings(tem,,call,,names,=,None):
if,names,is,None:
#,generate,names
names,=,[]
for,t,in,call.types():
name,=,tem.genLocalName(t)
if,t.isEffect():
tem.defAmbientEffect(name)
names.append(name)
else:
#,check,user-supplied,names
if,type(names),!=,list:
names,=,[names]
for,name,in,names:
tem.checkLocalName(name)
checkBindingArity(call.types(),,names,,tem)
return,LocalDefs(names,,call)
#,generate,binding,to,a,non-call,RHS
#
def,genValueBinding(tem,,expr,,name,=,None):
if,name,is,None:
name,=,tem.genLocalName(expr.type())
else:
tem.checkLocalName(name)
return,LocalDefs(name,,expr)
#,add,local,bindings,for,expr,results,to,template,,
#,and,return,LocalDefs,for,addition,to,template,body.
#,lhs,is,user-supplied,names,-,we,generate,if,None
#
def,genBindings(tem,,expr,,lhs,=,None):
savecuritem,=,setCurItem('%s,in,%s',%,(expr.dump(),,tem.name))
if,expr.kind,==,'Call':
instr,=,genCallBindings(tem,,expr,,lhs)
else:
instr,=,genValueBinding(tem,,expr,,lhs)
#,note:,template,locals,are,added,here
for,n,,v,in,instr.defs.items():
tem.locals[n],=,v
setCurItem(savecuritem)
return,instr
#,process,a,subexpression,in,a,template,body.
#,linear,Call,results,are,scattered,to,locals,,
#,data,result,is,used,as,subexpr,value.
#
def,processSubexpr(sexpr,,t,,defmap,,stack,,instrs):
savecuritem,=,setCurItem('%s,in,%s',%,(sexpr,,t.name))
expr,=,processExpr(sexpr,,t,,defmap,,stack,,instrs)
if,expr.kind,==,'Call':
if,expr.isLinear():
#,generate,local,bindings,and,add,as,body,statement
locdefs,=,genBindings(t,,expr)
instrs.append(locdefs)
#,use,data,result,as,subexpression,value
result,=,LocalRef(locdefs.names[nthData(expr.types(),,0)],,t)
else:
raise,ParseError("cannot,be,used,as,a,subexpression:,%s",%,expr.dump())
else:
result,=,expr
setCurItem(savecuritem)
return,result
#,check,call,arity,-,note:,raises,ParseError,if,there's,a,problem,
#,return,value,true,indicates,that,call,needs,ambient,effect,added.
#,(can't,do,it,here,because,this,happens,before,subexpr,processing,
#,and,adding,effect,happens,after)
#
def,checkArity(op,,args):
argc,=,len(args)
#,ok,if,we,match,fixed,count,or,exceed,variadic,min
if,argc,==,op.numParams(),or,(op.isvarin,and,argc,>=,op.numParams(),-,1):
return,False
#,allow,for,effect,insertion
if,op.partypes[0],==,effect_type:
if,argc,==,op.numParams(),-,1,or,(op.isvarin,and,argc,==,op.numParams(),-,2):
return,True
#,nope
raise,ParseError("expected,%i,arguments,to,'%s',,got,%i",%,(
op.numParams(),,op.name,,len(args)))
#,get,type,for,particular,position,,taking,variadic,last,types,into,account.
#,note,that,we're,skating,by,on,T,<,[T],until/unless,we,build,a,proper,
#,List(T),rep,for,list,types,,otherwise,we'd,have,to,make,list/nonlist,
#,copies,of,everything,upfront.
#
def,typeAtPosition(types,,pos,,varin):
lastpos,=,len(types),-,1
if,varin,and,pos,>=,lastpos:
return,types[lastpos]
else:
return,types[pos]
#,helper:,true,if,expr,list,has,long-form,syntax.
#,long,form,syntax,is,recognized,by,the,presence,of,keywords
#,(strings,ending,with,':'),at,the,head,of,list-typed,exprs.
#
def,isLongForm(exprs):
return,any([type(e),==,list,and,e[0].endswith(':'),for,e,in,exprs])
#,helper:,process,if-statement,arms,from,list,of,expressions.
#,both,long-form,(keyed,,order,independent),and,short-form
#,(unkeyed,,ordered),syntax,is,handled.
#,returns,a,map,from,if-statement,selector,keywords,(true:,,false:)
#,to,statement,lists.
#
def,processIfArms(exprs):
arms,=,{}
sels,=,['true:',,'false:']
if,len(exprs),!=,len(sels):
raise,ParseError("exactly,two,arms,required,in,if,statement")
if,isLongForm(exprs):
for,expr,in,exprs:
savecuritem,=,setCurItem('%s,in,%s',%,(expr,,getCurItem()))
if,type(expr),!=,list:
raise,ParseError("mixed,short-form,and,long-form,if,arms")
sel,=,expr[0]
if,sel,in,arms:
raise,ParseError("conditional,selector,%s,appears,more,than,once",%,sel)
if,not(sel,in,sels):
raise,ParseError("unrecognized,conditional,selector,%s",%,sel)
stmts,=,expr[1:]
arms[sel],=,stmts
setCurItem(savecuritem)
else:
for,i,in,range(0,,len(exprs)):
expr,=,exprs[i]
savecuritem,=,setCurItem('%s,in,%s',%,(expr,,getCurItem()))
sel,=,sels[i]
stmts,=,[expr]
arms[sel],=,stmts
setCurItem(savecuritem)
return,arms
#,process,an,expr,in,a,template,body.,
#,note:,calls,to,unprocessed,templates,are,handled,eagerly
#,with,a,recursive,call,to,processTem()
#
#,sexpr,-,s-expression,we're,processing
#,tem,-,template,in,whose,body,the,expression,occurs
#,defmap,-,available,definitions,(may,not,be,processed)
#,stack,-,call-target,stack,,passed,through,on,subexprs,,
#,instrs,-,instr,list,being,produced,,passed,through,on,subexprs
#
def,processExpr(sexpr,,tem,,defmap,,stack,,instrs):
savecuritem,=,setCurItem('%s,in,%s',%,(sexpr,,tem.name))
if,type(sexpr),==,list:
#,invocation
name,,args,=,sexpr[0],,sexpr[1:]
if,name,==,'if':
op,=,defmap['if'],
cond_expr,=,processSubexpr(args[0],,tem,,defmap,,stack,,instrs)
checkArgType(cond_expr,,boolean_type,,op)
if,len(args),>,3:
raise,ParseError('too,many,subexpressions,in,(if,...)')
arms,=,processIfArms(args[1:])
iftrue,=,Template('true',,[],,arms['true:'],,tem)
processTem(iftrue,,defmap,,stack)
iffalse,=,Template('false',,[],,arms['false:'],,tem)
processTem(iffalse,,defmap,,stack)
ifstmt,=,IfCall(op,,cond_expr,,iftrue,,iffalse)
if,not,ifstmt.pure:
effect_arg,=,processSubexpr(tem.useAmbientEffect(),,tem,,defmap,,stack,,instrs)
ifstmt.addArg(effect_arg)
result,=,ifstmt
elif,name,==,'goto':
labelname,,args,=,args[0],,args[1:]
op,=,findLabel('@',+,labelname,,tem)
if,op,is,None:
raise,ParseError("no,label,for,name,'%s'",%,labelname)
if,not,op.done:
processTem(op,,defmap,,stack)
needs_effect,=,checkArity(op,,args)
argoff,=,1,if,needs_effect,else,0
for,i,in,range(0,,len(args)):
args[i],=,processSubexpr(args[i],,tem,,defmap,,stack,,instrs)
pos,=,i,+,argoff
goal_type,=,typeAtPosition(op.partypes,,pos,,tem.isvarin)
checkArgType(args[i],,goal_type,,op)
if,needs_effect:
args.insert(0,,processSubexpr(tem.useAmbientEffect(),,tem,,defmap,,stack,,instrs))
result,=,Goto(op,,args)
elif,name,==,'label':
#,already,collected
raise,ParseError("internal,error:,label,still,in,statement,list")
else:
op,=,findDef(name,,defmap)
if,op,is,None:
raise,ParseError("no,instr,for,name,'%s'",%,name)
if,op.isTemplate(),and,not,op.done:
processTem(op,,defmap,,stack)
needs_effect,=,checkArity(op,,args)
argoff,=,1,if,needs_effect,else,0
for,i,in,range(0,,len(args)):
args[i],=,processSubexpr(args[i],,tem,,defmap,,stack,,instrs)
pos,=,i,+,argoff
goal_type,=,typeAtPosition(op.partypes,,pos,,tem.isvarin)
checkArgType(args[i],,goal_type,,op)
if,needs_effect:
args.insert(0,,processSubexpr(tem.useAmbientEffect(),,tem,,defmap,,stack,,instrs))
result,=,Call(op,,args)
else:
#,non-list,expression,,
if,sexpr,in,types:
#,type,const
result,=,TypeConst(types[sexpr])
elif,type(sexpr),==,int,or,type(sexpr),==,float:
#,numeric,const
result,=,NumConst(sexpr)
elif,sexpr,in,VarTypes:
#,C++,var
result,=,VarRef(sexpr)
else:
#,name,reference
result,=,tem.makeRef(sexpr)
setCurItem(savecuritem)
return,result
#,helper,-,resolve,name,to,definition,or,None
#
def,findDef(name,,defmap):
return,defmap[name],if,name,in,defmap,else,None
#,helper,-,resolve,name,to,local,label
#
def,findLabel(name,,tem):
if,name,in,tem.labels:
return,tem.labels[name]
elif,tem.parent:
return,findLabel(name,,tem.parent)
else:
return,None,,,,
#,build,return,arglist,from,final,body,statement
#
def,buildRetArgs(tem,,defmap):
retargs,=,[]
last,=,tem.body[len(tem.body),-,1]
if,last.expr.kind,==,'Call':
#,return,call,results
for,name,in,last.names:
if,name,in,tem.ambeffects:,
tem.ambeffects.remove(name)
retargs.append(tem.makeRef(name))
else:
#,return,final,stated,value,
retargs.append(last.expr)
tem.body.pop()
#,unused,ambient,effects:,if,param,,remove,
#,otherwise,,return,in,order,created
#
#,NOTE:,for,now,,disabling,effect-stripping
#,on,top-level,templates,(but,leaving,it,in,place
#,for,ifs).,Before,enabling,for,top-levels,we'll
#,need,to,smarten,the,C++,to,support,pure,templates,
#,and,support,single-data-value,template,returns,in
#,CG,here.
#,
while,tem.hasAmbientEffect():
amb,=,tem.useAmbientEffect()
if,amb,in,tem.parnames,and,tem.numParents(),>,0:
ix,=,tem.parnames.index(amb)
tem.parnames.remove(amb)
tem.partypes.pop(ix)
else:
retargs.insert(0,,tem.makeRef(amb))
return,retargs
#,finish,and,check,template,signature
#
def,finishSig(tem,,retargs):
#,unused,args,are,still,typed,as,?
for,i,in,range(0,,len(tem.partypes)):,
if,tem.partypes[i],==,infer_type:
tem.partypes[i],=,top_type
#,derive,result,sig,from,return,statement
tem.rettypes,=,[v.type(),for,v,in,retargs]
#,can,now,check,well-formedness
tem.checkSigs()
#,add,return,instr,to,template,body.
#
#,All,template,IR,graphs,end,with,an,HR_return,instruction,
#,which,gathers,the,template,results,(effect,and,data),as
#,inputs.
#
def,addReturnStmt(tem,,retargs,,defmap):
retstmt,=,genBindings(tem,,Call(defmap['return'],,retargs))
tem.body.append(retstmt)
#,process,template.
#,process,body,statements,,infer/check,types
#
def,processTem(tem,,defmap,,stack):
#,print,'>>>,%s\n',%,tem.dump()
try:
if,tem,in,stack:
raise,ParseError("recursion,not,supported")
stack.append(tem)
savecuritem,=,setCurItem(tem)
#,first,collect,label,defs,,without,processing
removed,=,0
for,i,in,range(0,,len(tem.body)):
stmt,=,tem.body[i,-,removed]
if,type(stmt),==,list,and,len(stmt),>,0,and,stmt[0],==,'label':
if,i,==,0:
raise,ParseError("first,statement,in,template,cannot,be,a,label")
if,len(stmt),<,4:
raise,ParseError("too,few,items,in,label,definition")
name,,params,,body,=,'@',+,stmt[1],,stmt[2],,stmt[3:]
localdef,=,Template(name,,params,,body,,tem)
if,name,in,tem.labels:
raise,ParseError("duplicate,label,'%s'",%,name)
tem.labels[name],=,localdef
#,remove,from,template,statement,list
tem.body.pop(i,-,removed)
removed,+=,1
#,process,body,statements
instrs,=,[]
for,i,in,range(0,,len(tem.body)):
stmt,=,tem.body[i]
bindings,=,None
if,type(stmt),==,list,and,len(stmt),>,2,and,stmt[1],==,'=':
if,i,==,len(tem.body),-,1:
raise,ParseError("last,statement,in,template,cannot,be,a,binding")
#,local,bindings
instr,=,processExpr(stmt[2],,tem,,defmap,,stack,,instrs)
bindings,=,genBindings(tem,,instr,,,stmt[0])
else:
#,unbound,statement,,local,def,,etc.
instr,=,processExpr(stmt,,tem,,defmap,,stack,,instrs)
if,instr,is,not,None:
#,note:,generate,local,bindings
bindings,=,genBindings(tem,,instr)
#,check,for,goto
if,bindings.hasGoto(),and,i,<,len(tem.body),-,1:
if,bindings.expr.kind,==,'Call',and,bindings.expr.base.name,==,'goto':
raise,ParseError('goto,as,non-final,statement')
else:
raise,ParseError('goto,appears,within,non-final,statement')
#,add,,bindings,processed,from,statement
if,bindings,is,not,None:
instrs.append(bindings)
#,swap,in,processed,template,body
tem.body,=,instrs
#,add,return
retargs,=,buildRetArgs(tem,,defmap)
finishSig(tem,,retargs)
addReturnStmt(tem,,retargs,,defmap)
tem.done,=,True
setCurItem(savecuritem)
stack.pop()
#,print,'<<<,%s\n',%,tem.dump()
except,ParseError,as,e:
print,'parse,error:,%s',%,e.message()
sys.exit(1)
#,create,a,map,from,a,list,of,defs,,check,for,dupes
def,toMap(defs):
m,=,{}
for,d,in,defs:
setCurItem(d)
if,d.name,in,m:
raise,ParseError("instr,'%s',already,defined",%,d.name)
m[d.name],=,d
return,m
#,process,list,of,defs,into,a,finished,map.
def,process(defs):
defmap,=,toMap(defs)
for,d,in,defmap.values():,
if,d.isTemplate(),and,not,d.done:
processTem(d,,defmap,,[])
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,vi:,set,ts=2,sw=2,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,-----------------------------------------------------
#
#,High,level,intermediate,Representation,(HR),opcodes.
#
#,Conventions:
#,*,Opcodes,are,in,no,particular,order.
#,*,abc_,prefix,means,the,opcode,corresponds,directly,or,almost
#,,,directly,with,an,ABC,OP_xxx,instruction.,,The,mapping,is,not,perfect
#,,,because,of,a,few,exceptions:
#,,,,,-,abcbuilder,expands,some,ABC,opcodes,that,aren't,possible,to,express
#,,,,,,,with,templates,,for,example,OP_callproperty's,nullcheck,is,expanded
#,,,,,,,since,a,template,can't,receive,and,pass,variadic,arguments.
#,,,,,-,sometimes,multiple,abc,instructions,map,to,a,single,HR,instruction
#,,,,,,,for,example,OP_increment,and,OP_inclocal,map,to,HR_abc_increment.
#,,,,,-,sometimes,a,single,abc,instruction,statically,maps,to,multiple
#,,,,,,,HR,instructions,,for,example,OP_getproperty,maps,to,one,of,four
#,,,,,,,HR,instructions,based,on,the,multiname's,signature.
#,*,names,should,be,action,verbs,when,it,makes,sense.
#,
hrdefs,=,'''
,;,;,;,PROTOTYPES
,;,;,block,delimiters,
,;,TopData,and,Top,are,used,as,wildcards,in,signatures.,On,the,
,;,use,side,,it,means,the,required,type,is,determined,elsewhere,
,;,for,example,the,constraint,on,goto,inputs,comes,from,the,label.
,;,on,the,def,side,,it,means,the,actual,type,is,derived,from,uses
,;,(e.g.,arm's,def,types,come,from,if's,uses),or,a,signature,(start),
,;,or,a-priori,(const).
(start,(->,Effect,[Top])),,;,start's,defs,include,effect,,state,,env,,and,data
(template,(->,Effect,[Top]))
(catchblock,(->,[Top]))
(return,(Effect,[Top],->,)),,;,some,templates,may,return,vm,types
(throw,(Effect,Atom,->,)),,;,throw,only,wants,1,data,value,even,tho,StopInstr,allows,N.
(goto,([Top],->,))
(label,(,->,[Top]))
(if,(Boolean,[Top],->,))
(switch,(Int,[Top],->,))
(arm,(,->,[Top]))
,;,;,;,end,block,delimiters
,;,;,;,NOTE:,don't,use,const,explicitly,in,templates.
,;,;,;,instead,just,give,the,value,(see,e.g.,abc_increment).
,;,;,;,The,correct,result,type,for,explicit,uses,will,NOT,be
,;,;,;,calculated,,currently.
,;,;,;
(const,(->,Top)),
,;,;,;,NOTE:,coerce,and,cast,handled,specially,here,-,
,;,;,;,second,result,type,is,based,on,second,arg
(coerce,(Effect,Traits,Atom,->,Effect,Atom)),,
,;,;,;,cast,is,for,downcasting.,,Traits,must,be,for,a,class,type,,not,int/uint/number/string/bool/object.
(cast,(Effect,Traits,Atom,->,Effect,ScriptObject))
,;,;,castobject,is,for,coerce<Object>.
,;,;,fixme:,what,about,ScriptObjects,that,don't,extend,Object?
(castobject,(Atom,->,Atom))
(tonumber,(Effect,Atom,->,Effect,Number)),
(toint,(Effect,Atom,->,Effect,Int)),,
(touint,(Effect,Atom,->,Effect,Uint)),,
(toboolean,(Atom,->,Boolean)),,
(d2b,(Number,->,Boolean)),,;,specialize,toboolean,when,input,is,Number
(caststring,(Effect,Atom,->,Effect,String)),,
(castns,(Effect,Atom,->,Effect,Namespace))
(cknull,(Effect,Atom,->,Effect,Atom~))
(cknullobject,(Effect,ScriptObject,->,Effect,ScriptObject~))
(cktimeout,(Effect,Env,->,Effect,Boolean)),,,,,,,,,,,,,
(abc_hasnext,(Effect,Atom,Int,->,Effect,Int))
(abc_hasnext2,(Effect,Int,Atom,->,Effect,Boolean,Int,Atom))
(never,(->,Bot))
(call,(Effect,Atom,Atom,[Atom],->,Effect,Atom))
(construct,(Effect,Atom,Atom,[Atom],->,Effect,Atom~))
(constructsuper,(Effect,Env,Atom~,[Atom],->,Effect,Bot))
,;,access,env,various,ways
(loadenv_namespace,(Ord,Namespace~,->,Env)),,;,load,MethodEnv*,from,Namespace
(loadenv_boolean,(Ord,Boolean,->,Env)),,;,load,MethodEnv*,from,Boolean
(loadenv_number,(Ord,Number~,->,Env)),,;,load,MethodEnv*,from,Number
(loadenv_string,(Ord,String~,->,Env)),,;,load,MethodEnv*,from,String
(loadenv_interface,(Method,ScriptObject~,->,Env)),,;,load,MethodEnv*,from,Method,IID
(loadenv,(Ord,ScriptObject~,->,Env)),,;,load,MethodEnv*,from,ScriptObject->vtable->methods[disp_id]
(loadenv_atom,(Ord,Atom~,->,Env)),,;,load,MethodEnv,from,toVTable(obj)->methods[disp_id]
(loadinitenv,(ScriptObject~,->,Env)),,;,load,MethodEnv,from,ScriptObject->vtable->init
(loadsuperinitenv,(Env,->,Env)),,;,load,MethodEnv,from,env->vtable->base->init
(loadenv_env,(Ord,Env,->,Env)),,;,load,MethodEnv,from,toVTable(obj)->methods[disp_id]
(newobject,(Effect,[Atom],->,Effect,ScriptObject~)),,;,;,;,TODO:,result,should,be,final,with,Object,traits
(newarray,(Effect,[Atom],->,Effect,Array~)),,,,;,;,;,TODO:,Array~,should,be,final,,dense
(applytype,(Effect,[Atom],->,Effect,Atom))
,;,fixme:,input,type,is,a,non-null,object,whose,traits,has,a,nonnull,itraits,,e.g.,a,class
,;,,,,,,,output,type,is,the,instance,type,of,that,class.
(newinstance,(Class~,->,ScriptObject~))
(abc_convert_s,(Effect,Atom,->,Effect,String~))
(abc_esc_xelem,(Effect,Atom,->,Effect,String~))
(abc_esc_xattr,(Effect,Atom,->,Effect,String~))
(abc_typeof,(Atom,->,String~))
,;,Coerce,to,the,given,type,or,bailout
(speculate_int,,,,(Atom,State,->,Int))
(speculate_number,(Atom,State,->,Number))
(speculate_numeric,(Atom,State,->,Number))
(speculate_string,(Atom,State,->,String))
(speculate_object,(Atom,State,->,Object))
(speculate_array,(Atom,State,->,Array))
(speculate_bool,(Atom,State,->,Boolean))
(ckfilter,(Atom~,->,Atom~)),,,;,really,*~[A],->,(XML|XMLList)[A]~
(abc_add,(Effect,Atom,Atom,->,Effect,Atom)),,;,OP_add.,,really,(Effect,Atom,Atom,->,String~|Number)
(addd,(Number,Number,->,Number)),,,,,,,;,LIR_addd
(concat_strings,(String,String,->,String~))
(abc_nextname,(Effect,Atom,Int,->,Effect,Atom))
(abc_nextvalue,(Effect,Atom,Int,->,Effect,Atom))
(lessthan,(Atom,Atom,->,Boolean))
(lessequals,(Atom,Atom,->,Boolean))
(greaterthan,(Atom,Atom,->,Boolean))
(greaterequals,(Atom,Atom,->,Boolean))
(abc_instanceof,(Effect,Atom,Atom,->,Effect,Boolean))
(abc_istype,(Effect,Traits,Atom,->,Effect,Boolean))
(abc_istypelate,(Effect,Atom,Atom~,->,Effect,Boolean))
(abc_astype,(Traits,Atom,->,Atom))
(abc_astypelate,(Effect,Atom,Atom~,->,Effect,Atom)),,,;,arg,2,is,class,,returns,arg,1,of,that,type,or,null
(abc_in,(Effect,Atom,Atom~,->,Effect,Boolean))
(divd,(Number,Number,->,Number))
(modulo,(Number,Number,->,Number))
(subd,(Number,Number,->,Number))
(muld,(Number,Number,->,Number))
(addi,(Int,Int,->,Int))
(subi,(Int,Int,->,Int))
(muli,(Int,Int,->,Int))
(ori,(Int,Int,->,Int))
(andi,(Int,Int,->,Int))
(xori,(Int,Int,->,Int))
(lshi,(Int,Int,->,Int))
(rshi,(Int,Int,->,Int))
(rshui,(Int,Int,->,Uint))
(noti,(Int,->,Int))
(negi,(Int,->,Int))
(negd,(Number,->,Number))
(not,(Boolean,->,Boolean))
(newactivation,(Effect,Env,->,Effect,ScriptObject~))
(abc_finddef,(Effect,Name,Env,->,Effect,ScriptObject~))
(abc_findpropstrict,(Effect,Name,Env,Ord,[Atom~],->,Effect,Atom~))
(abc_findpropstrictx,(Effect,Name,Env,Ord,Atom,[Atom~],->,Effect,Atom~))
(abc_findpropstrictns,(Effect,Name,Env,Ord,Atom,[Atom~],->,Effect,Atom~))
(abc_findpropstrictnsx,(Effect,Name,Env,Ord,Atom,[Atom~],->,Effect,Atom~))
(abc_findproperty,(Effect,Name,Env,Ord,[Atom~],->,Effect,Atom~))
(abc_findpropertyx,(Effect,Name,Env,Ord,Atom,[Atom~],->,Effect,Atom~))
(abc_findpropertyns,(Effect,Name,Env,Ord,Atom,[Atom~],->,Effect,Atom~))
(abc_findpropertynsx,(Effect,Name,Env,Ord,Atom,[Atom~],->,Effect,Atom~))
(newclass,(Effect,Traits~,Class,[Atom~],->,Effect,Class~)),,,;,TODO,vararg,is,list,of,Scope,,need,type
(newfunction,(Effect,Method,[Atom~],->,Effect,Function~))
(abc_getsuper,(Effect,Name,Atom~,->,Effect,Atom)),,,,,,,,,,,,,,,;,same,as,getprop,inputs
(abc_getsuperx,(Effect,Name,Atom,Atom~,->,Effect,Atom)),,,,,,,,,;,same,as,getpropx,inputs
(abc_getsuperns,(Effect,Name,Atom,Atom~,->,Effect,Atom)),,,,,,,,;,same,as,getpropns,inputs
(abc_getsupernsx,(Effect,Name,Atom,Atom,Atom~,->,Effect,Atom)),,;,same,as,getpropnsx,inputs
(abc_getdescendants,,,,(Effect,Name,Atom~,->,Effect,Atom)),,,,,,,,,,,,,;,same,as,getprop,inputs
(abc_getdescendantsx,,,(Effect,Name,Atom,Atom~,->,Effect,Atom)),,,,,,,,;,same,as,getprop,inputs
(abc_getdescendantsns,,(Effect,Name,Atom,Atom~,->,Effect,Atom)),,,,,,,,;,same,as,getprop,inputs
(abc_getdescendantsnsx,(Effect,Name,Atom,Atom,Atom~,->,Effect,Atom)),,,;,same,as,getprop,inputs
(abc_callprop,,,,(Effect,Name,Atom~,[Atom],->,Effect,Atom)),,,,,,,,;,for,ABC,OP_callproperty
(abc_callpropx,,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_callpropns,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_callpropnsx,(Effect,Name,Atom,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_callproplex,,,,(Effect,Name,Atom~,[Atom],->,Effect,Atom))
(abc_callproplexx,,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_callproplexns,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_callproplexnsx,(Effect,Name,Atom,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_constructprop,,,,(Effect,Name,Atom~,[Atom],->,Effect,Atom)),,,,;,TODO,check,non-null,result
(abc_constructpropx,,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom)),,,,;,TODO,check,non-null,result
(abc_constructpropns,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom)),,,,;,TODO,check,non-null,result
(abc_constructpropnsx,(Effect,Name,Atom,Atom,Atom~,[Atom],->,Effect,Atom)),,,,;,TODO,check,non-null,result
(abc_callsuper,,,,(Effect,Name,Atom~,[Atom],->,Effect,Atom))
(abc_callsuperx,,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_callsuperns,,(Effect,Name,Atom,Atom~,[Atom],->,Effect,Atom))
(abc_callsupernsx,(Effect,Name,Atom,Atom,Atom~,[Atom],->,Effect,Atom))
,;,;,these,are,natively,bound,calls,,they,take,TopData,because
,;,;,the,real,signature,comes,from,the,callee.
(callstatic,(Effect,Env,TopData,[TopData],->,Effect,TopData)),
(callmethod,(Effect,Env,TopData,[TopData],->,Effect,TopData))
(callinterface,(Effect,Env,TopData,[TopData],->,Effect,TopData))
(newcatch,(Effect,Traits~,->,Effect,Atom~))
(setslot,(Effect,Ord,ScriptObject~,TopData,->,Effect,Bot)),,;,actual,arg,type,is,slot,type
(getslot,(Effect,Ord,ScriptObject~,->,Effect,TopData)),,,,,;,actual,result,type,is,slot,type
(slottype,(ScriptObject~,Ord,->,Traits))
(getouterscope,(Ord,Env,->,Atom~)),
(safepoint,(Effect,[State],->,Effect,State))
(setlocal,(State,Atom,->,State)),,,;,setlocal,is,only,used,to,store,state,for,exception,edges,,which,require,Atom
(newstate,(->,State)),,,,,,,,,,,,,,,,,,,,;,create,abstract,VM,state,value
,;,DEOPT:,new-style,safepoints
(deopt_safepoint,(Effect,[TopData],->,Effect))
(deopt_finish,(Effect,->,Effect))
(deopt_finishcall,(Effect,TopData,->,Effect))
,;,debug
(debugline,(Effect,Int,->,Effect))
(debugfile,(Effect,String,->,Effect))
,;,conversions,to,atom
(string2atom,(String,->,Atom))
(double2atom,(Number,->,Atom~))
(int2atom,(Int,->,Atom~))
(uint2atom,(Uint,->,Atom~))
(scriptobject2atom,(ScriptObject,->,Atom))
(bool2atom,(Boolean,->,Atom~))
(ns2atom,(Namespace,->,Atom))
,;,conversions,from,atom
(atom2bool,(Atom~,->,Boolean))
(atom2double,(Atom,->,Number))
(atom2string,(Atom,->,String))
(atom2int,(Atom,->,Int))
(atom2uint,(Atom,->,Uint))
(atom2scriptobject,(Atom,->,ScriptObject))
(atom2ns,(Atom,->,Namespace))
,;,additional,numeric,conversions
(i2d,(Int,->,Number))
(u2d,(Uint,->,Number))
(d2i,(Number,->,Int)),,;,should,only,be,used,when,range,is,int32,already.
(d2u,(Number,->,Uint)),,;,should,only,be,used,when,range,is,uint32,already.
(toslot,(ScriptObject,Name,->,Ord))
,;,TODO,rename,to,to_primitive_atom?
,;,TODO,need,Primitive,type
(toprimitive,(Effect,Atom,->,Effect,Atom)),,,,
(eqi,,(Int,Int,->,Boolean)),,,,,,,,,,,,,,,;,same,as,LIR_eqi
(lti,,(Int,Int,->,Boolean)),,,,,,,,,,,,,,,;,same,as,LIR_lti
(lei,,(Int,Int,->,Boolean)),,,,,,,,,,,,,,,;,same,as,LIR_lei
(gti,,(Int,Int,->,Boolean)),,,,,,,,,,,,,,,;,same,as,LIR_gti
(gei,,(Int,Int,->,Boolean)),,,,,,,,,,,,,,,;,same,as,LIR_gei
(eqd,,(Number,Number,->,Boolean)),,,,,,,,,;,same,as,LIR_eqd
(ltd,,(Number,Number,->,Boolean)),,,,,,,,,;,same,as,LIR_ltd
(led,,(Number,Number,->,Boolean)),,,,,,,,,;,same,as,LIR_led
(gtd,,(Number,Number,->,Boolean)),,,,,,,,,;,same,as,LIR_gtd
(ged,,(Number,Number,->,Boolean)),,,,,,,,,;,same,as,LIR_ged
(equi,(Uint,Uint,->,Boolean)),,,,,,,,,,,,,;,same,as,LIR_eqi
(ltui,(Uint,Uint,->,Boolean)),,,,,,,,,,,,,;,same,as,LIR_ltui
(leui,(Uint,Uint,->,Boolean)),,,,,,,,,,,,,;,same,as,LIR_leui
(gtui,(Uint,Uint,->,Boolean)),,,,,,,,,,,,,;,same,as,LIR_gtui
(geui,(Uint,Uint,->,Boolean)),,,,,,,,,,,,,;,same,as,LIR_geui
(eqb,,(Boolean,Boolean,->,Boolean)),,,,,,,;,implemented,with,LIR_eqi
,;,value-modifying,conversions
(doubletoint32,(Number,->,Int)),,,,,,,,,,;,ecma-262,compatible,double->int
(i2u,(Int,->,Uint)),,,,,,,,,,,,,,,,,,,,,,;,coerce,i2u,(no-op,at,machine,level)
(u2i,(Uint,->,Int)),,,,,,,,,,,,,,,,,,,,,,;,coerce,u2i,(no-op,at,machine,level)
,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,TEMPLATES,,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;,;
,;,unary,instructions
(abc_increment,,,,(x),(addd,,,,,,,(tonumber,,,,,,,x),1.0))
(abc_decrement,,,,(x),(subd,,,,,,,(tonumber,,,,,,,x),1.0))
(abc_increment_i,,(x),(addi,,,,,,,(toint,,,,,,,,,,x),1))
(abc_decrement_i,,(x),(subi,,,,,,,(toint,,,,,,,,,,x),1))
(abc_not,,,,,,,,,,(x),(not,,,,,,,,(toboolean,,,,,,x)))
(abc_negate,,,,,,,(x),(negd,,,,,,,(tonumber,,,,,,,x)))
(abc_bitnot,,,,,,,(x),(noti,,,,,,,(toint,,,,,,,,,,x)))
(abc_negate_i,,,,,(x),(negi,,,,,,,(toint,,,,,,,,,,x)))
(abc_sxi1,,,,,,,,,(x),(rshi,(lshi,(toint,x),31),31))
(abc_sxi8,,,,,,,,,(x),(rshi,(lshi,(toint,x),24),24))
(abc_sxi16,,,,,,,,(x),(rshi,(lshi,(toint,x),16),16))
(abc_dxnslate,(Effect,Atom,->,Effect,Bot)),,;,calls,dxns(core->intern(Atom))
(abc_dxns,(Effect,String~,->,Effect,Bot))	,;,fixme:,opcode,table,says,these,can,throw,,but,can,they?
(abc_checkfilter,,(x),(ckfilter,,,(cknull,x)))
,;,memory,opcodes
(abc_li8,,,,,,,(addr),,,(li8,,(toint,,,,,,addr)))
(abc_li16,,,,,,(addr),,,(li16,(toint,,,,,,addr)))
(abc_li32,,,,,,(addr),,,(li32,(toint,,,,,,addr)))
(abc_lf32,,,,,,(addr),,,(lf32,(toint,,,,,,addr)))
(abc_lf64,,,,,,(addr),,,(lf64,(toint,,,,,,addr)))
(abc_si8,,,,,,,(x,addr),(si8,,(toint,,,,x),(toint,addr)))
(abc_si16,,,,,,(x,addr),(si16,(toint,,,,x),(toint,addr)))
(abc_si32,,,,,,(x,addr),(si32,(toint,,,,x),(toint,addr)))
(abc_sf32,,,,,,(x,addr),(sf32,(tonumber,x),(toint,addr)))
(abc_sf64,,,,,,(x,addr),(sf64,(tonumber,x),(toint,addr)))
,;,mops,primitives
(li8,(Effect,Int,->,Effect,Int))
(li16,(Effect,Int,->,Effect,Int))
(li32,(Effect,Int,->,Effect,Int))
(lf32,(Effect,Int,->,Effect,Number))
(lf64,(Effect,Int,->,Effect,Number))
(si8,(Effect,Int,Int,->,Effect,Bot))
(si16,(Effect,Int,Int,->,Effect,Bot))
(si32,(Effect,Int,Int,->,Effect,Bot))
(sf32,(Effect,Number,Int,->,Effect,Bot))
(sf64,(Effect,Number,Int,->,Effect,Bot))
,;,binary,instructions
(abc_subtract,,,,(x,y),(subd,,,,,,,(tonumber,x),(tonumber,y)))
(abc_multiply,,,,(x,y),(muld,,,,,,,(tonumber,x),(tonumber,y)))
(abc_modulo,,,,,,(x,y),(modulo,,,,,(tonumber,x),(tonumber,y)))
(abc_divide,,,,,,(x,y),(divd,,,,,,,(tonumber,x),(tonumber,y)))
(abc_add_i,,,,,,,(x,y),(addi,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_subtract_i,,(x,y),(subi,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_multiply_i,,(x,y),(muli,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_bitor,,,,,,,(x,y),(ori,,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_bitand,,,,,,(x,y),(andi,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_bitxor,,,,,,(x,y),(xori,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_lshift,,,,,,(x,y),(lshi,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_rshift,,,,,,(x,y),(rshi,,,,,,,(toint,,,,x),(toint,,,,y)))
(abc_urshift,,,,,(x,y),(rshui,,,,,,(toint,,,,x),(toint,,,,y))),,;,result,is,uint.
,;,specialized,add
(add_ui,(x,y),(addd,(u2d,x),(i2d,y)))
(add_nn,(x,y),(addd,(tonumber,x),(tonumber,y)))
(add_ss,(x,y),(concat_strings,(caststring,x),(caststring,y)))
,;,relational,operators
(abc_lessthan,(x,y)
(lessthan
(toprimitive,x)
(toprimitive,y)))
(abc_greaterequals,(x,y)
(greaterequals
(toprimitive,x)
(toprimitive,y)))
,;,these,call,toprimitive,out,of,order,,see,bugzilla,640052.
(abc_greaterthan,(x,y)
(py,=,(toprimitive,y))
(px,=,(toprimitive,x))
(greaterthan,px,py))
(abc_lessequals,(x,y)
(py,=,(toprimitive,y))
(px,=,(toprimitive,x))
(lessequals,px,py))
,;,specialized,abc_equals
(abc_equals,(Effect,Atom,Atom,->,Effect,Boolean))
(abc_equals_ii,,(x,y),(eqi,x,y))
(abc_equals_uu,,(x,y),(equi,x,y))
(abc_equals_bb,,(x,y),(eqb,x,y))
(abc_equals_nn,,(x,y),(eqd,x,y))
(abc_equals_pp,,(x,y),(eqp,x,y))
(abc_equals_ss,,(x,y),(eqs,x,y)),,;,string,comparison,by,value
(eqp,(ScriptObject,ScriptObject,->,Boolean)),,;,pointer,comparison
(eqs,(String,String,->,Boolean))
,;,TODO:,if,we,have,a,common,base,type,for,ScriptObject|String|Namespace,
,;,(maybe,RCObject),,then,the,eqp,primitive,can,take,that,and,we,can
,;,remove,eqps.
(abc_strictequals,(Atom,Atom,->,Boolean))
,;,other,instructions
(abc_getslot,(slot,object)
(getslot,slot,(cknullobject,object)))
,;,abc_setsuper[x,ns,nsx]
(abc_setsuper,,,,(Effect,Name,Atom~,Atom,->,Effect,Bot))
(abc_setsuperx,,,(Effect,Name,Atom,Atom~,Atom,->,Effect,Bot))
(abc_setsuperns,,(Effect,Name,Atom,Atom~,Atom,->,Effect,Bot))
(abc_setsupernsx,(Effect,Name,Atom,Atom,Atom~,Atom,->,Effect,Bot))
,;,abc_deleteprop[x,ns,nsx]
(abc_deleteprop,,,,(Effect,Name,Atom~,->,Effect,Boolean)),,,,,,,,,;,same,as,getprop,inputs
(abc_deletepropx,,,(Effect,Name,Atom,Atom~,->,Effect,Boolean)),,,;,same,as,getpropx,inputs
(abc_deletepropns,,(Effect,Name,Atom,Atom~,->,Effect,Boolean)),,,;,same,as,getpropx,inputs
(abc_deletepropnsx,(Effect,Name,Atom,Atom,Atom~,->,Effect,Boolean)),,,;,same,as,getpropx,inputs
,;,abc_getprop
(abc_getprop,(Effect,Name,Atom~,->,Effect,Atom))
(abc_getprop_slot,(name,any),(abc_getslot,(toslot,any,name),any))
,;,abc_getpropx
(abc_getpropx,(Effect,Name,Atom,Atom~,->,Effect,Atom)),,,,,,,,,,,,,,,;,abc_getprop,with,[index]
(getpropx_u,,,(name,index,object),(getpropertylate_u,index,object)),,;,abc_getpropx,*[uint],->,*
(getpropx_i,,,(name,index,object),(getpropertylate_i,index,object)),,;,abc_getpropx,*[int],->,*
(getpropx_d,,,(name,index,object),(getpropertylate_d,index,object)),,;,abc_getpropx,*[double],->,*
(getpropx_au,,(name,index,array),,(array_get_u,index,array)),,,,,,,,,;,abc_getpropx,Array[uint],->,*
(getpropx_ai,,(name,index,array),,(array_get_i,index,array)),,,,,,,,,;,abc_getpropx,Array[int],->,*
(getpropx_ad,,(name,index,array),,(array_get_d,index,array)),,,,,,,,,;,abc_getpropx,Array[double],->,*
(getpropx_viu,(name,index,vector),(vectorint_get_u,index,vector)),,,,;,abc_getpropx,Vector.<int>[uint],->,int
(getpropx_vii,(name,index,vector),(vectorint_get_i,index,vector)),,,,;,abc_getpropx,Vector.<int>[int],->,int
(getpropx_vid,(name,index,vector),(vectorint_get_d,index,vector)),,,,;,abc_getpropx,Vector.<int>[double],->,int
(getpropx_vuu,(name,index,vector),(vectoruint_get_u,index,vector)),,,,;,abc_getpropx,Vector.<uint>[uint],->,uint
(getpropx_vui,(name,index,vector),(vectoruint_get_i,index,vector)),,,,;,abc_getpropx,Vector.<uint>[int],->,uint
(getpropx_vud,(name,index,vector),(vectoruint_get_d,index,vector)),,,,;,abc_getpropx,Vector.<uint>[double],->,uint
(getpropx_vdu,(name,index,vector),(vectordouble_get_u,index,vector)),,,,;,abc_getpropx,Vector.<Number>[uint],->,Number
(getpropx_vdi,(name,index,vector),(vectordouble_get_i,index,vector)),,,,;,abc_getpropx,Vector.<Number>[int],->,Number
(getpropx_vdd,(name,index,vector),(vectordouble_get_d,index,vector)),,,,;,abc_getpropx,Vector.<Number>[double],->,Number
(getpropertylate_u,(Effect,Uint,Atom~,->,Effect,Atom)),,,,,,,;,MethodEnv.getpropertylate_u
(getpropertylate_i,(Effect,Int,Atom~,->,Effect,Atom)),,,,,,,,;,MethodEnv.getpropertylate_i
(getpropertylate_d,(Effect,Number,Atom~,->,Effect,Atom)),,,,,;,MethodEnv.getpropertylate_d
(array_get_u,(Effect,Uint,Array~,->,Effect,Atom)),,,,,,,,,,,,;,ArrayObject._getUintProperty
(array_get_i,(Effect,Int,Array~,->,Effect,Atom)),,,,,,,,,,,,,;,ArrayObject._getIntProperty
(array_get_d,(Effect,Number,Array~,->,Effect,Atom)),,,,,,,,,,;,ArrayObject._getNumberProperty
(vectorint_get_u,(Effect,Uint,VectorInt~,->,Effect,Int)),,,,,;,IntVectorObject._getNativeUintProperty
(vectorint_get_i,(Effect,Int,VectorInt~,->,Effect,Int)),,,,,,;,IntVectorObject._getNativeIntProperty
(vectorint_get_d,(Effect,Number,VectorInt~,->,Effect,Int)),,,;,IntVectorObject._getNativeNumberProperty
(vectoruint_get_u,(Effect,Uint,VectorUInt~,->,Effect,Uint)),,,,,;,UIntVectorObject._getNativeUintProperty
(vectoruint_get_i,(Effect,Int,VectorUInt~,->,Effect,Uint)),,,,,,;,UIntVectorObject._getNativeIntProperty
(vectoruint_get_d,(Effect,Number,VectorUInt~,->,Effect,Uint)),,,;,UIntVectorObject._getNativeNumberProperty
(vectordouble_get_u,(Effect,Uint,VectorDouble~,->,Effect,Number)),,,,,;,DoubleVectorObject._getNativeUintProperty
(vectordouble_get_i,(Effect,Int,VectorDouble~,->,Effect,Number)),,,,,,;,DoubleVectorObject._getNativeIntProperty
(vectordouble_get_d,(Effect,Number,VectorDouble~,->,Effect,Number)),,,;,DoubleVectorObject._getNativeNumberProperty
,;,abc_getpropns
(abc_getpropns,(Effect,Name,Atom,Atom~,->,Effect,Atom)),,,;,abc_getprop,with,ns::,qualifier
,;,abc_getpropnsx
(abc_getpropnsx,(Effect,Name,Atom,Atom,Atom~,->,Effect,Atom)),,,,;,name,ns,index,object
,;,abc_setprop
(abc_setprop,(Effect,Name,Atom~,Atom,->,Effect,Bot))
(abc_setprop_slot,(name,object,val),(abc_setslot,(toslot,object,name),object,val)),
,;,abc_setpropx
(abc_setpropx,(Effect,Name,Atom,Atom~,Atom,->,Effect,Bot))
(setpropx_u,(name,index,object,val),(setpropertylate_u,index,object,val)),,;,abc_setpropx,*[uint],,,<-,*
(setpropx_i,(name,index,object,val),(setpropertylate_i,index,object,val)),,;,abc_setpropx,*[int],,,,<-,*
(setpropx_d,(name,index,object,val),(setpropertylate_d,index,object,val)),,;,abc_setpropx,*[double],<-,*
(setpropx_au,(name,index,array,val),(array_set_u,index,array,val)),,,,,,,,,;,abc_setpropx,Array[uint],,,<-,*
(setpropx_ai,(name,index,array,val),(array_set_i,index,array,val)),,,,,,,,,;,abc_setpropx,Array[int],,,,<-,*
(setpropx_ad,(name,index,array,val),(array_set_d,index,array,val)),,,,,,,,,;,abc_setpropx,Array[double],<-,*
(setpropx_viu,(name,index,vector,val),(vectorint_set_u,index,vector,(toint,val))),,;,abc_setpropx,Vector.<int>[uint],,,<-,*
(setpropx_vii,(name,index,vector,val),(vectorint_set_i,index,vector,(toint,val))),,;,abc_setpropx,Vector.<int>[int],,,,<-,*
(setpropx_vid,(name,index,vector,val),(vectorint_set_d,index,vector,(toint,val))),,;,abc_setpropx,Vector.<int>[double],<-,*
(setpropx_vuu,(name,index,vector,val),(vectoruint_set_u,index,vector,(touint,val))),,;,abc_setpropx,Vector.<uint>[uint],,,<-,*
(setpropx_vui,(name,index,vector,val),(vectoruint_set_i,index,vector,(touint,val))),,;,abc_setpropx,Vector.<uint>[int],,,,<-,*
(setpropx_vud,(name,index,vector,val),(vectoruint_set_d,index,vector,(touint,val))),,;,abc_setpropx,Vector.<uint>[double],<-,*
(setpropx_vdu,(name,index,vector,val),(vectordouble_set_u,index,vector,(tonumber,val))),,;,abc_setpropx,Vector.<Number>[uint],,,<-,*
(setpropx_vdi,(name,index,vector,val),(vectordouble_set_i,index,vector,(tonumber,val))),,;,abc_setpropx,Vector.<Number>[int],,,,<-,*
(setpropx_vdd,(name,index,vector,val),(vectordouble_set_d,index,vector,(tonumber,val))),,;,abc_setpropx,Vector.<Number>[double],<-,*
(setpropertylate_u,(Effect,Uint,Atom~,Atom,->,Effect,Bot)),,;,MethodEnv.setpropertylate_u
(setpropertylate_i,(Effect,Int,Atom~,Atom,->,Effect,Bot)),,;,MethodEnv.setpropertylate_i
(setpropertylate_d,(Effect,Number,Atom~,Atom,->,Effect,Bot)),,;,MethodEnv.setpropertylate_d
(array_set_u,(Effect,Uint,Array~,Atom,->,Effect,Bot)),,;,ArrayObject._setUintProperty
(array_set_i,(Effect,Int,Array~,Atom,->,Effect,Bot)),,;,ArrayObject._setIntProperty
(array_set_d,(Effect,Number,Array~,Atom,->,Effect,Bot)),,;,ArrayObject._setNumberProperty
(vectorint_set_u,(Effect,Uint,VectorInt~,Int,->,Effect,Bot)),,;,IntVectorObject._setNativeUintProperty
(vectorint_set_i,(Effect,Int,VectorInt~,Int,->,Effect,Bot)),,;,IntVectorObject._setNativeIntProperty
(vectorint_set_d,(Effect,Number,VectorInt~,Int,->,Effect,Bot)),,;,IntVectorObject._setNativeNumberProperty
(vectoruint_set_u,(Effect,Uint,VectorUInt~,Uint,->,Effect,Bot)),,;,UIntVectorObject._setNativeUintProperty
(vectoruint_set_i,(Effect,Int,VectorUInt~,Uint,->,Effect,Bot)),,;,UIntVectorObject._setNativeIntProperty
(vectoruint_set_d,(Effect,Number,VectorUInt~,Uint,->,Effect,Bot)),,;,UIntVectorObject._setNativeNumberProperty
(vectordouble_set_u,(Effect,Uint,VectorDouble~,Number,->,Effect,Bot)),,;,DoubleVectorObject._setNativeUintProperty
(vectordouble_set_i,(Effect,Int,VectorDouble~,Number,->,Effect,Bot)),,;,DoubleVectorObject._setNativeIntProperty
(vectordouble_set_d,(Effect,Number,VectorDouble~,Number,->,Effect,Bot)),,;,IntVectorObject._setNativeNumberProperty
,;,abc_setpropns
(abc_setpropns,(Effect,Name,Atom,Atom~,Atom,->,Effect,Bot))
,;,abc_setpropnsx
(abc_setpropnsx,(Effect,Name,Atom,Atom,Atom~,Atom,->,Effect,Bot))
,;,abc_initprop
(abc_initprop,,,,(Effect,Name,Atom~,Atom,->,Effect,Bot)),,,,,,,,,,,,,;,same,as,setprop,inputs
(abc_initpropx,,,(Effect,Name,Atom,Atom~,Atom,->,Effect,Bot))
(abc_initpropns,,(Effect,Name,Atom,Atom~,Atom,->,Effect,Bot))
(abc_initpropnsx,(Effect,Name,Atom,Atom,Atom~,Atom,->,Effect,Bot))
,;,abc,setslot
(abc_setslot,(slot,object,val)
(ptr,=,(cknullobject,object))
(setslot,slot,ptr,(coerce,(slottype,ptr,slot),val)))
,;,used,when,HR_find[prop,strict],is,early,bound,to,finddef.,,scopes,is,not,used.
(findprop2finddef,(name,env,scopes)
(abc_finddef,env,name))
,;,used,when,HR_find[prop,strict],is,early,bound,to,getouterscope.,scopes,is,not,used.
(findprop2getouter,(index,env,scopes)
(getouterscope,index,env))
,;,Used,for,builtin,constructors,,effect,is,implicit,in,abc_convert_s
,;,effect,is,implicit,in,abc_convert_s
(callprop_string,(name,stringclass,value),(abc_convert_s,value))
,;,specializations,of,coerce,for,different,traits
(coerce_any,,,,,(traits,value),value)
(coerce_object,,(traits,value),(castobject,value))
(coerce_number,,(traits,value),(tonumber,value))
(coerce_int,,,,,(traits,value),(toint,value))
(coerce_uint,,,,(traits,value),(touint,value))
(coerce_boolean,(traits,value),(toboolean,value))
(coerce_string,,(traits,value),(caststring,value))
(coerce_ns,,,,,,(traits,value),(castns,value))
,;,specializations,of,coerce,for,specific,values,and,traits
(inttouint,,,,,(value),(i2u,value))
(uinttoint,,,,,(value),(u2i,value))
(numbertoint,,,(value),(doubletoint32,value))
(numbertouint,,(value),(i2u,(doubletoint32,value)))
,;,specializations,of,abc_modulo
(abc_modulo_and,(x,y),(i2u,(andi,(u2i,x),(subi,(u2i,y),1))))
'''
#,----------------------------------------------------------------------------------
#
#,test,decls
#
#
getpropx_tests,=,'''
,;,goal:
,;,len:uint,=,v.len
,;,if,(uint(i),>=,len),{,call,helper,},//,no,else
,;,return,v[i],//,load
,;,v1:,no,phi,node,(if,only,traps,;,result,discarded)
(getpropx_vii_v1,(name,index,vector)
(len,=,(vectorint_len,vector))
(uix,=,(i2u,index))
(oob,=,(geui,uix,len))
(if,oob,(vectorint_get_u,uix,vector),0)
(vectorint_load,uix,vector))
,;,v2:,has,phi,(if,traps,or,returns,template,result),
(getpropx_vii_v2,(name,index,vector)
(len,=,(vectorint_len,vector))
(uix,=,(i2u,index))
(oob,=,(geui,uix,len))
(if,oob,
(vectorint_get_u,uix,vector),
(vectorint_load,uix,vector)))
,;,need,these
(vectorint_len,,(Effect,VectorInt~,->,Effect,Uint))
(vectorint_load,(Effect,Uint,VectorInt~,->,Effect,Int))
'''
flow_tests,=,'''
,;,test,various,combos,of,ifs,and,gotos
,;,;,;,IMPLICIT,GOTOS
,;,;,;,simple,if,,implicit,gotos,only
(test_simple_if_implicit_gotos,(c,x,y)
(if,c,(abc_increment,x),(abc_increment,y)))
,;,;,;,nested,if,,implicit,gotos,only
(test_nested_if_implicit_gotos,(c,d,x,y)
(if,c
(if,d,(abc_increment,x),(abc_increment,y))
(if,d,(abc_decrement,x),(abc_decrement,y))))
,;,;,;,EXPLICIT,GOTOS
,;,;,;,explicit,goto,(degenerate,case)
(test_explicit_goto,(x)
(goto,g,x)
(label,g,(x)
(abc_increment,x)))
,;,;,;,simple,if,,explicit,gotos,only
(test_simple_if_explicit_gotos,(c,x,y)
(if,c,(goto,done,x),(goto,done,y))
(label,done,(z),(abc_increment,z)))
,;,;,;,nested,if,,explicit,gotos,only
(test_nested_if_explicit_gotos,(c,d,x,y)
(if,c
(if,d,(goto,inc,x),(goto,inc,y))
(if,d,(goto,dec,x),(goto,dec,y)))
(label,inc,(z),(abc_increment,z))
(label,dec,(z),(abc_decrement,z)))
,;,;,;,nested,if,,explicit,gotos,only,(2)
,;,;,;,here,the,labels,are,nested
,;,;,;
(test_nested_if_explicit_gotos_2,(c,d,x,y)
(if,c
(true:
(if,d,(goto,done,x),(goto,done,y))
(label,done,(z),(abc_increment,z)))
(false:
(if,d,(goto,done,x),(goto,done,y))
(label,done,(z),(abc_decrement,z)))))
,;,;,;,MIXED,GOTOS
,;,;,;,simple,if,,mixed,gotos
(test_simple_if_mixed_gotos,(c,x,y)
(if,c,(goto,done,x),(abc_decrement,y))
(label,done,(z),(abc_increment,z)))
,;,;,;,nested,if,,mixed,gotos
(test_nested_if_mixed_gotos,(c,d,x,y)
(if,c
(if,d,(goto,inc,x),(abc_increment,y))
(if,d,(goto,dec,x),(abc_decrement,y)))
(label,inc,(z),(abc_increment,z))
(label,dec,(z),(abc_decrement,z)))
,;,;,;,NON-TERMINAL,IFS
,;,;,;,if,as,ternary,subexpr
(test_nonterm_if_1,(c,x,y,z)
(abc_add,z,(if,c,(abc_increment,x),(abc_decrement,y))))
,;,;,;,if,returns,a,value,to,binding
(test_nonterm_if_2,(c,x,y,z)
(temp,=,(if,c,(abc_increment,x),(abc_decrement,y)))
(abc_add,z,temp))
,;,;,;,if,computes,unused,values--questionable,,but,legal
(test_nonterm_if_3,(c,x,y,z)
(if,c,(abc_increment,x),(abc_decrement,y))
(abc_add,x,y))
,;,;,;,errors:,non-terminal,ifs,with,gotos,as,arms
,;,;,;,if,returns,a,value,to,binding
,;,(fail_nonterm_if_1,(c,x,y,z)
,;,,,(temp,=,(if,c,(goto,inc,x),(abc_decrement,y)))
,;,,,(abc_add,z,temp)
,;,,,(label,inc,(n),(abc_increment,n)))
,;,;,;,if,computes,unused,values--questionable,,but,legal
,;,(fail_nonterm_if_2,(c,x,y,z)
,;,,,(if,c,(goto,inc,x),(abc_decrement,y))
,;,,,(abc_add,x,y)
,;,,,(label,inc,(n),(abc_increment,n)))
'''
#,abc_add,template,test,-,addjovi,version
#
abc_add_test,=,'''
,;,true,if,atom,is,kIntptrType
(isint,(Atom,->,Boolean))
,;,adds,two,ints,,returns,sum,and,overflow,flag
(addjovi,(Int,Int,Label,->,Int))
,;,local,defs,version
(abc_add2,(x,y)
(if,(isint,x)
(if,(isint,y),(addjovi,x,y,slow),(goto,slow))
(goto,slow))
(label,slow,()
(abc_add,x,y)))
'''
#,abc_add,template,test,-,multiple,result,version
#
abc_add_test_2,=,'''
,;,true,if,atom,is,kIntptrType
(isint,(Atom,->,Boolean))
,;,adds,two,ints,,returns,sum,and,overflow,flag
(addi_ov,(Int,Int,->,Int,Boolean))
,;,local,defs,version
(abc_add2,(x,y)
(if,(isint,x)
(if,(isint,y),(goto,fast),(goto,slow))
(goto,slow))
(label,fast,()
((z,ov),=,(addi_ov,(toint,x),(toint,y)))
(if,ov,(goto,slow),z))
(label,slow,()
(abc_add,x,y)))
'''
#,unit,tests,for,if,-,more,combinatorially,exhaustive
#,than,flow_tests,,but,does,not,test,interaction,with
#,goto.
#
if_tests,=,'''
,;,built-ins,needed,for,any,@if,processing
(if,(Boolean,[Top],->,))
(return,(Effect,[Top],->,)),,;,some,templates,may,return,vm,types
,;,misc,used,in,tests,
(tonumber,(Effect,Atom,->,Effect,Number)),
(lti,,(Int,Int,->,Boolean)),,,,,,,,,,,,,,,;,same,as,LIR_lti
(negi,(Int,->,Int))
(addd,(Number,Number,->,Number)),,,,,,,;,LIR_addd
(subd,(Number,Number,->,Number))
(abc_increment,,,,(x),(addd,,,,,,,(tonumber,,,,,,,x),1.0))
(abc_decrement,,,,(x),(subd,,,,,,,(tonumber,,,,,,,x),1.0))
(cknull,(Effect,Atom,->,Effect,Atom~))
,;
,;,structure
,;,
,;,unnested,short-form,pure,,returned,immediately
(iftest0,(c,x,y),(if,c,x,y))
,;,unnested,short-form,effectful,,returned,immediately
(iftest1a,(c,x),(if,c,(cknull,x),x))
(iftest1b,(a,b,x),(if,(lti,a,b),(abc_increment,x),(abc_decrement,x)))
(iftest1c,(x,y),(if,(lti,x,y),(negi,x),(negi,y)))
,;,unnested,short-form,as,subx
(iftest2,(a,b,x,z)
(addd,
(if,(lti,a,b),(abc_increment,x),(abc_decrement,x))
z))
,;,unnested,short-form,saved,to,local
(iftest3,(a,b,x,z)
(y,=,(if,(lti,a,b),(abc_increment,x),(abc_decrement,x)))
(addd,y,z))
,;
,;,type,inf
,;
,;,simple
(iftest4a,(c,x,y),(if,c,(negi,x),y))
(iftest4b,(c,x,y),(if,c,x,(negi,y)))
,;,nested,1
(iftest5a,(b,c,x,y,z),(if,b,(if,c,(negi,x),y),z))
(iftest5b,(b,c,x,y,z),(if,b,(if,c,x,(negi,y)),z))
(iftest5c,(b,c,x,y,z),(if,b,x,(if,c,(negi,y),z)))
(iftest5d,(b,c,x,y,z),(if,b,x,(if,c,y,(negi,z))))
,;,nested,2
(iftest6,(a,b,c,w,x,y,z)
(if,a
(if,b
(if,c,w,(negi,x)),
y),
z))
,;
,;,long,form
,;,
,;,multiple-statement,bodies,,immediate,return
(iftest7,(c,x,y),
(if,c,
(true:
(x1,=,(abc_increment,x))
(y1,=,(abc_decrement,y))
(addd,x1,y1))
(false:
(x1,=,(abc_decrement,x))
(y1,=,(abc_increment,y))
(addd,x1,y1))))
,;,multiple-statement,bodies,,bound,to,local
(iftest8,(c,x,y),
(z,=,
(if,c,
(true:
(x1,=,(abc_increment,x))
(y1,=,(abc_decrement,y))
(addd,x1,y1))
(false:
(x1,=,(abc_decrement,x))
(y1,=,(abc_increment,y))
(addd,x1,y1))))
z)
'''
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,borrowed,from,http://gist.github.com/240957
#,no,license,information,found
#,Support,for,comments,,;,added,by,Adobe.
from,string,import,whitespace
atom_end,=,set('()"\''),|,set(whitespace)
def,parse(sexp):
stack,,i,,length,=,[[]],,0,,len(sexp)
while,i,<,length:
c,=,sexp[i]
#print,c,,stack
if,c,==,',;':
while,i,+,1,<,length,and,sexp[i,+,1],!=,'\n':
i,+=,1
else:
reading,=,type(stack[-1])
if,reading,==,list:
if,c,==,'(':,stack.append([])
elif,c,==,')':
stack[-2].append(stack.pop())
if,stack[-1][0],==,('quote',):,stack[-2].append(stack.pop())
elif,c,==,'"':,stack.append('')
elif,c,==,"'":,stack.append([('quote',)])
elif,c,in,whitespace:,pass
else:,stack.append((c,))
elif,reading,==,str:
if,c,==,'"':
stack[-2].append(stack.pop())
if,stack[-1][0],==,('quote',):,stack[-2].append(stack.pop())
elif,c,==,'\\':
i,+=,1
stack[-1],+=,sexp[i]
else:,stack[-1],+=,c
elif,reading,==,tuple:
if,c,in,atom_end:
atom,=,stack.pop()
if,atom[0][0].isdigit():,stack[-1].append(eval(atom[0]))
else:,stack[-1].append(atom[0])
if,stack[-1][0],==,('quote',):,stack[-2].append(stack.pop())
continue
else:,stack[-1],=,((stack[-1][0],+,c),)
i,+=,1
return,stack.pop()
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,vi:,set,ts=2,sw=2,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os
from,hrdefs,import,hrdefs
from,sexp,import,parse
from,ast,import,*
#,-----------------------------------------------------
#
#,generate,template,builder,code
#
#,format,argument,value
#
def,fmtArg(expr):
if,expr.kind,==,'TypeConst':
#,return,'tb.typeConst(%s)',%,expr.value.cg()
return,expr.value.cgTraits()
elif,expr.kind,==,'NumConst':
if,type(expr.value),==,int:
return,'tb.intConst(%i)',%,expr.value
elif,type(expr.value),==,float:
return,'tb.doubleConst(%d)',%,expr.value
else:
raise,ParseError("unsupported,constant,'%s'",%,expr.value)
elif,expr.kind,==,'VarRef':
vartype,=,expr.type()
if,vartype,==,int_type:
return,'tb.intConst(%s)',%,expr.value
elif,vartype,==,number_type:
return,'tb.doubleConst(%s)',%,expr.value
else:
raise,ParseError("var,refs,of,type,'%s',not,yet,supported",%,vartype.dump())
else:
return,expr.dump()
#,generate,IfCall,code.
#,optionally,bind,the,result,to,a,local,with,the,given,name.
#,numresults,specifies,the,number,of,results,generated,by,the
#,ifcall--we,use,this,only,if,we,generate,a,merge,label.
#,merge_label,specifies,an,existing,label,to,use,instead,of
#,generating,one.,(TODO,param,count,agreement,is,assumed--verify.)
#
#,if,we,generated,a,merge,label,,return,its,C++,name,,otherwise,None.
#
def,fmtIfCall(ifcall,,lhsname,,numresults,,use_merge_label,,indent):
args,=,[ifcall.condexpr],+,ifcall.args
#,argc,=,len(args)
#,build,arglist,expr.,collect,varargs,in,local,array,if,needed
#,fixc,=,1
#,varc,=,argc,-,fixc
#,if,varc,>,0:
#,,,vaname,=,'%s_args',%,(lhsname,if,lhsname,else,'')
#,,,varargs,=,',,'.join([fmtArg(args[i]),for,i,in,range(fixc,,argc)])
#,,,print,'%sDef*,%s[],=,{,%s,},;',%,(indent,,vaname,,varargs)
#,,,arglist,=,',,'.join([fmtArg(args[i]),for,i,in,range(0,,fixc)],+,[str(varc),,vaname])
#,else:
#,,,arglist,=,',,'.join([fmtArg(args[i]),for,i,in,range(0,,fixc)],+,['0',,'NULL'])
arglist,=,fmtArglist(lhsname,,ifcall.base,,args,,indent)
#,create,IfInstr,and,add,to,IR
repname,=,"IfInstr"
lhs,=,'',if,lhsname,is,None,else,'%s*,%s,=,(%s*)',%,(repname,,lhsname,,repname)
print,'%s%stb.addInstr(new%s(%s)),;',%,(indent,,lhs,,repname,,arglist)
#,an,(if,...),may,have,a,mixture,of,(goto,...),and,plain,exprs,at,its,leaves.
#,we,need,to,generate,a,synthetic,label,for,any,plain,exprs,to,jump,to.
need_merge,=,not(ifcall.iftrue.allPathsEscape(),and
ifcall.iffalse.allPathsEscape())
#,for,any,of,our,paths,which,terminate,without,an,explicit,goto,
#,we,need,to,generate,a,goto,to,a,synthetic,merge,label.
#,our,caller,may,have,supplied,a,candidate,in,use_merge_label,;
#,if,not,,generate,one,now.
#
if,need_merge:
if,use_merge_label,is,None:
#,create,LabelInstr,,but,don't,add,to,IR
merge_label,=,lhsname,+,'_merge'
print,'%sLabelInstr*,%s,=,newLabelInstr(%i),;',%,(indent,,merge_label,,numresults)
else:
merge_label,=,use_merge_label
else:
merge_label,=,None
print,''
fmtArm(ifcall.iftrue,,lhsname,,merge_label,,indent)
fmtArm(ifcall.iffalse,,lhsname,,merge_label,,indent)
return,merge_label,if,use_merge_label,is,None,else,None
#,helper,-,generate,arm,code
#
def,fmtArm(arm,,lhsname,,merge_label,,indent):
repname,=,'ArmInstr'
armname,=,lhsname,+,'_',+,arm.name
print,'%s{,//,%s,%s,arm',%,(indent,,lhsname,,arm.name)
indent,+=,',,'
#,create,ArmInstr,,add,to,IR,,save,to,local
#,note:,"(void)arm,;",prevents,unused,variable,warnings
print,'%s%s*,%s,=,(%s*)tb.addInstr(%s->arm(%s)),;,(void)%s,;',%,(
indent,,repname,,armname,,repname,,lhsname,,arm.name,,armname)
#,create,a,local,for,each,arm,param
for,i,in,range(0,,len(arm.parnames)):
parname,=,arm.parnames[i]
print,'%sDef*,%s,=,&%s->params[%i],;,(void)%s,;',%,(
indent,,parname,,armname,,i,,parname)
print,''
#,generate,arm,body,statements,,up,to,final,instruction
genTemStmts(arm,,indent)
#,if,needed,,generate,a,final,goto,to,synthetic,label
if,not,arm.allPathsEscape():
body,=,arm.body
retinstr,=,body[len(body),-,1]
repname,=,'GotoInstr'
gotoname,=,armname,+,'_exit'
print,'%s%s*,%s,=,newGotoStmt(%s),;,',%,(
indent,,repname,,gotoname,,merge_label)
for,i,in,range(0,,len(retinstr.expr.args)):
print,'%s%s->args[%i],=,%s,;',%,(
indent,,gotoname,,i,,fmtArg(retinstr.expr.args[i]))
print,'%stb.addInstr(%s),;,',%,(indent,,gotoname)
#,close,the,c++,block,for,this,arm
indent,=,indent[:len(indent),-,2]
print,'%s}',%,indent
print,''
#,helper,-,indicates,the,presence,of,a,fixed-arg,factory
#,method,for,variable-arg,instructions,of,a,given,shape.
#,NOTE:,carnal,knowledge,of,InstrFactory,API.
#
def,hasFixedArgFactoryMethod(repname,,argc):
return,(repname,==,'StopInstr',and,argc,==,2),or,\
(repname,==,'CallStmt2',and,(argc,==,4,or,argc,==,3)),or,\
(repname,==,'CallStmt3',and,argc,==,5),or,\
(repname,==,'IfInstr',and,(argc,==,0,or,argc,==,1,or,argc,==,2))
#,generate,argument,list,code.,For,instructions,with,fixed,input
#,shape,,and,common,instances,of,some,variable-input,instructions,
#,a,single-shot,factory,method,is,available.,In,these,cases,we,build
#,a,simple,expression,list,of,args.
#,
#,Other,variable-input,instructions,have,factory,methods,that,take,
#,a,count,and,an,array,for,their,variable,args,(they,may,still,have
#,a,nonzero,number,of,fixed,args,;,these,come,first).,For,these,,we,
#,generate,code,to,create,an,array,of,args,and,assign,it,to,a,local,,
#,then,return,an,expression,list,containing,an,arg,count,and,a,reference
#,to,the,local.,
#,
def,fmtArglist(lhsname,,base,,args,,indent):
rep,=,getRep(base)
fixc,=,rep.shape[EFFECT_IN],+,rep.shape[DATA_IN],#,fixed,arg,count
argc,=,len(args)
varc,=,argc,-,fixc
if,rep.isvarin(),and,not,hasFixedArgFactoryMethod(rep.name,,len(args)):
#,build,arglist,expr.,collect,va_value,in,local,array,if,needed
if,varc,>,0:
va_name,=,'%s_args',%,(lhsname,if,lhsname,else,'')
va_value,=,',,'.join([fmtArg(args[i]),for,i,in,range(fixc,,argc)])
print,'%sDef*,%s[],=,{,%s,},;',%,(indent,,va_name,,va_value)
arglist,=,',,'.join([fmtArg(args[i]),for,i,in,range(0,,fixc)],+,[str(varc),,va_name])
else:
arglist,=,',,'.join([fmtArg(args[i]),for,i,in,range(0,,fixc)],+,['0',,'NULL'])
else:
arglist,=,',,'.join([fmtArg(arg),for,arg,in,args]),#,simple,arg,list
return,arglist
#,generate,Call,code.
#,optionally,bind,the,result,to,a,local,with,the,given,name.
#
def,fmtCall(call,,defs,,indent,,lhsname,=,None):
base,,args,=,call.base,,call.args
#,format,argument,list,,possibly,generating,locals,along,the,way
arglist,=,fmtArglist(lhsname,,base,,args,,indent)
#,add,kind,arg,if,needed
rep,=,getRep(base)
if,getRepCount(rep,,defs),>,1:
arglist,=,base.hrname(),+,',,',+,arglist
#,create,and,add,instr,,maybe,store,to,local
repname,=,rep.name
lhs,=,'',if,lhsname,is,None,else,'%s*,%s,=,(%s*)',%,(repname,,lhsname,,repname)
print,'%s%stb.addInstr(new%s(%s)),;',%,(indent,,lhs,,repname,,arglist)
#,format,call,to,access,the,given,output,of,a,call.
#,Instr,API,has,effect_out(),,value_out(),for,instrs,which
#,have,only,one,effect,or,data,output,(respectively),
#,and,effectOut(i),,value_out(i),for,the,>,1,cases.,Here
#,we,take,an,index,into,the,combined,list,of,outputs.
#
def,fmtAccessor(call,,i):
effects,=,[t.isEffect(),for,t,in,call.types()]
effect,=,effects[i]
fmtix,=,'',if,effects.count(effect),==,1,else,'%s',%,effects[:i].count(effect)
return,'%s(%s)',%,('effect_out',if,effect,else,'value_out',,fmtix)
#,emit,user-defined,labelled,(local),definitions,for,the,given,template.
#,syntactic,restrictions,on,templates,say,that,gotos,must,always,terminate
#,execution,paths,,which,makes,our,job,here,simple--all,user-defined,labelled
#,defs,end,by,jumping,to,a,common,endpoint,label,,given,here,by,endlabelname.
#
def,genLabelDefSection(tem,,end_label_name,,indent):
for,label,in,tem.labels.values():
labelname,=,'label_%s',%,label.name.lstrip('@')
print,'%s{,//,label,%s,in,%s',%,(indent,,labelname,,tem.name)
indent,+=,',,'
print,'%stb.addInstr(%s),;',%,(indent,,labelname)
#,extract,label,params
for,i,in,range(0,,len(label.parnames)):
pname,=,label.parnames[i]
print,'%sDef*,%s,=,&%s->params[%i],;,(void)%s,;',%,(
indent,,pname,,labelname,,i,,pname)
print,''
#,label,body
genTemStmts(label,,indent)
#,build,goto,end,from,return
retinstr,=,label.body[len(label.body),-,1]
repname,=,'GotoInstr'
gotoname,=,labelname,+,'_exit'
print,'%s%s*,%s,=,newGotoStmt(%s),;',%,(
indent,,repname,,gotoname,,end_label_name)
for,i,in,range(0,,len(retinstr.expr.args)):
print,'%s%s->args[%i],=,%s,;',%,(
indent,,gotoname,,i,,fmtArg(retinstr.expr.args[i]))
print,'%stb.addInstr(%s),;,',%,(indent,,gotoname)
indent,=,indent[:len(indent),-,2]
print,'%s}',%,indent
print,''
#,generate,builder,code,from,template,statements
#,note,that,stmtlist,is,currently,either,the,template,body,,or
#,the,template,body,without,the,final,(return),statement.
#
def,genTemStmts(tem,,indent):
#,first,,create,label,instrs.,we,need,to,have,them,around,for,gotos,
#,but,they,don't,go,into,the,IR,until,the,end,of,the,template.
#,note,that,if,we,have,any,labels,,we'll,need,common,endpoint,label
if,len(tem.labels),>,0:
print,'%s//,labels,defined,in,%s,,plus,final,endpoint',%,(
indent,,tem.name)
for,label,in,tem.labels.values():
labelname,=,'label_%s',%,label.name.lstrip('@')
print,'%sLabelInstr*,%s,=,newLabelInstr(%i),;',%,(
indent,,labelname,,label.numParams())
#,endpoint,label
#,note:,we,get,the,number,of,label,params,from,the,number
#,of,returned,results.,
end_label,=,'label_%s',%,tem.genLocalName('end')
print,'%sLabelInstr*,%s,=,newLabelInstr(%i),;',%,(
indent,,end_label,,tem.body[len(tem.body),-,1].expr.base.numParams())
print,''
else:
end_label,=,None
#,emit,mainline,statement,list
#,for,stmt,in,tem.body[:len(tem.body),-,1]:
for,i,in,range(0,,len(tem.body),-,1):
stmt,=,tem.body[i]
if,stmt.kind,==,'LocalDefs':
#,lhs,=,...
rhs,=,stmt.expr
if,rhs.kind,==,'Call':
#,lhs,=,if/goto/call
basename,=,rhs.base.name
iname,=,tem.genLocalName(basename),if,len(stmt.names),>,0,else,None
if,basename,==,'if':
#,if,this,if-stmt,is,the,terminal,statement,of,the,template,
#,and,we,have,user-defined,labelled,defs,,then,the,if,can,use,our
#,end_label,as,a,post-if,merge,point,,if,needed.
use_merge_label,=,end_label,if,i,==,len(tem.body),-,2,else,None
#,fmt_ifcall,will,return,the,name,of,merge,label,to,generate
new_merge_label,=,fmtIfCall(rhs,,iname,,len(stmt.names),,use_merge_label,,indent)
#,add,generated,merge,label,to,IR,and,extract,vars
if,new_merge_label:
print,'%s//,%s,merge,label,,defs',%,(indent,,iname)
print,'%stb.addInstr(%s),;',%,(indent,,new_merge_label)
#,create,C++,local,for,each,LocalDefs,binding
for,i,in,range(0,,len(stmt.names)):
varname,=,stmt.names[i]
print,'%sDef*,%s,=,&%s->params[%i],;,(void)%s,;',%,(
indent,,varname,,new_merge_label,,i,,varname)
elif,basename.startswith('@'):
#,goto,label
labelname,=,'label_%s',%,rhs.base.name.lstrip('@')
repname,=,'GotoInstr'
gotoname,=,tem.genLocalName('goto')
print,'%sGotoInstr*,%s,=,newGotoStmt(%s),;',%,(
indent,,gotoname,,labelname)
for,i,in,range(0,,len(rhs.args)):
print,'%s%s->args[%i],=,%s,;',%,(
indent,,gotoname,,i,,fmtArg(rhs.args[i]))
print,'%stb.addInstr(%s),;',%,(indent,,gotoname)
else:
#,call
fmtCall(rhs,,defs,,indent,,iname)
#,create,local,for,each,LocalDefs,binding
for,i,in,range(0,,len(stmt.names)):
labelname,=,stmt.names[i]
accessor,=,fmtAccessor(rhs,,i)
print,'%sDef*,%s,=,%s->%s,;,(void)%s,;',%,(
indent,,labelname,,iname,,accessor,,labelname)
print,''
else:
#,lhs,=,non-call
labelname,=,stmt.names[0]
ldef,=,stmt.defs[stmt.names[0]]
print,'%sDef*,%s,=,%s,;',%,(indent,,labelname,,fmtArg(ldef))
print,''
elif,stmt.kind,==,'Call':
#,otherwise,it's,just,an,unbound,call,,no,lhs
#,NOTE:,this,doesn't,happen,at,the,moment
fmtCall(stmt,,defs,,indent)
else:
#,nothing,else,at,the,top,level,of,a,template,body
raise,ParseError('unknown,statement,type,in,body,list:,%s',%,stmt.dump())
#,wrap,it,up
#,if,needed,,emit,defined,label,code,,plus,final,endpoint
if,len(tem.labels),>,0:
genLabelDefSection(tem,,end_label,,indent)
#,add,endpoint,label
print,'%s//,common,endpoint,block',%,indent
print,'%stb.addInstr(%s),;',%,(indent,,end_label)
#,create,C++,local,for,each,LocalDefs,binding,fromt
#,terminal,statement
term_stmt,=,tem.body[len(tem.body),-,2]
for,i,in,range(0,,len(term_stmt.names)):
varname,=,term_stmt.names[i]
print,'%sDef*,%s,=,&%s->params[%i],;,(void)%s,;',%,(
indent,,varname,,end_label,,i,,varname)
print,''
#,finally,,add,return,instr,for,top-level,templates
#,TODO,verify,handling,of,extracted,vars,(above),in,nested,tems
if,tem.parent,is,None:
ret_stmt,=,tem.body[len(tem.body),-,1]
fmtCall(ret_stmt.expr,,defs,,indent)
#,generate,builder,switch,case,for,a,template
#
def,genTemBuilderCase(tem):
hrname,=,tem.hrname()
print,',,case,%s:,{',%,hrname
print,'/***'
print,tem.dump()
print,'***/'
print,''
print,',,,,const,Type*,in_types[],=,{,%s,},;',%,',,'.join([t.cgType(),for,t,in,tem.partypes])
print,',,,,tb.start(%s,,%i,,in_types),;',%,(hrname,,len(tem.partypes))
print,''
for,i,in,range(0,,len(tem.parnames)):
pname,=,tem.parnames[i]
print,',,,,Def*,%s,=,tb.paramRef(%i),;,(void)%s,;',%,(pname,,i,,pname)
print,''
genTemStmts(tem,,',,,,')
#,emit,labels
#,emit,return
print,''
print,',,,,break,;'
print,',,}'
print,''
#,generate,template,builder,function,impl
def,genTemBuilderCases(defs):
for,d,in,templates_only(defs):
genTemBuilderCase(d)
#,-----------------------------------------------------
#
#,generate,type,signature,builder,code
#
#,generate,input,signature,builder,function
#
def,genInputSigBuilder(defs):
print,'///,return,input,type,signature,for,given,instruction'
print,'///'
print,'const,Type**,InstrFactory::buildInputSignature(InstrKind,kind),{'
print,',,switch,(kind),{'
for,d,in,defs:
hrname,=,d.hrname()
print,',,case,%s:,{',%,hrname
print,',,,,/*,%s,*/',%,d.dumpSig()
siglen,=,len(d.partypes)
if,siglen,==,0:
print,',,,,return,NULL,;'
elif,siglen,==,1:
print,',,,,return,copySig(%s),;',%,d.partypes[0].cgType()
else:
print,',,,,const,Type*,input_sig[],=,{,%s,},;',%,',,'.join([t.cgType(),for,t,in,d.partypes])
print,',,,,return,copySig(%i,,input_sig),;',%,len(d.partypes)
print,',,}'
print,',,default:,{'
print,',,,,assert(false,&&,"unsupported,opcode"),;'
print,',,,,return,NULL,;'
print,',,}'
print,',,},//,switch'
print,'}'
#,generate,output,signature,builder,function
#
def,genOutputSigBuilder(defs):
print,'///,return,output,type,signature,for,given,instruction'
print,'///'
print,'const,Type**,InstrFactory::buildOutputSignature(InstrKind,kind),{'
print,',,switch,(kind),{'
for,d,in,defs:
hrname,=,d.hrname()
print,',,case,%s:,{',%,hrname
print,',,,,/*,%s,*/',%,d.dumpSig()
siglen,=,len(d.rettypes)
if,siglen,==,0:
print,',,,,return,NULL,;'
elif,siglen,==,1:
print,',,,,return,copySig(%s),;',%,d.rettypes[0].cgType()
else:
print,',,,,const,Type*,output_sig[],=,{,%s,},;',%,',,'.join([t.cgType(),for,t,in,d.rettypes])
print,',,,,return,copySig(%i,,output_sig),;',%,len(d.rettypes)
print,',,}'
print,',,default:,{'
print,',,,,assert(false,&&,"unsupported,opcode"),;'
print,',,,,return,NULL,;'
print,',,}'
print,',,},//,switch'
print,'}'
def,genSigBuildersImpl(defs):
genInputSigBuilder(defs)
print,''
genOutputSigBuilder(defs)
#,------------------------------------------------------
#
#,generate,predicate,methods
#
#,helper:,sorted,list,of,all,distinct,reps
def,allReps():
repset,=,set(replist,+
instr_rep_overrides.values(),+
shape_rep_overrides.values())
return,sorted(repset,,key=lambda,rep:,(rep.shape,,rep.name))
#,generate,is-shape,function,for,a,given,RepInfo
def,genIsShape(defs,,shapeinfo,,proto,=,False):
print,'///,true,if,given,InstrKind,is,instance,of,%s',%,shapeinfo.name
if,proto:
print,'static,bool,is%s(InstrKind,k),;',%,shapeinfo.name
else:
print,'bool,InstrFactory::is%s(InstrKind,k),{',%,shapeinfo.name
print,',,return,instr_attrs[k].shape,==,%s,;',%,shapeinfo.enum()
print,'}'
print,''
#,generate,has-template,pred
def,genHasTemplate(defs,,proto,=,False):
print,'///,true,if,given,InstrKind,has,a,template'
if,proto:
print,'static,bool,hasTemplate(InstrKind,k),;'
else:
print,'bool,InstrFactory::hasTemplate(InstrKind,k),{'
print,',,return,instr_attrs[k].hastem,;'
print,'}'
print,''
#,generate,InstrFactory,predicate,impls
def,genPredsImpl(defs):
genHasTemplate(defs,,False)
for,sh,in,allReps():
genIsShape(defs,,sh)
#,generate,InstrFactory,predicate,protos
def,genPredsProto(defs):
genHasTemplate(defs,,True)
for,sh,in,allReps():
genIsShape(defs,,sh,,True)
#,--------------------------------------------------------
#
#,generate,shape,and,instr,enums
#
#,helper:,return,map,of,rep,names,to,counts.
#,CAUTION,-,relies,on,unique,rep,names.,Can,fail,,but,not,silently.
#,CAUTION,-,cache,assumes,single,def,list,over,lifetime,of,CG
rep_counts,=,None
def,getRepCount(rep,,defs):
global,rep_counts
if,rep_counts,is,None:
repnames,=,[r.name,for,r,in,allReps()]
defrepnames,=,[getRep(d).name,for,d,in,defs]
rep_counts,=,dict(zip(repnames,,[defrepnames.count(repname),for,repname,in,repnames]))
return,rep_counts[rep.name]
#
def,shapeData(sh):
return,"%i,,%i,,%s",%,(
sh[0],+,sh[1],,sh[2],+,sh[3],,vararg_names[sh[4]])
#
def,genEnums(defs,,proto,=,False):
reps,=,allReps()
if,proto:
print,'///,High,level,intermediate,representation,(HR),opcodes'
print,'///'
print,'enum,InstrKind,{'
for,i,in,range(0,,len(defs)):
d,=,defs[i]
print,',,%s,,%s//,%s,%s',%,(
d.hrname(),,',',*,max(0,,24,-,len(d.hrname())),
getRep(d).name,,'template',if,d.isTemplate(),else,'')
print,',,HR_MAX,=,%s,+,1',%,defs[len(defs),-,1].hrname()
print,'},;'
print,''
print,'///,VarargKind,designates,variability,in,at,most,one'
print,"///,of,an,instruction's,four,argument,groups."
print,'///'
print,'enum,VarargKind,{'
for,i,in,[DATA_IN,,DATA_OUT,,NONE]:
print,',,%s,',%,vararg_names[i]
print,',,VARARGKIND_MAX,=,%s',%,vararg_names[NONE]
print,'},;'
print,''
print,'///,ShapeRep,describes,the,representation,of,an,instruction,shape.'
print,'///,Note,that,when,varargs,are,specified,,the,corresponding'
print,'///,member,gives,a,minimum,,rather,than,exact,,quantity.'
print,'///,For,example,,a,ShapeRep,with,vararg,==,%s,and,datain,==,2',%,vararg_names[DATA_IN]
print,'///,describes,instructions,with,*at,least*,2,data,inputs.'
print,'///'
print,'struct,ShapeRep,{'
print,',,int,num_uses,;,,,,,,,,,,,,//,number,of,Use,inputs'
print,',,int,num_defs,;,,,,,,,,,,,,//,number,of,Def,outputs'
print,',,VarargKind,vararg,;,,,,,,,//,vararg,position,,if,any'
print,'},;'
print,''
print,'///,InstrShape,is,an,enumeration,of,HR,instruction,shapes.'
print,'///,The,representation,details,of,each,InstrShape,s,is,described,by'
print,'///,shape_reps[s].'
print,'///'
print,'enum,InstrShape,{'
for,i,in,range(0,,len(reps)):
rep,=,reps[i]
shapedump,=,shapeData(rep.shape)
print,',,%s,,%s//,%s,%s%i,instrs',%,(rep.enum(),
',',*,max(0,,24,-,len(rep.enum())),,shapedump,
',',*,max(0,,24,-,len(shapedump)),,getRepCount(rep,,defs))
print,',,SHAPE_MAX,=,%s,+,1',%,reps[len(reps),-,1].enum()
print,'},;'
print,''
if,proto:
print,'///,shape_reps[],gives,the,representations,of'
print,'///,the,shapes,enumerated,by,InstrShape.'
print,'///'
print,'extern,const,ShapeRep,shape_reps[SHAPE_MAX],;'
print,''
else:
print,'///,shape_reps[],gives,the,representations,of'
print,'///,the,shapes,enumerated,by,InstrShape.'
print,'///'
print,'extern,const,ShapeRep,shape_reps[SHAPE_MAX],=,{'
for,rep,in,reps:
sh,=,rep.shape
print,',,{,%s,},,%s//,%s',%,(shapeData(sh),
',',*,max(0,,10,-,len(vararg_names[sh[4]])),,rep.enum())
print,'},;'
print,''
if,proto:
print,'///,InstrAttrs,contains,attributes,specific,to,(and,universal'
print,'///,across,all,instances,of),a,particular,HR,instruction.'
print,'///'
print,'struct,InstrAttrs,{'
print,',,const,char*,name,;,,//,printable,name'
print,',,InstrShape,shape,;,,//,shape,(const)'
print,',,bool,hastem,;,,,,,,,//,true,if,instruction,has,a,template,(const)'
print,'},;'
print,''
print,'///,instr_attrs,describes,the,instructions,enumerated,in,InstrKind.'
print,'///'
print,'extern,const,InstrAttrs,instr_attrs[HR_MAX],;'
print,''
else:
print,'///,instr_attrs,describes,the,instructions,enumerated,in,InstrKind.'
print,'///'
print,'extern,const,InstrAttrs,instr_attrs[HR_MAX],=,{'
for,d,in,defs:
print,',,{,"%s",,%s%s,,%s,},',%,(d.name,,',',*,max(0,,24,-,len(d.hrname())),
getRep(d).enum(),,'true',if,d.isTemplate(),else,'false')
print,'},;'
print,''
#,generate,enum,declarations
def,genEnumsProto(defs):
genEnums(defs,,True)
#,generate,enum,data,definitions
def,genEnumsImpl(defs):
genEnums(defs,,False)
#,-----------------------------------------------------
#
#,generate,kind-driven,dispatcher,infrastructure
#
#,generate,kind,adapter,methods,
#
def,genKindAdapterMethods(defs):
for,d,in,defs:
rep,=,getRep(d)
print,('RETURN_TYPE,do_%s(%s*,i),{,return,static_cast<SELF_CLASS*>(this)->do_default(i),;,}'
		,,%,(d.name,,rep.name))
#,generate,dispatch,function,switch,cases
#
def,genKindAdapterCases(defs):
for,d,in,defs:
hrname,=,d.hrname()
rep,=,getRep(d)
print,'case,%s:,',%,hrname
print,',,return,a->do_%s(cast<%s>(instr)),;',%,(d.name,,rep.name)
#,-----------------------------------------------------
#
#,generate,shape-driven,dispatcher,infrastructure
#
#,generate,shape,adapter,methods,
#
def,genShapeAdapterMethods(defs):
reps,=,allReps()
for,rep,in,reps:
print,('RETURN_TYPE,do_%s(%s*,i),{,return,static_cast<SELF_CLASS*>(this)->do_default(i),;,}'
	,,,,,,%,(rep.name,,rep.name))
#,generate,dispatch,function,switch,cases
#
def,genShapeAdapterCases(defs):
reps,=,allReps()
for,rep,in,reps:
print,'case,%s:,',%,rep.enum()
print,',,return,a->do_%s(cast<%s>(instr)),;',%,(rep.name,,rep.name)
#,-----------------------------------------------------
#
#,generate,C++,definitions,of,runtime,helper,functions
#
cpp_type_map,=,{
'Atom':,'Atom',
'Boolean':,'BoolKind',
'Class':,'ClassClosure*',
'Env':,'MethodEnv*',
'Int':,'int32_t',
'Method':,'MethodInfo*',
'Name':,'const,Multiname*',
'Namespace':,'Namespace*',
'Number':,'double',
'Ord':,'int',
'String':,'String*',
'Effect':,'void',
'Traits':,'Traits*',
'Uint':,'uint32_t',
'Object':,'Atom',
'ScriptObject':,'ScriptObject*',
'Array':,'ArrayObject*',
'VectorInt':,'IntVectorObject*',
'VectorUInt':,'UIntVectorObject*',
'VectorDouble':,'DoubleVectorObject*',
'Function':,'ClassClosure*',
'Bot':,'void',
}
def,cpp_typename(t):
name,=,t.name
if,name.endswith('~'):
name,=,name[0:len(name)-1]
return,cpp_type_map[name],if,name,in,cpp_type_map,else,'?'+name
#,true,if,the,shape,for,d,treats,the,last,fixed,arg,as,the,first,vararg
def,has_extra_vararg(d):
return,getRep(d).name.startswith('CallStmt')
def,make_argsig(d):
sig,=,[cpp_typename(t),for,t,in,d.partypes,if,cpp_typename(t),!=,'void']
if,d.isvarin:
vartype,=,sig[len(sig)-1]
fixc,=,getRep(d).shape[DATA_IN],-,(1,if,has_extra_vararg(d),else,0)
sig,=,sig[0:fixc],+,['int'],+,['%s*',%,vartype]
return,['MethodFrame*'],+,sig
def,ret_type(d):
sig,=,[t,for,t,in,d.rettypes,if,not,t.isEffect()]
return,sig[0],if,len(sig),==,1,else,None
def,make_ret_ctype(d):
t,=,ret_type(d)
return,cpp_typename(t),if,t,else,'void'
#,Make,a,list,of,just,primitive,instructions
def,protos_only(defs):
return,[d,for,d,in,defs,if,not(d.isTemplate())]
#,return,a,list,of,all,template,instructions
def,templates_only(defs):
return,[d,for,d,in,defs,if,d.isTemplate()]
#,Exclude,instructions,with,TopData,or,Top,in,their,signature,
#,or,any,instruction,with,2+,data,outputs.
def,do_generate_stub(d):
fullsig,=,[t.name,for,t,in,d.partypes,+,d.rettypes]
return,not,('TopData',in,fullsig,or,'Top',in,fullsig,or,'State',in,fullsig)\
and,d.shape[DATA_OUT],in,range(2)
#,Generate,a,class,with,C++,prototypes,for,each,stub.
def,gen_stub_protos(defs):
protos,=,protos_only(defs)
stubs,=,[d,for,d,in,protos,if,do_generate_stub(d)]
print,"namespace,halfmoon,{"
print,"using,namespace,avmplus,;"
print,"struct,Stubs,{"
print,",,static,const,int,stub_count,=,%d,;",%,len(protos)
print
for,d,in,stubs:
print,',,//,%s',%,d.dumpSig()
arg_sig,=,make_argsig(d)
ret_ctype,=,make_ret_ctype(d)
print,',,static,%s,do_%s(%s),;',%,(ret_ctype,,d.name,,',,'.join(arg_sig))
print
print,"},;"
print
print,"/*,One-line,implementations,,for,copy/paste,convenience:"
for,d,in,stubs:
arg_sig,=,make_argsig(d)
ret_ctype,=,make_ret_ctype(d)
ret_stmt,=,'return,0,;,',if,ret_ctype,!=,'void',else,''
print,',,%s,Stubs::do_%s(%s),{,assert(false,&&,"%s,not,implemented"),;,%s}',%\
(ret_ctype,,d.name,,',,'.join(arg_sig),,d.name,,ret_stmt)
print,"*/"
print,"}"
#,Map,C++,type,names,to,nanojit::ArgType,enums.
def,lir_argtype(ctype):
if,ctype,==,'void':
return,'ARGTYPE_V'
if,ctype,==,'double':
return,'ARGTYPE_D'
if,ctype,==,'uint32_t':
return,'ARGTYPE_UI'
if,ctype,in,['int',,'int32_t',,'BoolKind']:
return,'ARGTYPE_I'
return,'ARGTYPE_P'
#,Generate,the,LIR,typesig,builder,expression,by,mapping,the,C++,
#,paramter,types,to,LIR,ArgType,enums.
def,lir_typesig(d):
argtypes,=,[lir_argtype(s),for,s,in,make_argsig(d)]
sigtypes,=,[lir_argtype(make_ret_ctype(d))],+,argtypes
return,'CallInfo::typeSig%d(%s)',%,(len(argtypes),,',,'.join(sigtypes))
#,an,opcode,is,pure,if,it,has,no,side,effects.,,Since,side-effect
#,types,are,mapped,to,C++,'void',,we,scan,for,void.
def,lir_ispure(d):
return,1,if,'void',not,in,[cpp_typename(t),for,t,in,d.partypes],else,0
def,lir_accset(d):
return,'ACCSET_NONE',if,lir_ispure(d),else,'ACCSET_ALL'
#,generate,a,table,of,nanojit,CallInfo,structures,;,one,for,each,stub.
def,gen_stub_lirtable(defs):
protos,=,protos_only(defs)
print,"namespace,halfmoon,{"
print,"const,nanojit::CallInfo,LirEmitter::lir_table[],=,{"
for,d,in,protos:
if,do_generate_stub(d):
print,',,{,(uintptr_t)&Stubs::do_%s,,%s,,ABI_CDECL,,%d,,%s,verbose_only(,,"%s")},',%\
(d.name,,lir_typesig(d),,lir_ispure(d),,lir_accset(d),,d.name)
else:
print,',,{,0,,0,,ABI_CDECL,,0,,ACCSET_NONE,verbose_only(,,"%s")},',%,d.name
print,"},;"
print
print,"const,int,LirEmitter::stub_fixc[],=,{"
for,d,in,protos:
fixc,=,(getRep(d).shape[DATA_IN],-,(1,if,has_extra_vararg(d),else,0)),if,d.isvarin\
else,-1,#,-1,means,stub,has,fixed,arg,count,despite,variadic,shape
print,',,%d,,//,%s',%,(fixc,,d.name)
print,"},;"
print,"}"
#,return,the,interpreter,getter,expression,for,type,t
interp_getter_name,=,{
'double',:,'interp->getDouble',
'int',:,'interp->getOrdinal',
'int32_t',:,'interp->getInt',
'uint32_t',:,'interp->getUint',
'BoolKind',:,'interp->getBool',
'String*',:,'interp->getString',
'Namespace*',:,'interp->getNs',
'Atom',:,'interp->getAtom',
'Traits*',:,'interp->getTraits',
'MethodEnv*',:,'interp->getEnv',
'MethodInfo*',:,'interp->getMethod',
'const,Multiname*',:,'interp->getName',
'ScriptObject*',:,'interp->getObject',
'ArrayObject*',:,'(ArrayObject*)interp->getObject',
'IntVectorObject*',:,'(IntVectorObject*)interp->getObject',
'UIntVectorObject*',:,'(UIntVectorObject*)interp->getObject',
'DoubleVectorObject*',:,'(DoubleVectorObject*)interp->getObject',
'ClassClosure*',:,'(ClassClosure*)interp->getObject',
}
def,interp_getter(t):
return,interp_getter_name[cpp_typename(t)]
#,return,the,Interpreter,Value,constructor,name,for,the,return,type,of,d
def,interp_value(d):
ct,=,cpp_typename(ret_type(d))
return,'AtomValue',if,ct,==,'Atom'\
else,'OrdValue',if,ct,==,'int'\
else,'Value'
#,generate,a,class,of,helper,functions,for,the,interpreter.,,Each,one
#,unpacks,arguments,,invokes,the,stub,,then,saves,the,result,Value.
#,var-in,instructions,are,handled,by,passing,a,count,and,pointer,to
#,values.,,void,stubs,are,handled,by,not,saving,the,result.
def,gen_stub_callers(defs):
protos,=,protos_only(defs)
stubs,=,[d,for,d,in,protos,if,do_generate_stub(d)]
print,"namespace,halfmoon,{"
print,"class,StubCaller,{"
print,",public:"
for,d,in,stubs:
exprs,=,['%s(instr->use(%d))',%,(interp_getter(d.partypes[i]),,i),for,i,in,range(len(d.partypes))\
if,cpp_typename(d.partypes[i]),!=,'void']
print,',,//,%s',%,d.dumpSig()
print,',,static,void,do_%s(Interpreter*,interp,,%s*,instr),{',%,(d.name,,getRep(d).name)
if,d.isvarin:
fixc,=,getRep(d).shape[DATA_IN],-,(1,if,has_extra_vararg(d),else,0)
var_type,=,d.partypes[len(d.partypes)-1]
var_ctype,=,cpp_typename(var_type)
vargetter,=,interp_getter(var_type)
print,',,,,int,argc,=,instr->arg_count(),;'
print,',,,,Use*,arg_uses,=,instr->args(),;'
print,',,,,%s*,args,=,(%s*)interp->args_out_,;',%,(var_ctype,,var_ctype)
print,',,,,for,(int,i,=,0,;,i,<,argc,;,++i)'
print,',,,,,,args[i],=,%s(arg_uses[i]),;',%,(vargetter)
exprs,=,exprs[0:fixc],+,['argc,,args']
exprs,=,['&interp->frame_'],+,exprs
arg_expr,=,',\n,,,,,,,,'.join(exprs)
ret_ctype,=,make_ret_ctype(d)
if,ret_ctype,==,'void':
print,',,,,Stubs::do_%s(%s),;',%,(d.name,,arg_expr)
print,',,,,(void)interp,;'
else:
print,',,,,interp->resultVal(instr->value_out()),=,%s(Stubs::do_%s(%s)),;',%\
(interp_value(d),,d.name,,arg_expr)
if,len(exprs),==,1,and,ret_ctype,==,'void':
print,',,,,(void)instr,;'
print,',,}'
print
print,"},;"
print
#,generate,a,table,with,pointers,to,the,helper,functions,,indexed,by,InstrKind
print,"const,Interpreter::StubCall,Interpreter::stub_table[],=,{"
for,d,in,protos:
if,do_generate_stub(d):
print,',,(StubCall)&StubCaller::do_%s,',%,d.name
else:
print,',,0,,//,%s',%,d.name
print,"},;"
print
print,"}"
#,End,generation,of,helpers,for,stubs
#,--------------------------------------------------------
#
#,generator,harness,and,helpers
#
def,printheader():
print,'///'
print,'///,generated,by,templates.py,--,do,not,edit'
print,'///'
print
gendir,=,"../generated"
def,genfile(defs,,gen,,filename):
if,not(os.path.exists(gendir)):
os.mkdir(gendir)
f,=,open('%s/%s',%,(gendir,,filename),,'wb')
try:
sys.stdout,=,f
printheader()
gen(defs)
finally:
f.close()
sys.stdout,=,sys.__stdout__
#,group,defs,into,primitives-then-templates,
def,sortdefs(defs):
return,protos_only(defs),+,templates_only(defs)
def,gendefs(defs):
defs,=,sortdefs(defs)
genfile(defs,,genEnumsProto,,,,,,,,,,,,,"InstrFactory_defs_proto.hh")
genfile(defs,,genEnumsImpl,,,,,,,,,,,,,,"InstrFactory_defs_impl.hh")
genfile(defs,,genPredsProto,,,,,,,,,,,,,"InstrFactory_preds_proto.hh")
genfile(defs,,genPredsImpl,,,,,,,,,,,,,,"InstrFactory_preds_impl.hh")
genfile(defs,,genSigBuildersImpl,,,,,,,,"InstrFactory_signatures_impl.hh")
genfile(defs,,genTemBuilderCases,,,,,,,,"InstrFactory_buildTemplate_cases.hh")
genfile(defs,,genKindAdapterMethods,,,,,"KindAdapter_methods.hh")
genfile(defs,,genKindAdapterCases,,,,,,,"KindAdapter_cases.hh")
genfile(defs,,genShapeAdapterMethods,,,,"ShapeAdapter_methods.hh")
genfile(defs,,genShapeAdapterCases,,,,,,"ShapeAdapter_cases.hh")
genfile(defs,,gen_stub_protos,,,,,,,,,,,,,"Stub_protos.hh")
genfile(defs,,gen_stub_lirtable,,,,,,,,,,,"Stub_lirtable.hh")
genfile(defs,,gen_stub_callers,,,,,,,,,,,,"Stub_callers.hh")
def,trace(s):
save,=,sys.stdout
sys.stdout,=,sys.__stdout__
print,s
sys.stdout,=,save
#,-----------------------------------------------------
#
#,main
#
#,dump,processed,defs
def,dump(defs):
for,d,in,defs:
print,'\n',+,d.dump()
#,generator,functions,callable,from,the,command,line
gens,=,{
'defs':,gendefs,,,,,,,,,#,generate,code
'dump':,dump,,,,,,,,,,,,#,dump,internal,reps
}
if,len(sys.argv),>,1,and,sys.argv[1],in,gens:
gen,=,gens[sys.argv[1]]
else:
print,"Error:,must,specify,defs,or,dump,as,command-line,argument"
sys.exit(1)
try:
sexprs,=,[sexpr,for,sexpr,in,parse(hrdefs),if,isValid(sexpr)]
defs,=,[toDef(sexpr),for,sexpr,in,sexprs]
process(defs)
gen(defs)
except,ParseError,as,e:
print,'parse,error:,%s',%,e.message()
sys.exit(1)
#!/usr/bin/python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
instr_names,=,[#,,"setslot",,"atom2scriptobject",,"getslot",,"cknullobject",,"loadenv",,,"callmethod",,"return","getouterscope",
#,"getouterscope",,#finds,it,here..
"start",,,,,,,,,,,,,,,,,,
"template",,,,,,,,,,,,,,
"return",,,,,,,,,,,,,,,,
"throw",,,,,,,,,,,,,,,,,
"goto",,,,,,,,,,,,,,,,,,
"label",,,,,,,,,,,,,,,,,
"if",,,,,,,,,,,,,,,,,,,,
"switch",,,,,,,,,,,,,,,,
"arm",,,,,,,,,,,,,,,,,,,
"const",,,,,,,,,,,,,,,,,
"coerce",,,,,,,,,,,,,,,,
"cast",,,,,,,,,,,,,,,,,,
"castobject",,,,,,,,,,,,
"tonumber",,,,,,,,,,,,,,
"toint",,,,,,,,,,,,,,,,,
"touint",,,,,,,,,,,,,,,,
"toboolean",,,,,,,,,,,,,
"d2b",,,,,,,,,,,,,,,,,,,
"caststring",,,,,,,,,,,,
"castns",,,,,,,,,,,,,,,,
"cknull",,,,,,,,,,,,,,,,
"cknullobject",,,,,,,,,,
"cktimeout",,,,,,,,,,,,,
"abc_hasnext",,,,,,,,,,,
"abc_hasnext2",,,,,,,,,,
"never",,,,,,,,,,,,,,,,,
"call",,,,,,,,,,,,,,,,,,
"construct",,,,,,,,,,,,,
"constructsuper",,,,,,,,
"loadenv_namespace",,,,,
"loadenv_boolean",,,,,,,
"loadenv_number",,,,,,,,
"loadenv_string",,,,,,,,
"loadenv_interface",,,,,
"loadenv",,,,,,,,,,,,,,,
"loadenv_atom",,,,,,,,,,
"loadinitenv",,,,,,,,,,,,
"loadsuperinitenv",,,,,,,
"newobject",,,,,,,,,,,,,,
"newarray",,,,,,,,,,,,,,,
"applytype",,,,,,,,,,,,,,
"newinstance",,,,,,,,,,,,
"abc_convert_s",,,,,,,,,,
"abc_esc_xelem",,,,,,,,,,
"abc_esc_xattr",,,,,,,,,,
"abc_typeof",,,,,,,,,,,,,
"speculate_int",,,,,,,,,
"speculate_number",,,,,,
"speculate_numeric",,,,,
"speculate_string",,,,,,
"speculate_object",,,,,,
"speculate_array",,,,,,,
"speculate_bool",,,,,,,,
"ckfilter",,,,,,,,,,,,,,
"abc_add",,,,,,,,,,,,,,,
"addd",,,,,,,,,,,,,,,,,,
"concat_strings",,,,,,,,
"abc_nextname",,,,,,,,,,
"abc_nextvalue",,,,,,,,,
"lessthan",,,,,,,,,,,,,,
"lessequals",,,,,,,,,,,,
"greaterthan",,,,,,,,,,,
"greaterequals",,,,,,,,,
"abc_instanceof",,,,,,,,
"abc_istype",,,,,,,,,,,,
"abc_istypelate",,,,,,,,
"abc_astype",,,,,,,,,,,,
"abc_astypelate",,,,,,,,
"abc_in",,,,,,,,,,,,,,,,
"divd",,,,,,,,,,,,,,,,,,
"modulo",,,,,,,,,,,,,,,,
"subd",,,,,,,,,,,,,,,,,,
"muld",,,,,,,,,,,,,,,,,,
"addi",,,,,,,,,,,,,,,,,,
"subi",,,,,,,,,,,,,,,,,,
"muli",,,,,,,,,,,,,,,,,,
"ori",,,,,,,,,,,,,,,,,,,
"andi",,,,,,,,,,,,,,,,,,
"xori",,,,,,,,,,,,,,,,,,
"lshi",,,,,,,,,,,,,,,,,,
"rshi",,,,,,,,,,,,,,,,,,
"rshui",,,,,,,,,,,,,,,,,
"noti",,,,,,,,,,,,,,,,,,
"negi",,,,,,,,,,,,,,,,,,
"negd",,,,,,,,,,,,,,,,,,
"not",,,,,,,,,,,,,,,,,,,
"newactivation",,,,,,,,,
"abc_finddef",,,,,,,,,,,
"abc_findpropstrict",,,,
"abc_findpropstrictx",,,
"abc_findpropstrictns",,
"abc_findpropstrictnsx",
"abc_findproperty",,,,,,
"abc_findpropertyx",,,,,
"abc_findpropertyns",,,,
"abc_findpropertynsx",,,
"newclass",,,,,,,,,,,,,,
"newfunction",,,,,,,,,,,
"abc_getsuper",,,,,,,,,,
"abc_getsuperx",,,,,,,,,
"abc_getsuperns",,,,,,,,
"abc_getsupernsx",,,,,,,
"abc_getdescendants",,,,
"abc_getdescendantsx",,,
"abc_getdescendantsns",,
"abc_getdescendantsnsx",
"abc_callprop",,,,,,,,,,
"abc_callpropx",,,,,,,,,
"abc_callpropns",,,,,,,,
"abc_callpropnsx",,,,,,,
"abc_callproplex",,,,,,,
"abc_callproplexx",,,,,,
"abc_callproplexns",,,,,
"abc_callproplexnsx",,,,
"abc_constructprop",,,,,
"abc_constructpropx",,,,
"abc_constructpropns",,,
"abc_constructpropnsx",,
"abc_callsuper",,,,,,,,,
"abc_callsuperx",,,,,,,,
"abc_callsuperns",,,,,,,
"abc_callsupernsx",,,,,,
"callstatic",,,,,,,,,,,,
"callmethod",,,,,,,,,,,,
"callinterface",,,,,,,,,
"newcatch",,,,,,,,,,,,,,
"setslot",,,,,,,,,,,,,,,
"getslot",,,,,,,,,,,,,,,
"slottype",,,,,,,,,,,,,,
"getouterscope",,,,,,,,,
"safepoint",,,,,,,,,,,,,
"breakpoint",,,,,,,,,,,,
"setlocal",,,,,,,,,,,,,,
"newstate",,,,,,,,,,,,,,
"deopt_safepoint",,,,,,,
"deopt_finish",,,,,,,,,,
"deopt_finishcall",,,,,,
"string2atom",,,,,,,,,,,
"double2atom",,,,,,,,,,,
"int2atom",,,,,,,,,,,,,,
"uint2atom",,,,,,,,,,,,,
"scriptobject2atom",,,,,
"bool2atom",,,,,,,,,,,,,
"ns2atom",,,,,,,,,,,,,,,
"atom2bool",,,,,,,,,,,,,
"atom2double",,,,,,,,,,,
"atom2string",,,,,,,,,,,
"atom2int",,,,,,,,,,,,,,
"atom2uint",,,,,,,,,,,,,
"atom2scriptobject",,,,,
"i2d",,,,,,,,,,,,,,,,,,,
"u2d",,,,,,,,,,,,,,,,,,,
"d2i",,,,,,,,,,,,,,,,,,,
"d2u",,,,,,,,,,,,,,,,,,,
"toslot",,,,,,,,,,,,,,,,
"toprimitive",,,,,,,,,,,
"eqi",,,,,,,,,,,,,,,,,,,
"lti",,,,,,,,,,,,,,,,,,,
"lei",,,,,,,,,,,,,,,,,,,
"gti",,,,,,,,,,,,,,,,,,,
"gei",,,,,,,,,,,,,,,,,,,
"eqd",,,,,,,,,,,,,,,,,,,
"ltd",,,,,,,,,,,,,,,,,,,
"led",,,,,,,,,,,,,,,,,,,
"gtd",,,,,,,,,,,,,,,,,,,
"ged",,,,,,,,,,,,,,,,,,,
"equi",,,,,,,,,,,,,,,,,,
"ltui",,,,,,,,,,,,,,,,,,
"leui",,,,,,,,,,,,,,,,,,
"gtui",,,,,,,,,,,,,,,,,,
"geui",,,,,,,,,,,,,,,,,,
"eqb",,,,,,,,,,,,,,,,,,,
"doubletoint32",,,,,,,,,
"i2u",,,,,,,,,,,,,,,,,,,
"u2i",,,,,,,,,,,,,,,,,,,
"abc_dxnslate",,,,,,,,,,
"abc_dxns",,,,,,,,,,,,,,
"li8",,,,,,,,,,,,,,,,,,,
"li16",,,,,,,,,,,,,,,,,,
"li32",,,,,,,,,,,,,,,,,,
"lf32",,,,,,,,,,,,,,,,,,
"lf64",,,,,,,,,,,,,,,,,,
"si8",,,,,,,,,,,,,,,,,,,
"si16",,,,,,,,,,,,,,,,,,
"si32",,,,,,,,,,,,,,,,,,
"sf32",,,,,,,,,,,,,,,,,,
"sf64",,,,,,,,,,,,,,,,,,
"abc_equals",,,,,,,,,,,,
"eqp",,,,,,,,,,,,,,,,,,,
"eqs",,,,,,,,,,,,,,,,,,,
"abc_strictequals",,,,,,
"abc_setsuper",,,,,,,,,,
"abc_setsuperx",,,,,,,,,
"abc_setsuperns",,,,,,,,
"abc_setsupernsx",,,,,,,
"abc_deleteprop",,,,,,,,
"abc_deletepropx",,,,,,,
"abc_deletepropns",,,,,,
"abc_deletepropnsx",,,,,
"abc_getprop",,,,,,,,,,,
"abc_getpropx",,,,,,,,,,
"getpropertylate_u",,,,,
"getpropertylate_i",,,,,
"getpropertylate_d",,,,,
"array_get_u",,,,,,,,,,,
"array_get_i",,,,,,,,,,,
"array_get_d",,,,,,,,,,,
"vectorint_get_u",,,,,,,
"vectorint_get_i",,,,,,,
"vectorint_get_d",,,,,,,
"vectoruint_get_u",,,,,,
"vectoruint_get_i",,,,,,
"vectoruint_get_d",,,,,,
"vectordouble_get_u",,,,
"vectordouble_get_i",,,,
"vectordouble_get_d",,,,
"abc_getpropns",,,,,,,,,
"abc_getpropnsx",,,,,,,,
"abc_setprop",,,,,,,,,,,
"abc_setpropx",,,,,,,,,,
"setpropertylate_u",,,,,
"setpropertylate_i",,,,,
"setpropertylate_d",,,,,
"array_set_u",,,,,,,,,,,
"array_set_i",,,,,,,,,,,
"array_set_d",,,,,,,,,,,
"vectorint_set_u",,,,,,,
"vectorint_set_i",,,,,,,
"vectorint_set_d",,,,,,,
"vectoruint_set_u",,,,,,
"vectoruint_set_i",,,,,,
"vectoruint_set_d",,,,,,
"vectordouble_set_u",,,,
"vectordouble_set_i",,,,
"vectordouble_set_d",,,,
"abc_setpropns",,,,,,,,,
"abc_setpropnsx",,,,,,,,
"abc_initprop",,,,,,,,,,
"abc_initpropx",,,,,,,,,
"abc_initpropns",,,,,,,,
"abc_initpropnsx",,,,,,,
"abc_increment",,,,,,,,,
"abc_decrement",,,,,,,,,
"abc_increment_i",,,,,,,
"abc_decrement_i",,,,,,,
"abc_not",,,,,,,,,,,,,,,
"abc_negate",,,,,,,,,,,,
"abc_bitnot",,,,,,,,,,,,
"abc_negate_i",,,,,,,,,,
"abc_sxi1",,,,,,,,,,,,,,
"abc_sxi8",,,,,,,,,,,,,,
"abc_sxi16",,,,,,,,,,,,,
"abc_checkfilter",,,,,,,
"abc_li8",,,,,,,,,,,,,,,
"abc_li16",,,,,,,,,,,,,,
"abc_li32",,,,,,,,,,,,,,
"abc_lf32",,,,,,,,,,,,,,
"abc_lf64",,,,,,,,,,,,,,
"abc_si8",,,,,,,,,,,,,,,
"abc_si16",,,,,,,,,,,,,,
"abc_si32",,,,,,,,,,,,,,
"abc_sf32",,,,,,,,,,,,,,
"abc_sf64",,,,,,,,,,,,,,
"abc_subtract",,,,,,,,,,
"abc_multiply",,,,,,,,,,
"abc_modulo",,,,,,,,,,,,
"abc_divide",,,,,,,,,,,,
"abc_add_i",,,,,,,,,,,,,
"abc_subtract_i",,,,,,,,
"abc_multiply_i",,,,,,,,
"abc_bitor",,,,,,,,,,,,,
"abc_bitand",,,,,,,,,,,,
"abc_bitxor",,,,,,,,,,,,
"abc_lshift",,,,,,,,,,,,
"abc_rshift",,,,,,,,,,,,
"abc_urshift",,,,,,,,,,,
"add_ui",,,,,,,,,,,,,,,,
"add_nn",,,,,,,,,,,,,,,,
"add_ss",,,,,,,,,,,,,,,,
"abc_lessthan",,,,,,,,,,
"abc_greaterequals",,,,,
"abc_greaterthan",,,,,,,
"abc_lessequals",,,,,,,,
"abc_equals_ii",,,,,,,,,
"abc_equals_uu",,,,,,,,,
"abc_equals_bb",,,,,,,,,
"abc_equals_nn",,,,,,,,,
"abc_equals_pp",,,,,,,,,
"abc_equals_ss",,,,,,,,,
"abc_getslot",,,,,,,,,,,
"abc_getprop_slot",,,,,,
"getpropx_u",,,,,,,,,,,,
"getpropx_i",,,,,,,,,,,,
"getpropx_d",,,,,,,,,,,,
"getpropx_au",,,,,,,,,,,
"getpropx_ai",,,,,,,,,,,
"getpropx_ad",,,,,,,,,,,
"getpropx_viu",,,,,,,,,,
"getpropx_vii",,,,,,,,,,
"getpropx_vid",,,,,,,,,,
"getpropx_vuu",,,,,,,,,,
"getpropx_vui",,,,,,,,,,
"getpropx_vud",,,,,,,,,,
"getpropx_vdu",,,,,,,,,,
"getpropx_vdi",,,,,,,,,,
"getpropx_vdd",,,,,,,,,,
"abc_setprop_slot",,,,,,
"setpropx_u",,,,,,,,,,,,
"setpropx_i",,,,,,,,,,,,
"setpropx_d",,,,,,,,,,,,
"setpropx_au",,,,,,,,,,,
"setpropx_ai",,,,,,,,,,,
"setpropx_ad",,,,,,,,,,,
"setpropx_viu",,,,,,,,,,
"setpropx_vii",,,,,,,,,,
"setpropx_vid",,,,,,,,,,
"setpropx_vuu",,,,,,,,,,
"setpropx_vui",,,,,,,,,,
"setpropx_vud",,,,,,,,,,
"setpropx_vdu",,,,,,,,,,
"setpropx_vdi",,,,,,,,,,
"setpropx_vdd",,,,,,,,,,
"abc_setslot",,,,,,,,,,,
"findprop2finddef",,,,,,
"findprop2getouter",,,,,
"callprop_string",,,,,,,
"coerce_any",,,,,,,,,,,,
"coerce_object",,,,,,,,,
"coerce_number",,,,,,,,,
"coerce_int",,,,,,,,,,,,
"coerce_uint",,,,,,,,,,,
"coerce_boolean",,,,,,,,
"coerce_string",,,,,,,,,
"coerce_ns",,,,,,,,,,,,,
"inttouint",,,,,,,,,,,,,
"uinttoint",,,,,,,,,,,,,
"numbertoint",,,,,,,,,,,
"numbertouint",,,,,,,,,,
"abc_modulo_and"],;
def,set_var(,skip_list,):
return,"DEBUG_STUB_LIST=",+,skip_list,+,"\\,;,"
#print,instr_names
xx=[,"setslot",,"atom2scriptobject",,"getslot",,"cknullobject",,"loadenv",,,"callmethod",,"return","getouterscope"]
import,os
avm_cmd,=,,",../objdir/shell/avmshell,-Dnodebugger,./fdc.abc,"
skip_list,=,''
for,name,in,instr_names:
skip_list,+=,"\\,;",+,name
#print,"set_var=",,set_var
#rc,=,os.system("env,",+,set_var,+,",printenv,DEBUG_STUB_LIST")
cmd,=,"env,INLINE=1,MODE=4,%s,%s",%,(,set_var(skip_list),,,avm_cmd)
rc,=,os.system(cmd)
print,"rc=",,rc
if,rc,!=,0,:
print,"FAILED:,",,cmd
else:
print,"worked:,",,cmd
print,"last,stub,added,was",,name
break
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,gdb
import,itertools
import,re
#,just,a,preliminary,hack,at,this,problem.,It,appears,to,be,busted.,I'm,not,sure,if,my,code,is,broken
#,or,if,gdb/python,is,not,looking,into,our,instructions,correctly.,(matz)
def,ownerId(,defval,),:
"return,the,id,of,the,owner,of,defval,,as,a,string"
#should,assert,that,val.type,is,Use,or,Def
#maybe,mask,the,type_,field,and,prefix,the,id,with,"c",if,it's,a,control,type,of,"n",otherwise.
try:
o,=,defval['owner_']
id,=,o['id']
return,str(id)
except:
return,'id,threw'
def,typeName(,defval,),:
"return,the,name,of,the,type,of,a,Def,,as,a,string"
t,,=,defval['type_']
n,=,,t['name']
return,str(n)
class,DefPrinter:
"Print,the,id,of,the,defining,instruction,as,a,string"
def,__init__(self,,val):
self.val,=,val
def,to_string(self):
try:
return,'Def:,%s,owner_,id=%s,type_=%s',%(,str(self.val.type),,ownerId(self.val),,typeName(self.val),)
except:
return,'DefPrinter.to_string,threw'
def,display_hint,(self):
return,'string'
class,UsePrinter:
"Print,the,id,of,the,defining,instruction,as,a,string"
def,__init__(self,,val):
self.val,=,val
def,to_string(self):
try:
return,'Use:,%s,owner_,id=%s',%(,,str(self.val.type),,ownerId(self.val))
except:
return,'UsePrinter.to_string,threw'
def,display_hint,(self):
return,'string'
class,TypePrinter:
"Print,the,name,of,the,type"
def,__init__(self,,val):
self.val,=,val
def,to_string(self):
try:
n,=,self.val['name']
return,'Type:,%s',%(,n,)
except:
return,'TypePrinter.to_string,threw'
def,display_hint,(self):
return,'string'
class,StmtInfoPrinter:
"Print,a,halfmoon,statement"
def,__init__(self,,val):
self.val,=,val
def,to_string(self):
#,Make,sure,&string,works,,too.
ptr,=,self.val,['kind_']
return,ptr.string,#(length,=,len)
def,display_hint,(self):
return,'string'
#,(gdb),print/r,*info
#,$4,=,{<halfmoon::StmtInfo<halfmoon::BinaryStmt>>,=,{<halfmoon::InstrInfo>,=,{_vptr.InstrInfo,=,0x838b688,,kind_,=,halfmoon::HR_newfunction,,num_ctrl,=,1,,
#,,,,,,,num_args,=,2,,num_defs,=,2,,ctrl_off,=,16,,args_off,=,32,,defs_off,=,64},,<No,data,fields>},,<No,data,fields>}
#,(gdb),print/r,*s
#,$3,=,{<halfmoon::Instr>,=,{info,=,0xb7c533b8,,id,=,-1,,next_,=,0x0,,prev_,=,0x0},,ctrl,=,{{def_,=,0xb7c53054,,next_,=,0xb7c53438,,prev_,=,0xb7c53438,,
#,,,,,,,owner_,=,0xb7c53428}},,args,=,{{def_,=,0xb7c53358,,next_,=,0xb7c53448,,prev_,=,0xb7c53448,,owner_,=,0xb7c53428},,{def_,=,0xb7c53170,,
#,,,,,,,next_,=,0xb7c53458,,prev_,=,0xb7c53458,,owner_,=,0xb7c53428}},,values,=,{{owner_,=,0xb7c53428,,type_,=,0x0,,uses_,=,0x0},,{owner_,=,0xb7c53428,,
#,,,,,,,type_,=,0x0,,uses_,=,0x0}}}
#,(gdb),
class,InstrPrinter:
"Print,a,halfmoon,instruction,of,some,kind"
def,__init__(self,,val):
self.val,=,val
self.NAME="InstrPrinter"
def,dbg(self,str):
print,self.NAME,,"self.val[",,str,,"]=",,self.val[str]
def,to_string(self):
ia,=,gdb.parse_and_eval('halfmoon::instr_attrs')
name,=,'bogus'
try:
info,=,self.val['info']
kind,=,info['kind_']
#,this,thing,gets,value,like,0xdeadbeef,"string"
#,we,just,want,the,thing,in,quotes,(split,on,",and,take,element1)
namexx,=,str(ia[kind]['name'])
name,=,namexx.split('"')[1]
return,'%s:,%s,(id=%s)',%,(str(self.val.type),,name.upper(),,self.val['id'])
except:
return,'oops,,InstrPrinter.to_string,threw'
def,display_hint,(self):
return,'string'
#
#,this,method,is,broken.,(or,perhaps,gdb/python,is)
#,it,seems,to,always,print,the,same,oid,for,every,Def,and,use.
#,I,dunno,why.
#
class,BinaryStmtPrinter:
"Print,a,BinaryStmt,halfmoon,instruction"
def,__init__(self,,val):
self.val,=,val
def,dbg(self,str):
print,"hello,from,dbg",,str
def,oid(self,,usedef),:
i,=,usedef['owner_'],#,the,instruction,defining,
oid,=,i['id'],,,,,,,,#,its,id
return,str(oid)
def,to_string(self):
info,=,self.val['info']
opcode,=,str(info['kind_'],)
buf,=,opcode,+,","
values,=,self.val['values']
buf,+=,'c',+,ownerId(values[0]),+,',,'
buf,+=,'n',+,ownerId(values[1]),+,',=,'
args,=,self.val['args']
buf,+=,'n',+,ownerId(args[0]['def_']),+,',,'
buf,+=,'n',+,ownerId(args[1]['def_']),+,',,'
ctrl,=,self.val['ctrl']
buf,+=,'c',+,ownerId(ctrl[0]['def_']),
return,buf
def,display_hint,(self):
return,'string'
def,register_halfmoon_printers,(obj):
"Register,halfmoon,pretty-printers,with,objfile,Obj."
#print,"hello,from,register_halfmoon_printers"
if,obj,==,None:
obj,=,gdb
obj.pretty_printers.append,(lookup_function)
#left,from,std:
class,StdPointerPrinter:
"Print,a,smart,pointer,of,some,kind"
def,__init__,(self,,typename,,val):
self.typename,=,typename
self.val,=,val
def,to_string,(self):
if,self.val['_M_refcount']['_M_pi'],==,0:
return,'%s,(empty),%s',%,(self.typename,,self.val['_M_ptr'])
return,'%s,(count,%d),%s',%,(self.typename,
self.val['_M_refcount']['_M_pi']['_M_use_count'],
self.val['_M_ptr'])
def,lookup_function,(val):
"Look-up,and,return,a,pretty-printer,that,can,print,val."
#,Get,the,type.
#,,"\"",,gdb.TYPE_CODE_REF,,type.code
type,=,val.type
#print,"lookup_function:",val.type
#,If,it,points,to,a,reference,,get,the,reference.
if,type.code,==,gdb.TYPE_CODE_REF:
#print,"lookup_function:,is,gdb.TYPE_CODE_REF:"
type,=,type.target,()
#,Get,the,unqualified,type,,stripped,of,typedefs.
type,=,type.unqualified,().strip_typedefs,()
#,Get,the,type,name.,,,,
typename,=,type.tag
#print,'typename=',typename
if,typename,==,None:
#yeah,but,pointers,don't,seem,to,answer,for,tag,(matz)
if,type.code,==,gdb.TYPE_CODE_PTR,:
#print,'is,,gdb.TYPE_CODE_PTR',,'str(type)',str(type)
#if,doesn't,end,with,*,chicken,out..
if,not,re.compile("\\*$").search(str(type)),:
print,"type,name,doesn't,end,with,*,,so,chicken,out"
return,None
#otherwise,just,pass,the,name,of,the,type,on.,(lookout,below)
typename,=,str(type)
#print,'typename=',typename
else:
return,None,#if,no,tag,and,not,a,pointer,,chicken,out.
#,Iterate,over,local,dictionary,of,types,to,determine
#,if,a,printer,is,registered,for,that,type.,,Return,an
#,instantiation,of,the,printer,if,found.
for,function,in,pretty_printers_dict:
if,function.search,(typename):
#print,"have,pretty,printer,for",,typename
return,pretty_printers_dict[function],(val)
#,Cannot,find,a,pretty,printer.,,Return,None.
#,TODO:,figure,out,how,to,go,up,the,type,hierarchy,to,find,a,pretty,printer,for,a,base,class,if,we,cant,find,it,for,the,actual,instance.
return,None
def,build_halfmoon_dictionary,():
pretty_printers_dict[re.compile('^halfmoon::Use,\*')],=,lambda,val:,UsePrinter(val)
pretty_printers_dict[re.compile('^halfmoon::Def,\*')],=,lambda,val:,DefPrinter(val)
pretty_printers_dict[re.compile('^halfmoon::Type,\*')],=,lambda,val:,TypePrinter(val)
pretty_printers_dict[re.compile('^const,halfmoon::Type,\*')],=,lambda,val:,TypePrinter(val)
pretty_printers_dict[re.compile('^halfmoon::Def$')],=,lambda,val:,DefPrinter(val)
pretty_printers_dict[re.compile('^halfmoon::Use$')],=,lambda,val:,UsePrinter(val)
pretty_printers_dict[re.compile('^halfmoon::Instr,\*')],=,lambda,val:,InstrPrinter(val)
pretty_printers_dict[re.compile('^halfmoon::\\S*Instr,\*')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::StmtInfo<.*>$')],=,lambda,val:,StmtInfoPrinter(val)
#before,we,write,specialized,versions..
pretty_printers_dict[re.compile('^halfmoon::BinaryStmt')],=,lambda,val:,BinaryStmtPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::BlockInstr$')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::JumpInstr$')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::PhiInstr$')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::BinaryStmt$')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::BinaryInstr$')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::Instr$')],=,lambda,val:,InstrPrinter(val)
#,print,'^halfmoon::Instr\\s*\\*$'
#,pretty_printers_dict[re.compile('^halfmoon::\\S*Instr\\s*\\*\\s*$')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^const\\s*halfmoon::\\S*Instr\\s*\\*\\s*$')],=,lambda,val:,InstrPrinter(val)
#,pretty_printers_dict[re.compile('^halfmoon::\\S*Instr\\s*\\*\\s*$')],=,lambda,val:,InstrPrinter(val)
#would,be,useful,to,have,pretty,printer,for,Instr*,(eclipse,details,in,expression,and,variable,windows)
#pretty_printers_dict[re.compile('^halfmoon::Instr\,\*$')],=,lambda,val:,InstrPrinter(val)
#
#,this,gets,called,when,package,is,first,loaded,at,.gbdinit,time,(matz)
#
pretty_printers_dict,=,{}
#print,"about,to,call,build_halfmoon_dictionary"
build_halfmoon_dictionary,()
#!/usr/bin/env,python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,copy
import,re
verbose,=,False
def,verbose_print(*args):
if,verbose:
print,args
def,read_buildfile(filename):
f,=,open(filename,,'r')
try:
builds,=,[]
options,=,[]
option_dependencies,=,[]
combined,=,[]
list,=,None
for,l,in,f.readlines():
l,=,l.strip()
verbose_print('line:,',,l)
if,len(l),==,0,or,l[0],==,'#':
verbose_print('continuing')
continue
elif,l,==,'[builds]':
list,=,builds
elif,l,==,'[options]':
list,=,options
elif,l,==,'[option_dependencies]':
list,=,option_dependencies
elif,l,==,'[combined]':
list,=,combined
else:
if,l,==,'-':
l,=,''
#l=re.sub('{shell_release}',avmr,l)
#verbose_print(l)
#l=re.sub('{shell_release_debugger}',avmrd,l)
#verbose_print(l)
list.append(l)
verbose_print(list)
return,builds,,options,,option_dependencies,,combined
finally:
f.close()
#,make_vmlist:,combine,all,the,option,choices,with,all,the,build,choices
#,,,,and,return,a,list,of,len(builds),*,len(options),command,lines.
def,make_vmlist(buildfile):
builds,,options,,option_dependencies,,combined,=,read_buildfile(buildfile)
#,,,,missing,=,[p,for,p,in,builds,if,not,exists(p)]
#,,,,if,len(missing),>,0:
#,,,,,,,,for,p,in,missing:
#,,,,,,,,,,,,sys.stderr.write("no,such,file:,%s\n",%,p)
#,,,,,,,,exit(1)
vms,=,[]
for,build,in,builds:
for,o,in,options:
vms.append('%s,%s',%,(build,,o))
vms,=,vms,+,combined
verbose_print('created,%d,configurations',%,len(vms))
for,v,in,vms:
verbose_print(v)
return,vms
def,remove_conflicting_optrecs(controller,,optrecs,,optdeps):
my_list,=,copy.deepcopy(optrecs)
if,len(my_list),==,0,or,len(optdeps),==,0:
return,my_list
for,optrec,in,my_list:
for,optdep,in,optdeps:
if,optdep[0],==,controller,and,optrec[0],==,optdep[1][0]:
verbose_print('optdep:,',,optdep,,',controller:,',,controller)
verbose_print('Before:,optrec[2]:,',,optrec[2],,',optdep[1][1]:,',,optdep[1][1])
optrec[2],=,(optdep[1][1],)
verbose_print('After:,optrec[2]:,',,optrec[2])
return,my_list
def,genruns(runs,,optrecs,,optdeps,,pre_strings,,post_strings):
if,len(optrecs),==,0:
verbose_print('End,recursion')
verbose_print('Adding,run:,',,pre_strings,,post_strings)
runs.append([list(pre_strings),,list(post_strings)])
return
current_optrec,=,optrecs[0]
verbose_print('current_optrec:,',,current_optrec)
if,current_optrec[1],==,'Command':
post_strings.append(current_optrec[0])
optrec_subset,=,remove_conflicting_optrecs((optrecs[0][0],,1),,optrecs[1:],,optdeps)
verbose_print('Recurse')
genruns(runs,,optrec_subset,,optdeps,,pre_strings,,post_strings)
post_strings.pop()
elif,current_optrec[1],==,'Boolean',or,current_optrec[1],==,'Integer':
for,val,in,current_optrec[2]:
pre_strings.append(current_optrec[0],+,'=',+,str(val))
verbose_print('Remaining,optrecs,before,removal:,',,optrecs[1:])
optrec_subset,=,remove_conflicting_optrecs((optrecs[0][0],,val),,optrecs[1:],,optdeps)
verbose_print('Remaining,optrecs,after,removal:,',,optrec_subset)
verbose_print('Recurse')
genruns(runs,,optrec_subset,,optdeps,,pre_strings,,post_strings)
pre_strings.pop()
def,genperm(buildfile):
avmr='../objdir-release/shell/avmshell.exe'
avmrd='../objdir-releasedebugger/shell/avmshell.exe'
make_vmlist('avmdiff2.cfg')
builds,,options,,option_dependencies,,combined,=,read_buildfile('avmdiff2.cfg')
verbose_print('Options:,')
optrecs,=,[]
for,opt,in,options:
verbose_print(opt)
optrecs.append(eval(opt))
optdict,=,dict([(optrec[0],,optrec),for,optrec,in,optrecs]),
verbose_print(optdict)
for,key,in,optdict:
verbose_print(key)
value,=,optdict[key]
verbose_print(value)
#,read,dependencies
optdeps,=,[]
for,optdep,in,option_dependencies:
optdeps.append(eval(optdep))
verbose_print(optdeps)
#,Build,list,of,configurations
runs,=,[]
pre_strings,=,[]
post_strings,=,[]
genruns(runs,,optrecs,,optdeps,,pre_strings,,post_strings)
verbose_print(runs)
verbose_print(len(runs))
return,runs
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,c-basic-offset:,4,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys
import,os
import,string
import,subprocess
import,time
def,usage():
print,'Usage:,testabc.py,avmshell,suiteDirectory'
def,runAvm(shellExec,,abcfile,,options):
shellExec,+=,",-Dnodebugger,-Dtimeout"
for,k,in,options:
os.putenv(k,,options[k])
avmshellCommand,=,os.path.abspath(shellExec),+,",",+,abcfile
avmshellProcess,=,os.popen(avmshellCommand)
return,avmshellProcess.read()
halfmoon_env,=,{,'MODE':'4',,'PROFILER':'1',}
baseline_env,=,{,'MODE':'0',}
def,scrub(s):
return,s.strip(string.whitespace)
def,checkResults(baselineResult,,halfmoonResult,,shortname):
if,(scrub(baselineResult),!=,scrub(halfmoonResult)):
print,"Halfmoon,does,not,equal,CodegenLIR,for",,shortname
print,"Shell:",,baselineResult
print,"Halfmoon:",,halfmoonResult
return,False
return,True
def,runTest(abcfile,,shortname):
baselineResult,=,runAvm(shellExec,,abcfile,,baseline_env)
halfmoonResult,=,runAvm(shellExec,,abcfile,,halfmoon_env)
checkResults(baselineResult,,halfmoonResult,,abcfile)
def,findTest(arg,,dirname,,files):
print,dirname
for,test,in,files:
testLocation,=,os.path.abspath(dirname,+,"/",+,test)
if,os.path.isfile(testLocation),and,testLocation.endswith('.abc'):
runTest(testLocation,,test)
numberOfArgs,=,len(sys.argv)
if,(numberOfArgs,!=,3):
usage()
exit(0)
shellExec,=,sys.argv[1]
testdir,=,sys.argv[2]
os.path.walk(testdir,,findTest,,"")
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,c-basic-offset:,4,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys
import,os
import,string
import,subprocess
import,time
import,genperm
#,
#,Download,from,http://www.parallelpython.com/downloads/pp/pp-1.6.1.zip
#
#,Then,run:
#
#,python,setup.py,build
#,python,setup.py,install
#
#,Add,the,pp-1.6.1,directory,to,your,PYTHONPATH,environment,variable
import,pp
def,usage():
print,'Usage:,testabc.py,avmshell,suiteDirectory,numCPUs'
def,runAvm(shellExec,,abcfile,,options):
shellExec,+=,",-Dnodebugger"
for,k,in,options:
os.putenv(k,,options[k])
avmshellCommand,=,os.path.abspath(shellExec),+,",",+,abcfile
avmshellProcess,=,os.popen(avmshellCommand)
return,avmshellProcess.read()
halfmoon_env,=,{,'MODE':'4',}
halfmoon_interp_env,=,{,'MODE':'2',}
baseline_env,=,{,'MODE':'0',}
jobs,=,[]
def,scrub(s):
return,s.strip(string.whitespace)
def,checkResults(baselineResult,,baseline_env,,halfmoonResult,,halfmoon_env,,shortname):
if,(scrub(baselineResult),!=,scrub(halfmoonResult)):
print,,"Halfmoon,does,not,equal,baseline,for",+,shortname
print,"Shell:",,baselineResult
print,"Shell,options:,",,baseline_env
print,"Halfmoon:",,halfmoonResult
print,"Halfmoon,options:,",,halfmoon_env
return,False
return,True
def,runTest(shellExec,,baseline_env,,halfmoon_env,,abcfile,,shortname):
baselineResult,=,runAvm(shellExec,,abcfile,,baseline_env)
halfmoonResult,=,runAvm(shellExec,,abcfile,,halfmoon_env)
checkResults(baselineResult,,baseline_env,,halfmoonResult,,halfmoon_env,,abcfile)
def,findTest(job_server,,dirname,,files):
print,dirname
for,test,in,files:
testLocation,=,dirname,+,"/",+,test
if,os.path.isfile(testLocation),and,testLocation.endswith('.abc'):
for,run,in,runs:
halfmoon_vars,=,'{'
for,env_var,in,run[0]:
name,,val,=,env_var.split('=')
halfmoon_vars,+=,"'"
halfmoon_vars,+=,name
halfmoon_vars,+=,"',:,'"
halfmoon_vars,+=,val
halfmoon_vars,+=,"'"
halfmoon_vars,+=,","
halfmoon_vars,+=,'}'
halfmoon_env,=,eval(halfmoon_vars)
jobs.append(job_server.submit(runTest,,(shellExec,,baseline_env,,halfmoon_env,,testLocation,,test),,(runAvm,),,globals=globals()))
numberOfArgs,=,len(sys.argv)
if,(numberOfArgs,<,3):
usage()
exit(0)
shellExec,=,sys.argv[1]
testdir,=,sys.argv[2]
print,"numberOfArgs:,",+,str(numberOfArgs)
print,"sys.argv[1]:,",+,sys.argv[1],
print,"sys.argv[2]:,",+,sys.argv[2],
if,(numberOfArgs,>=,4):
print,"sys.argv[3]:,",+,sys.argv[3],
ncpus,=,int(sys.argv[3])
else:
ncpus,=,2
shellExec,+=,',-Dnodebugger,'
runs,=,genperm.genperm('avmdiff2.cfg')
job_server,=,pp.Server()
job_server.set_ncpus(ncpus)
print,"Starting,",,job_server.get_ncpus(),,",workers"
os.path.walk(testdir,,findTest,,job_server)
job_server.wait()
for,job,in,jobs:
job()
job_server.print_stats()
#!/usr/bin/env,python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys
import,os
import,string
import,subprocess
import,time
import,glob
import,re
iterations,=,1
resultsFile,=,"benchmarkResults.csv"
nanojitResults,=,{}
halfmoonResults=,{}
def,usage():
print("Usage")
print("timeTestSuite.py,avmshell,asc.jar,builtinAbc,testFile")
print
def,runSomething(shellExec,,testFile,,vmArgs):
total,=,0
avmshellCommand,=,os.path.abspath(shellExec),
callArgs,=,[avmshellCommand,,"-Dnodebugger",,testFile]
for,i,in,range(0,,iterations):
start,=,time.time(),
avmshellProcess,=,subprocess.call(callArgs)
end,=,time.time()
total,+=,end,-,start
average,=,total,/,iterations
return,average
def,runShell(shellExec,,testFile,,vmArgs):
os.putenv("MODE",,"0")
return,runSomething(shellExec,,testFile,,vmArgs)
def,runHalfmoon(shellExec,,testFile,,vmArgs):
os.putenv("MODE",,"4")
return,runSomething(shellExec,,testFile,,vmArgs)
def,compileAbc(ascJarFile,,builtinAbc,,testFile):
ascJarFile,=,os.path.abspath(ascJarFile)
builtinAbc,=,os.path.abspath(builtinAbc)
ascCommand,=,"java,-jar,",+,ascJarFile,+,",-import,",+,builtinAbc,+,",",+,testFile
compileToAbcProcess,=,os.popen(ascCommand)
compiledFileName,=,testFile.replace(".as",,".abc")
return,compiledFileName
def,writeResultsToFile(testFile):
print("looking,at,file:,",+,testFile)
avmshellResult,=,nanojitResults[testFile]
halfmoonResult,=,halfmoonResults[testFile]
halfmoonComparison,=,str(avmshellResult,/,halfmoonResult),
if,(re.search('\\\\untyped\\\\',,testFile)):
typedFileName,=,re.sub('\\\\untyped\\\\',,'\\\\typed\\\\',,testFile)
csvFile.write(testFile,+,",",+,str(avmshellResult),+,",",+,str(halfmoonResult),+,",",+,str(halfmoonComparison),+,"\n")
def,runTest(shellExec,,ascJarFile,,builtinAbc,,testFile):
print("Running,test:,",+,testFile),;
compiledFileName,=,compileAbc(ascJarFile,,builtinAbc,,testFile)
#,Note,,last,arg,is,vmargs,eg,-Dverbose=.,atm,unsupported
shellResult,=,runShell(shellExec,,compiledFileName,,"")
halfmoonResult,=,runHalfmoon(shellExec,,compiledFileName,,"")
nanojitResults[testFile],=,shellResult
halfmoonResults[testFile],=,halfmoonResult
def,writeFileHeader(openedFile):
openedFile.write("Benchmark,,NanoJIT,,Halfmoon,,Difference\n")
numberOfArgs,=,len(sys.argv)
if,(numberOfArgs,!=,5):
usage()
exit(0)
csvFile,=,None,
if,(os.path.exists(resultsFile)):
csvFile,=,open(resultsFile,,"a")
else:
csvFile,=,open(resultsFile,,"w")
writeFileHeader(csvFile)
def,runSuite(shellExec,,ascJarFile,,builtinAbc,,testDirectory):
for,file,in,os.listdir(testDirectory):
fullPath,=,os.path.normpath(os.path.join(testDirectory,,file))
if,(os.path.isdir(fullPath)):
runSuite(shellExec,,ascJarFile,,builtinAbc,,fullPath)
elif,(re.search('\.as',,fullPath)):
runTest(shellExec,,ascJarFile,,builtinAbc,,fullPath)
def,writeResults(testDirectory):
for,file,in,os.listdir(testDirectory):
fullPath,=,os.path.normpath(os.path.join(testDirectory,,file))
if,(os.path.isdir(fullPath)):
writeResults(fullPath)
#,don't,want,.abc,files
elif,(re.search('\.as$',,fullPath)):
writeResultsToFile(fullPath)
runSuite(sys.argv[1],,sys.argv[2],,sys.argv[3],,sys.argv[4])
writeResults(sys.argv[4])
csvFile.close()
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:,(add,to,~/.vimrc:,set,modeline,modelines=5)
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#
#,display,the,heap,map,or,not,,set,this,to,true,to,get,the,mpa,of,used/unused/reserved,pages
displayHeap,=,False,;
#,number,of,types,to,print,in,each,namespace
kNumTypes,=,10,;
#,number,of,traces,to,print,for,each,type
kNumTracesPerType,=,5,;
#,known,namespace,names,-,the,mapfile,apparently,does,not,differentiate,between
#,class,names,and,namespaces,names,in,any,way,,avmplus::MyFunc,and,MyClass::MyFunc,
#,are,mangled,the,same,way.
ns_names,=,["avmplus",,"MMgc",,"nanojit"],;
def,usage():
	print,"Usage:,python,winmo-stacktraces.py,<mapfile>,<stacktrace,file>",;
#,calculate,the,offset,to,get,relative,address,from,the,absolute,addresses,in,the,trace,file
def,calcoffset(abs_addr,,rel_addr):
	diff,=,(abs_addr,-,rel_addr)/0x10000,;
	diff,*=,0x10000,;
	return,diff,;
	
#,special,names,-,list,of,names,we,will,encounter,in,a,MSVC++,generate,map,file.,,These
#,are,always,preceded,by,?,and,mean,special,things,,i.e.
#,?_U,==,operator,new,[]
special_names=,{}
special_names["0"],=,"ctor",;
special_names["1"],=,"dtor",;
special_names["2"],=,"operator,new",;
special_names["3"],=,"operator,delete",;
special_names["4"],=,"operator->",;
special_names["5"],=,"operator*",;
special_names["6"],=,"operator&",;
special_names["7"],=,"operator->*",;
special_names["_U"],=,"operator,new[]",;
special_names["_V"],=,"operator,delete[]",;
def,demangleName(str):
	end_index,=,str.find("@@"),;,#,don't,care,about,function,args
	name,=,str[0:end_index],;
	start_index,=,0,;
	spec_name,=,"",;
	while,name[start_index],==,"?":
		start_index,+=,1,;
		char,=,name[start_index],;
		if,char,==,"?":
			continue,;
		elif,char,==,"_":
			start_index,+=,1,;
			char,+=,name[start_index],;
			
		if,special_names.has_key(char):
			spec_name,=,special_names[char],;
			start_index,+=,1,;
	
	name,=,name[start_index:len(name)],;
	
	splits,=,name.split("@"),;
	i,=,0,;
	if,spec_name,!=,"":
		func_part,=,spec_name,;
	else:
		func_part,=,splits[0],;
		i,+=,1,;
		
	l,=,len(splits),;
	
	class_part,=,"",;
	ns_part,=,"",;
	while,i,<,l:
		part,=,splits[i],;
		if,i,==,l-1,and,part,in,ns_names:
			ns_part,=,part,;
		elif,class_part,!=,"":
			class_part,+=,"::"+part,;
		else:
			class_part,=,part,;
		i,+=1,;
	if,ns_part,=="":
		ns_part,=,"global",;
		
	return,dict(func=func_part,,clss=class_part,,namespace=ns_part),;
	
#,returns,a,dictionary,representing,the,named,map,file:
#,{
#,,,offset,-,the,offest,to,translate,absolute,addresses,into,relative,addresses
#,,,addrs,-,an,ordered,list,of,[addr,,name,,object,file].,,One,for,each,entyr,in,the,map,file
#,}
def,readMapFile(filename,,refaddr):
	mapfile,=,open(filename,,"r"),;
	ln,=,mapfile.readline(),;
	while,ln.startswith(",,Address"),==,False:
		ln,=,mapfile.readline(),;
	
	addrs,=,[],;
	
	refname,=,refaddr["name"],;
	while,ln,!=,"":
		ln,=,mapfile.readline(),;
		splits,=,ln.split(),;
		if,len(splits),>,3,and,splits[0].startswith("00"):
			name,=,demangleName(splits[1]),;
			if,name["func"].startswith(refname):
				offset,=,calcoffset(refaddr["addr"],,int(splits[2],,16)),;
				
			addrs.append([int(splits[2],,16),,name,,splits[(len(splits)-1)],]),;
	return,dict(offset=offset,,addrs=addrs),;
#,returns,a,dictionary:
#,{
#,,,header,-,any,data,before,the,stack,traces
#	refaddr,-,name,&,address,of,a,reference,symbol,-,used,to,calculate,relative,addresses
#,,,traces[],-,list,of,stack,traces
#,}
def,readStackFile(stackFileName):
	stackfile,=,open(stackFileName,,"r"),;
	ln,=,stackfile.readline(),;
	splits,=,ln.split(),;
	
	stacks,=,{},;
	stacks["header"],=,[],;
	stacks["traces"],=,[],;
	save_header,=,True,;
	while,len(splits),!=,6,or,(splits[1],!=,"b",and,splits[4],!=,"items"),:
		
		if,ln.startswith("ReferenceAddress"):
			refaddr,=,{},;
			refaddr["name"],=,splits[1],;
			refaddr["addr"],=,int(splits[2],,16),;
			stacks["refaddr"],=,refaddr,;
		elif,save_header:	
			stacks["header"].append(ln.strip()),;
		if,displayHeap,==,False,and,ln.find("gross,stats,end"),!=,-1:
			save_header,=,False,;
		ln,=,stackfile.readline(),;
		splits,=,ln.split(),;
		
	trace_count,=,0,;
	while,ln,!=,"":
		if,len(splits),==,6,and,splits[1],==,"b",and,splits[4],==,"items":
			stack,=,{},;
			stack["size"],=,int(splits[0]),;
			stack["items"],=,int(splits[3]),;
			
			trace,=,[],;
			ln,=,stackfile.readline(),;
			#skip,any,garbage,before,we,get,to,the,stacks
			while,ln.startswith("0x"),==,False:
				ln,=,stackfile.readline(),;
			while,ln.startswith("0x"),==,True:
				trace.append(int(ln,,16)),;
				ln,=,stackfile.readline(),;
				
			stack["trace"],=,trace,;
			stacks["traces"].append(stack),;
			trace_count+=1,;
		ln,=,stackfile.readline(),;
		splits,=,ln.split(),;
	return,stacks,;
	
addr_table,=,{},;
def,findAddr(map,,addr):
	
	if,addr,in,addr_table:
		return,addr_table[addr],;
	
	offset,=,map["offset"],;
	addr_list,=,map["addrs"],;
	
	rel_addr,=,addr,-,offset,;
	if,rel_addr,<,0:
		addr_table[addr],=,[addr,,dict(func=str(hex(addr)),,clss="",,namespace=""),,addr]
		return,addr_table[addr],;
		
	low,=,0,;
	hi,=,len(addr_list)-1,;
	index,=,-1,;
	while,low,<=,hi,and,index,==,-1:
		pivot,=,(low+hi)/2,;
		#,addr_list,should,contain,[addr,,function,name,,object,file]
		#,as,assembled,above,in,readMapFile
		test_addr,=,addr_list[pivot][0],;
		if,rel_addr,<,test_addr:
			hi,=,pivot,;
		elif,rel_addr,>,test_addr:
			if,addr_list[pivot+1][0],>,rel_addr:
				index,=,pivot,;
			low,=,pivot,;
		else:
			index,=,pivot,;
	
	if,index,!=,-1:
		addr_table[addr],=,addr_list[index],;
	return,addr_table[addr],;
	
def,translateTraces(traces,,addrs):
	for,t,in,traces:
		trace,=,t["trace"],;
		new_trace,=,[],;
		for,item,in,trace:
			addrinfo,=,findAddr(addrs,,item),;
			if,str(addrinfo[1]["func"]).startswith(("Alloc",,"GetStackTrace",,"LargeAlloc",,"Calloc",,"operator,new",,"RecordAlloc")),==,False:
				new_trace.append(addrinfo[1]),;
		t["trace"],=,new_trace,;
	#,dont,need,to,keep,this,around
	addr_table,=,{},;
	
def,cmpBySize(a,,b):
	a_size,=,a["size"],;
	b_size,=,b["size"],;
	return,b_size-a_size,;
	
#,sort,the,traces
#,Sorts,the,traces,into,their,different,namespaces,,and,sorts,them,in,descending,order,in,each,namespace.
#,the,namespaces,are,also,sorted,in,descending,order,based,on,the,total,of,all,allocations,in,that,namespace
#,sorted,trace:
#,[namespace1,,namespace2,,...,namespaceN]
#,Each,namespace,entry,is,a,dictionary:
#,{
#	name,-,namespace,name
#,,,size,-,bytes,alloc'ed
#,,,count,-,number,of,items
#,,,traces[],-,sorted,list,of,traces
#,}
def,sortTraces(traces):
	namespaces,=,{},;
	for,t,in,traces:
		stack,=,t["trace"],;
		size,=,t["size"],;
		count,=,t["items"],;
		
		ns,=,stack[0]["namespace"],;
		name,=,stack[0]["clss"],+,"::",+,stack[0]["func"],+,"()",;
		
		if,namespaces.has_key(ns),==,False:
			namespaces[ns],=,dict(name=ns,,size=0,,count=0,,traces={}),;
			
		ns_entry,=,namespaces[ns],;
		ns_entry["size"],+=,size,;
		ns_entry["count"],+=,count,;
		ns_traces,=,ns_entry["traces"],;
		if,ns_traces.has_key(name),==,False:
			ns_traces[name],=,dict(name=name,,size=0,,count=0,,traces=[]),;
		ns_trace,=,ns_traces[name],;
		ns_trace["size"],+=,size,;
		ns_trace["count"],+=,count,;
		ns_trace["traces"].append(t),;
		
	ns_list,=,[],;
	
	for,k,v,in,namespaces.items():
		ns_list.append(v),;
	
	#,sort,the,namespaces,by,size
	ns_list.sort(cmpBySize),;
	
	for,ns,in,ns_list:
		traces,=,ns["traces"],;
		traces_list,=,[],;
		for,k,v,in,traces.items():
			#,sort,the,traces,for,each,function
			v["traces"].sort(cmpBySize),;
			traces_list.append(v),;
		#,sort,the,functions
		traces_list.sort(cmpBySize),;
		ns["traces"],=,traces_list,;
		
	return,ns_list,;
	
def,printTrace(trace,,total_size):
	trace_size,=,trace["size"],;
	trace_count,=,trace["items"],;
	print,"\t\t",+,str(round(float(trace_size)/total_size*100,,2)),+,"%,-,",+,str(trace_size/1024),+,",kb,-,",+,str(trace_count),+,",items",;
	for,t,in,trace["trace"]:
		print,"\t\t\t",+,str(t["clss"]),+,"::",+,str(t["func"]),;
		
def,printSortedTraces(l):
	allocs,=,0,;
	bytes,=,0,;
		
	for,ns,in,l:
		allocs,+=,ns["count"],;
		bytes,+=,ns["size"],;
		
	line,=,"Memory,allocation,report,for,",+,str(allocs),+,",allocations,,totalling,",+,str(bytes/1024),+,",kb,(",+,str(bytes/allocs),+,",ave),across,",+,str(len(l)),+,",packages",;
	print,line,;
	
	for,ns,in,l:
		line,=,ns["name"],;
		ns_size,=,ns["size"],;
		ns_count,=,ns["count"],;
		line,+=,",-,",+,str(round(float(ns_size)/bytes*100,,2)),+,"%,-,",+,str(ns_size/1024),+,",kb,",+,str(ns_count),+,",items,,avg,",+,str(ns_size/ns_count),+,",b",;
		print,line,;
		
		traces,=,ns["traces"],;
		numtypes,=,0,;
		for,t,in,traces:
			if,numtypes,==,kNumTypes:
				break,;
			numtypes,+=,1,;
			tg_size,=,t["size"],;
			tg_count,=,t["count"],;
			line,=,"\t",+,t["name"],+,",-,",+,str(round(float(tg_size)/bytes*100,,2)),+,"%,-,",+,str(tg_size/1024),+,",kb,",+,str(tg_count),+,",items,,avg,",+,str(tg_size/tg_count),+,",b",;
			print,line,;
			sub_traces,=,t["traces"],;
			numtraces,=,0,;
			for,f,in,sub_traces:
				if,numtraces,==,kNumTracesPerType:
					break,;
				numtraces,+=,1,;
				printTrace(f,,tg_size),;
				print,"",;
		
import,sys,;
if,len(sys.argv),!=,3:
	usage(),;
	sys.exit(),;
	
stacks,=,readStackFile(sys.argv[2]),;
addrs,=,readMapFile(sys.argv[1],,stacks["refaddr"]),;
translateTraces(stacks["traces"],,addrs),;
sorted_traces,=,sortTraces(stacks["traces"]),;
header,=,stacks["header"],;
for,ln,in,header:
	print,ln,;
print,"",;
printSortedTraces(sorted_traces),;
#!/usr/bin/env,python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
'''
Act,as,a,proxy,for,calls,the,adb.,During,automated,testing,we,have
seen,the,adb,process,hang,and,not,return,for,no,apparet,reason.,Subsequent
calls,of,the,exact,same,adb,command,to,the,same,device,will,suceed.,The
purpose,of,this,is,to,handle,all,calls,to,adb,,kill,the,adb,call,if,the
execution,time,takes,long,than,a,specififed,number,of,seconds,and,repeat
the,call,a,specified,number,of,times.
'''
import,os,re,sys,subprocess,killableprocess,datetime,tempfile
def,main(argv=None):
if,argv,is,None:
argv,=,sys.argv[1:],#,don't,include,the,script,name
ADB_TIMEOUT=os.getenv('ADB_TIMEOUT',,300)
ADB_MAX_ATTEMPTS=os.getenv('ADB_MAX_ATTEMPTS',,2)
attempt=0
args=""
for,arg,in,argv:
args+=",%s",%,arg
cmd="adb,%s",%,(args)
#print,"cmd:,%s",%,cmd
while,attempt,<,ADB_MAX_ATTEMPTS:
attempt=attempt+1
#,Need,to,call,the,subprocess,using,a,file,object,for,stdout.,There,have,been
#,problems,with,the,OS,blocking,when,large,amounts,of,data,is,being,returned
#,in,stdout,when,making,the,call,to,adb.,Poth,processes,must,be,buffering,and
#,causing,the,process,to,become,blocked.
f,=,tempfile.NamedTemporaryFile(delete=False)
p=killableprocess.Popen(cmd,,shell=True,,stdout=f,,stderr=subprocess.PIPE)
try:
p.wait(ADB_TIMEOUT)
except,OSError:
'''
We,have,seen,the,following,error,happen,in,the,build,system,,so,guard,against
this,error,and,just,treat,like,a,timeout,and,retry,the,call
"killableprocess.py",,line,177,,in,kill
os.killpg(self.pid,,signal.SIGKILL)
OSError:,[Errno,3],No,such,process
'''
p.returncode,=,127
f.flush()
f.close()
#,-9,and,127,are,returned,by,killableprocess,when,a,timeout,happens
if,,p.returncode,==,-9,or,p.returncode,==,127:
failure=file('/tmp/adb_failures',,'a')
failure.write('%s,,%s,,%s\n',%,(datetime.datetime.now(),,attempt,,cmd))
failure.flush()
failure.close()
continue
stdout=""
outfile,=,open(f.name,,'r')
for,line,in,outfile:
stdout+=line
outfile.close()
os.unlink(f.name)
return,stdout
if,__name__,==,"__main__":
print,main()
#!/usr/bin/env,python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,acts,as,a,proxy,to,remotely,run,abc,files,on,android,using,adb,,returns,shell,output,to,stdout
#,usage:,./android_shell.py,<vmargs>,file.abc
#,assumes,the,android,shell,is,deployed,to,/data/local/tamarin/avmshell
#
import,os,re,sys,subprocess,killableprocess,datetime,adb_proxy
#,Return,either,the,USAGE,or,the,-Dversion,information
if,len(sys.argv)==1,or,sys.argv[1]=='-Dversion',or,sys.argv[1]=='-Dselftest':
if,len(sys.argv)==1:
arg=""
else:
arg=sys.argv[1]
#,find,all,connected,devices
devices=[]
stdout=adb_proxy.main(['devices'])
for,line,in,stdout.split('\n'):
tokens=line.split()
if,len(tokens)==2,and,tokens[1]=='device':
devices.append(tokens[0])
stdout=adb_proxy.main(["-s,%s,shell,\"cd,/data/local/tamarin,;./avmshell,%s\"",%,(devices[0],arg)])
print(stdout)
sys.exit(0)
args=""
adbargs=""
threadid=0
androidid=None
filelist=[]
for,arg,in,sys.argv[1:]:
if,arg.startswith("--threadid="):
try:
threadid=int(arg[11:])
except:
print(sys.exc_info)
sys.exit(1)
elif,arg.startswith("--androidid="):
androidid=arg[12:]
adbargs="-s,%s",%,androidid
elif,re.search(".abc",arg):
flatfile=arg.replace('/','.')
filelist.append(arg)
stdout=adb_proxy.main(["%s,push,%s,/data/local/tamarin/%s",%,(adbargs,arg,flatfile)])
args+=",%s",%,flatfile
else:
args+=",%s",%,arg
stdout=adb_proxy.main(["%s,shell,\"/data/local/tamarin/android_runner.sh,%s\"",%,(adbargs,args)])
for,line,in,stdout.split('\n'):
if,re.search("EXITCODE=",line):
exitcode=1
try:
exitcode=int(line[line.find("EXITCODE=")+9:])
except:
print(sys.exc_info())
sys.exit(exitcode)
else:
print(line)
print("error:,stdout,did,not,contain,EXITCODE=")
sys.exit(1)
#,killableprocess,-,subprocesses,which,can,be,reliably,killed
#
#,Parts,of,this,module,are,copied,from,the,subprocess.py,file,contained
#,in,the,Python,distribution.
#
#,Copyright,(c),2003-2004,by,Peter,Astrand,<astrand@lysator.liu.se>
#
#,Additions,and,modifications,written,by,Benjamin,Smedberg
#,<benjamin@smedbergs.us>,are,Copyright,(c),2006,by,the,Mozilla,Foundation
#,<http://www.mozilla.org/>
#
#,By,obtaining,,using,,and/or,copying,this,software,and/or,its
#,associated,documentation,,you,agree,that,you,have,read,,understood,
#,and,will,comply,with,the,following,terms,and,conditions:
#
#,Permission,to,use,,copy,,modify,,and,distribute,this,software,and
#,its,associated,documentation,for,any,purpose,and,without,fee,is
#,hereby,granted,,provided,that,the,above,copyright,notice,appears,in
#,all,copies,,and,that,both,that,copyright,notice,and,this,permission
#,notice,appear,in,supporting,documentation,,and,that,the,name,of,the
#,author,not,be,used,in,advertising,or,publicity,pertaining,to
#,distribution,of,the,software,without,specific,,written,prior
#,permission.
#
#,THE,AUTHOR,DISCLAIMS,ALL,WARRANTIES,WITH,REGARD,TO,THIS,SOFTWARE,
#,INCLUDING,ALL,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS.
#,IN,NO,EVENT,SHALL,THE,AUTHOR,BE,LIABLE,FOR,ANY,SPECIAL,,INDIRECT,OR
#,CONSEQUENTIAL,DAMAGES,OR,ANY,DAMAGES,WHATSOEVER,RESULTING,FROM,LOSS
#,OF,USE,,DATA,OR,PROFITS,,WHETHER,IN,AN,ACTION,OF,CONTRACT,
#,NEGLIGENCE,OR,OTHER,TORTIOUS,ACTION,,ARISING,OUT,OF,OR,IN,CONNECTION
#,WITH,THE,USE,OR,PERFORMANCE,OF,THIS,SOFTWARE.
r"""killableprocess,-,Subprocesses,which,can,be,reliably,killed
This,module,is,a,subclass,of,the,builtin,"subprocess",module.,It,allows
processes,that,launch,subprocesses,to,be,reliably,killed,on,Windows,(via,the,Popen.kill(),method.
It,also,adds,a,timeout,argument,to,Wait(),for,a,limited,period,of,time,before
forcefully,killing,the,process.
Note:,On,Windows,,this,module,requires,Windows,2000,or,higher,(no,support,for
Windows,95,,98,,or,NT,4.0).,It,also,requires,ctypes,,which,is,bundled,with
Python,2.5+,or,available,from,http://python.net/crew/theller/ctypes/
"""
import,subprocess
import,sys
import,os
import,time
import,types
try:
from,subprocess,import,CalledProcessError
except,ImportError:
#,Python,2.4,doesn't,implement,CalledProcessError
class,CalledProcessError(Exception):
"""This,exception,is,raised,when,a,process,run,by,check_call(),returns
a,non-zero,exit,status.,The,exit,status,will,be,stored,in,the
returncode,attribute."""
def,__init__(self,,returncode,,cmd):
self.returncode,=,returncode
self.cmd,=,cmd
def,__str__(self):
return,"Command,'%s',returned,non-zero,exit,status,%d",%,(self.cmd,,self.returncode)
mswindows,=,(sys.platform,==,"win32")
if,mswindows:
import,winprocess
else:
import,signal
def,call(*args,,**kwargs):
waitargs,=,{}
if,"timeout",in,kwargs:
waitargs["timeout"],=,kwargs.pop("timeout")
return,Popen(*args,,**kwargs).wait(**waitargs)
def,check_call(*args,,**kwargs):
"""Call,a,program,with,an,optional,timeout.,If,the,program,has,a,non-zero
exit,status,,raises,a,CalledProcessError."""
retcode,=,call(*args,,**kwargs)
if,retcode:
cmd,=,kwargs.get("args")
if,cmd,is,None:
cmd,=,args[0]
raise,CalledProcessError(retcode,,cmd)
if,not,mswindows:
def,DoNothing(*args):
pass
class,Popen(subprocess.Popen):
if,not,mswindows:
#,Override,__init__,to,set,a,preexec_fn
def,__init__(self,,*args,,**kwargs):
if,len(args),>=,7:
raise,Exception("Arguments,preexec_fn,and,after,must,be,passed,by,keyword.")
real_preexec_fn,=,kwargs.pop("preexec_fn",,None)
def,setpgid_preexec_fn():
os.setpgid(0,,0)
if,real_preexec_fn:
apply(real_preexec_fn)
kwargs['preexec_fn'],=,setpgid_preexec_fn
subprocess.Popen.__init__(self,,*args,,**kwargs)
if,mswindows:
def,_execute_child(self,,args,,executable,,preexec_fn,,close_fds,
cwd,,env,,universal_newlines,,startupinfo,
creationflags,,shell,
p2cread,,p2cwrite,
c2pread,,c2pwrite,
errread,,errwrite):
if,not,isinstance(args,,types.StringTypes):
args,=,subprocess.list2cmdline(args)
if,startupinfo,is,None:
startupinfo,=,winprocess.STARTUPINFO()
if,None,not,in,(p2cread,,c2pwrite,,errwrite):
startupinfo.dwFlags,|=,winprocess.STARTF_USESTDHANDLES
startupinfo.hStdInput,=,int(p2cread)
startupinfo.hStdOutput,=,int(c2pwrite)
startupinfo.hStdError,=,int(errwrite)
if,shell:
startupinfo.dwFlags,|=,winprocess.STARTF_USESHOWWINDOW
#,,,,,,,,,,,,,,,,startupinfo.wShowWindow,=,winprocess.SW_HIDE
comspec,=,os.environ.get("COMSPEC",,"cmd.exe")
args,=,comspec,+,",/c,",+,args
#,We,create,a,new,job,for,this,process,,so,that,we,can,kill
#,the,process,and,any,sub-processes,
self._job,=,winprocess.CreateJobObject()
creationflags,|=,winprocess.CREATE_SUSPENDED
creationflags,|=,winprocess.CREATE_UNICODE_ENVIRONMENT
hp,,ht,,pid,,tid,=,winprocess.CreateProcess(
executable,,args,
None,,None,,#,No,special,security
1,,#,Must,inherit,handles!
creationflags,
winprocess.EnvironmentBlock(env),
cwd,,startupinfo)
self._child_created,=,True
self._handle,=,hp
self._thread,=,ht
self.pid,=,pid
winprocess.AssignProcessToJobObject(self._job,,hp)
winprocess.ResumeThread(ht)
if,p2cread,is,not,None:
p2cread.Close()
if,c2pwrite,is,not,None:
c2pwrite.Close()
if,errwrite,is,not,None:
errwrite.Close()
def,kill(self,,group=True):
"""Kill,the,process.,If,group=True,,all,sub-processes,will,also,be,killed."""
if,mswindows:
if,group:
winprocess.TerminateJobObject(self._job,,127)
else:
winprocess.TerminateProcess(self._handle,,127)
self.returncode,=,127,,,,
else:
if,group:
os.killpg(self.pid,,signal.SIGKILL)
else:
os.kill(self.pid,,signal.SIGKILL)
self.returncode,=,-9
def,wait(self,,timeout=-1,,group=True):
"""Wait,for,the,process,to,terminate.,Returns,returncode,attribute.
If,timeout,seconds,are,reached,and,the,process,has,not,terminated,
it,will,be,forcefully,killed.,If,timeout,is,-1,,wait,will,not
time,out."""
if,self.returncode,is,not,None:
return,self.returncode
if,mswindows:
if,timeout,!=,-1:
timeout,=,timeout,*,1000
rc,=,winprocess.WaitForSingleObject(self._handle,,timeout)
if,rc,==,winprocess.WAIT_TIMEOUT:
self.kill(group)
else:
self.returncode,=,winprocess.GetExitCodeProcess(self._handle)
else:
if,timeout,==,-1:
subprocess.Popen.wait(self)
return,self.returncode
starttime,=,time.time()
#,Make,sure,there,is,a,signal,handler,for,SIGCHLD,installed
oldsignal,=,signal.signal(signal.SIGCHLD,,DoNothing)
while,time.time(),<,starttime,+,timeout,-,0.01:
pid,,sts,=,os.waitpid(self.pid,,os.WNOHANG)
if,pid,!=,0:
self._handle_exitstatus(sts)
signal.signal(signal.SIGCHLD,,oldsignal)
return,self.returncode
#,time.sleep,is,interrupted,by,signals,(good!)
newtimeout,=,timeout,-,time.time(),+,starttime
time.sleep(newtimeout)
self.kill(group)
signal.signal(signal.SIGCHLD,,oldsignal)
subprocess.Popen.wait(self)
return,self.returncode
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,c-basic-offset:,4,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys,os
thisdir,=,os.path.dirname(__file__)
rootdir,=,thisdir,+,"/.."
sys.path.append(rootdir)
import,utils.exactgc
utils.exactgc.gen_shell(rootdir,+,'/generated')
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,c-basic-offset:,4,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os
import,shutil
import,stat
import,sys
classpath,=,os.environ.get('ASC')
if,classpath,==,None:
classpath,=,"../utils/asc.jar"
#print,"ERROR:,ASC,environment,variable,must,point,to,asc.jar"
#exit(1)
def,mv(oldfile,,newfile):
shutil.copyfile(oldfile,newfile)
os.remove(oldfile)
def,rm(file):
if,os.access(file,,os.F_OK),==,True:
os.remove(file)
def,warn_notwriteable(file):
if,os.path.exists(file),and,not,os.stat(file).st_mode,&,stat.S_IWUSR:
print("warning:,%s,is,not,writeable",%,file)
return,True
return,False
javacmd,=,"java,-ea,-DAS3,-DAVMPLUS,-classpath,"+classpath
asc,=,javacmd+",macromedia.asc.embedding.ScriptCompiler,"
print("ASC="+classpath)
print("Building,shell_toplevel...")
configs,=,",".join(sys.argv[1:])
if,warn_notwriteable('../generated/shell_toplevel.abc'):
sys.exit(0),#,exit,0,so,build,will,continue
#,compile,builtins
os.system(asc+",-import,../generated/builtin.abc,-builtin,"+configs+",-apiversioning,-out,shell_toplevel,shell_toplevel.as,Domain.as,../extensions/Sampler.as,../extensions/Trace.as,Endian.as,Worker.as,WorkerDomain.as")
rm("shell_toplevel.h")
rm("shell_toplevel.cpp")
mv("shell_toplevel.abc",,"../generated/shell_toplevel.abc")
print("Generating,native,thunks...")
os.system("python,../utils/nativegen.py,../generated/builtin.abc,../generated/shell_toplevel.abc")
print("Done.")
#!/usr/bin/env,python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys,os.path,os,getopt,time,subprocess,re
class,RunSmokes():
#,shows,detailed,output,for,each,test
verbose=False
#,timeout,in,seconds
timeout=120
#,test,file
testfile='./runsmokes.txt'
#,config,,if,None,let,runtests.py,compute
config=None
allpasses=0
allfails=0
failed=False
failures=''
startTime=time.time()
#,list,of,actual,env,variables
envsubs=[]
def,usage(self):
print('usage:,%s,[options]',%,os.path.basename(sys.argv[0]))
print('-t,--time,,,,,,,time,in,seconds,to,run,,,tests,will,keep,running,until,the,time,has,been,exceeded')
print('-f,--testfile,,,file,containing,commands,to,run')
def,setoptions(self):
options,=,'t:f:hv'
longoptions=,['time=','testfile=','help','verbose']
try:
opts,args,=,getopt.getopt(sys.argv[1:],options,longoptions)
except:
self.usage()
sys.exit(1)
for,o,v,in,opts:
if,o,in,('-t','--time'):
self.timeout=int(v)
if,o,in,('-f','--testfile'):
self.testfile=v
if,o,in,('-v','--verbose'):
self.verbose=True
if,o,in,('-h','--help'):
self.usage()
sys.exit(1)
return,opts
def,__init__(self):
self.setoptions()
def,run(self):
print("starting,smoke,tests")
print(",,,,test,file,is,%s",%,self.testfile)
if,self.timeout,>,0:
print(",,,,will,run,tests,until,timeout,of,%ds,is,exceeded",%,self.timeout)
else:
print(",,,,will,run,tests,until,all,tests,are,complete,,no,timeout")
print('')
try:
infile=open(self.testfile,'r')
except:
print("ERROR,reading,file,%s",%,testfile)
sys.exit(1)
for,test,in,infile:
test=test.strip()
if,len(test)==0,or,test[0]=='#':
continue
if,self.timeout,>,0:
if,time.time()-self.startTime>self.timeout:
break
self.runtest(test)
if,self.timeout,>,0:
if,time.time()-self.startTime<self.timeout:
print('\ntests,finished,after,%d,seconds,,did,not,exceed,timeout,of,%d,seconds',%,(time.time()-self.startTime,self.timeout))
else:
print('\nexceeded,timeout,of,%d,seconds,,actual,time,%d,seconds',%,(self.timeout,time.time()-self.startTime))
else:
print('\ntests,finished,after,%d,seconds',%,(time.time()-self.startTime))
infile.close()
def,showstats(self):
print("\nenvironment,variables:")
for,env,in,self.envsubs:
print(",,,,%s,=,%s",%,(env,os.environ[env]))
print("\npasses,,,,,,,,,,,,,:,%d",%,self.allpasses)
print("failures,,,,,,,,,,,:,%d",%,self.allfails)
if,self.allfails>0:
print("\nlist,of,test,failures:\n%s",%,self.failures)
def,replaceEnv(self,line):
envs=re.findall('\$\{[A-Za-z0-9_\-]+\}',line),,,,
for,env,in,envs:
env=env[2:-1]
val,=,''
if,not,(env,in,os.environ):
if,env,!=,'RTARGS':
print("ERROR:,environment,variable,'%s',is,not,defined,,exiting",%,env)
sys.exit(1)
else:
val=os.environ[env]
if,(env,in,self.envsubs)==False:
self.envsubs.append(env)
line=re.sub('\$\{%s\}',%,env,,val,,line)
return,line
def,scrub(self,out):
out=re.sub('passes',',passes',out)
out=re.sub('failures',',failures',out)
out=re.sub('assertions',',assertions',out)
out=re.sub('tests,skipped',',tests,skipped',out)
return,out
def,runtest(self,rawcommand):
command=self.replaceEnv(rawcommand)
if,os.name=='nt':
command=command.replace(',;','&&')
detail=""
out=err=""
try:
process=subprocess.Popen(command,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
(out,err)=process.communicate()
#,convert,to,string,from,byte,for,py3,compatibility
out,=,out.decode('latin_1')
err,=,err.decode('latin_1')
exitcode=process.returncode
except:
detail="ERROR:,running,test"
exitcode=1,,,,,,,,
tm=time.time()-self.startTime
passes=0
fails=0
expectfail=0
unpass=0
asserts=0
skips=0
if,exitcode!=0:
detail+=",exitcode=%d",%,exitcode
if,self.verbose:
print("[OUTPUT,%s]",%,command)
out=self.scrub(out)
print(out)
print("[ENDOUTPUT,%s]",%,command)
for,line,in,out.splitlines():
line=line.strip()
if,re.search('time$',line):
passes+=1
if,re.search('crash$',line):
fails+=1
if,re.search("PASSED$",line):
passes+=1
if,re.search("FAILED$",line):
fails+=1
if,re.search("^passes",line):
n=int(line.split()[2])
if,n>0,and,passes==0:
passes+=1
if,re.search("^failures",line):
n=int(line.split()[2])
if,n>0,and,fails==0:
fails+=1
if,re.search("^expected,failures",line):
passes+=1
expectfail=int(line.split()[3])
detail+=",ef:,%d",%,expectfail
if,re.search("^unexpected,passes",line):
fails+=1
unpass=int(line.split()[3])
detail+=",up:,%d",%,unpass
if,re.search("^assertions",line):
fails+=1
asserts=int(line.split()[2])
detail+=",as:,%d",%,asserts
if,re.search("^tests,skipped",line):
passes+=1
skips=int(line.split()[3])
detail+=",sk:,%d",%,skips
detail="p:%d,f:%d,%s",%,(passes,fails,detail)
if,passes==0,or,fails>0,or,exitcode!=0:
if,fails==0:
fails+=1
status="failed"
self.failed=True
out=self.scrub(out)
self.failures+="%s\n%s\n[OUTPUT]\n%s%s\n[END,OUTPUT]\n",%,(rawcommand,command,out,err)
else:
status="passed"
print("%s,%ds,%s,%s",%,(status,tm,rawcommand,detail))
sys.stdout.flush()
if,fails>0:
self.allfails+=1
else:
self.allpasses+=1
##,main
r,=,RunSmokes()
r.run()
r.showstats()
if,r.failed:
sys.exit(1)
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:,(add,to,~/.vimrc:,set,modeline,modelines=5)
#
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#
import,os,,sys,,getopt,,datetime,,pipes,,glob,,itertools,,tempfile,,string
import,re,,platform,,threading,,time,,copy
from,os.path,import,*
from,os,import,getcwd,environ,walk
from,datetime,import,datetime
from,glob,import,glob
from,sys,import,argv,,exit
from,getopt,import,getopt
from,itertools,import,count
#,add,parent,dir,to,python,module,search,path
sys.path.append('..')
from,util.runtestBase,import,RuntestBase
#,runtestUtils,must,be,imported,after,"from,os.path,import,*",as,walk,is,overridden
from,util.runtestUtils,import,*
class,AcceptanceRuntest(RuntestBase):
runESC,=,False
escbin,=,'../../esc/bin/'
passthreadid,=,False
androidthreads,=,False
androiddevices,=,[]
verifyonly,=,False
swfversions,=,[9,10,11,12,13,14,15,16,17,18,19,20,21]
apiversions,=,[12,13,14,15,16,17,18]
def,__init__(self):
#,Set,threads,to,#,of,available,cpus/cores
self.threads,=,detectCPUs()
RuntestBase.__init__(self)
def,__str__(self):
return,'AcceptanceRuntest'
def,setEnvironVars(self):
RuntestBase.setEnvironVars(self)
if,'ESCBIN',in,environ:
self.escbin,=,environ['ESCBIN'].strip()
def,usage(self,,c):
RuntestBase.usage(self,,c)
print(',,,,--esc,,,,,,,,,,,run,esc,instead,of,avm')
print(',,,,--escbin,,,,,,,,location,of,esc/bin,directory,-,defaults,to,../../esc/bin')
print(',,,,--eval,,,,,,,,,,use,run-time,compiler')
print(',,,,--ext,,,,,,,,,,,set,the,testfile,extension,(defaults,to,.as)')
print(',,,,--ats,,,,,,,,,,,generate,ats,swfs,instead,of,running,tests')
print(',,,,--atsdir,,,,,,,,base,output,directory,for,ats,swfs,-,defaults,to,ATS_SWFS')
print(',,,,--threads,,,,,,,number,of,threads,to,run,(default=#,of,cpu/cores),,set,to,1,to,have,tests,finish,sequentially')
print(',,,,--passthreadid,,set,the,environment,variable,threadid,when,calling,the,AVM,script.,,The,threadid,is,an,integer,0...n-1,where,threads=n.')
print(',,,,--androidthreads,,,,assign,a,thread,for,each,android,device,connected.')
print(',,,,--verify,,,,,,,,run,a,verify,pass,instead,of,running,abcs')
print(',,,,--verifyonly,,,,run,a,-Dverifyonly,pass:,only,checks,test,exitcode')
print(',,,,--remoteip,,,,,,IP/DNS,address,of,the,machine,to,run,the,tests,on.')
print(',,,,--remoteuser,,,,user,name,to,use,to,connect,to,the,remote,machine.')
exit(c)
def,setOptions(self):
RuntestBase.setOptions(self)
self.longOptions.extend(['ext=','esc','escbin=','eval','threads=','ats',
'atsdir=','verify','verifyonly','androidthreads','passthreadid'])
def,parseOptions(self):
opts,=,RuntestBase.parseOptions(self)
for,o,,v,in,opts:
if,o,in,('--ext',):
self.sourceExt,=,v
elif,o,in,('--esc',):
self.runESC,=,True
elif,o,in,('--escbin',):
self.escbin,=,v
elif,o,in,('--eval',):
self.eval,=,True
elif,o,in,('--passthreadid',):
self.passthreadid=True
elif,o,in,('--androidthreads',):
self.androidthreads=True
self.threads=1
elif,o,in,('--threads',):
try:
self.threads=int(v)
except,ValueError:
print('Incorrect,threads,value:,%s\n',%,v)
self.usage(2)
elif,o,in,('--ats',):
self.genAtsSwfs,=,True
self.rebuildtests,=,True
#,Need,to,run,single,threaded,since,we,create,a,temp,file,for
#,every,test,and,this,file,can,collide,when,using,multiple,threads
self.threads,=,1
elif,o,in,('--atsdir',):
self.atsDir,=,v
elif,o,in,('--verify',):
self.verify,=,True
self.vmargs,=,'-Dverifyall,-Dverbose=verify'
elif,o,in,('--verifyonly',):
self.verifyonly,=,True
if,'-Dverifyonly',not,in,self.vmargs:
self.vmargs,+=,',-Dverifyonly'
elif,o,in,('--remoteip',):
self.remoteip,=,v
elif,o,in,('--remoteuser',):
self.remoteuser,=,v
def,run(self):
self.setEnvironVars()
self.loadPropertiesFile()
self.setOptions()
self.parseOptions()
self.setTimestamp()
self.checkPath()
(self.ascbuild,self.ascversion)=self.getAscVersion(self.asc)
if,not,self.config:
self.determineConfig()
if,self.verifyonly,and,'debugger',not,in,self.vmtype:
exit('You,must,be,running,a,debugger,build,in,order,to,use,the,-Dverifyonly,option')
if,self.rebuildtests==False,and,(re.search('arm-winmobile-emulator',self.config)!=None,or,self.osName=='winmobile'):
if,re.search('^arm-winmobile-emulator',self.config)==None:
print('ERROR:,to,use,windows,mobile,build,set,--config,arm-winmobile-emulator-tvm-release,or,install,cygwin,utility,/usr/bin/file.exe')
sys.exit(1)
self.setupCEEmulators()
if,self.htmlOutput,and,not,self.rebuildtests:
self.createOutputFile()
#,extension,lists,must,be,tuples
self.otherTestExtensions,=,(self.abcasmExt,)
self.executableExtensions,=,(self.abcOnlyExt,)
#,test,configuration,is,contained,in,two,files:,failconfig,&,testconfig)
self.settings,,self.directives,=,self.parseTestConfig(self.testconfig)
failconfig_settings,,failconfig_directives,=,self.parseTestConfig(self.failconfig)
self.settings.update(failconfig_settings)
self.directives.update(failconfig_directives)
self.tests,=,self.getTestsList(self.args)
#,Load,root,.asc_args,and,.java_args,files
self.parseRootConfigFiles()
self.check_harness_files()
self.preProcessTests()
if,self.rebuildtests:
self.rebuildTests()
else:
self.runTests(self.tests)
self.cleanup()
def,preProcessTests(self):
RuntestBase.preProcessTests(self)
#if,not,isfile(self.abcasmShell+'.abc'):
#,,,,self.js_print("Precompiling,%s",%,self.abcasmShell)
#,,,,self.compile_test(self.abcasmShell+'.as')
#,Are,we,running,esc,-,depends,on,a,valid,avm
if,self.runESC:
self.runSource,=,True
#,generate,the,executable,cmd,for,esc
#escAbcs,=,[f,for,f,in,os.listdir(self.escbin),if,f.endswith('.abc')],#not,all,abcs,are,used,for,esc
escAbcs,=,['debug','util','bytes-tamarin','util-tamarin','lex-char','lex-token',
'lex-scan','ast','ast-decode','parse','asm','abc','emit','cogen',
'cogen-stmt','cogen-expr','esc-core','eval-support','esc-env','main']
if,not,self.escbin.endswith('/'):
self.escbin,+=,'/'
for,f,in,escAbcs:
self.avm,+=,',%s%s.es.abc',%,(self.escbin,,f)
self.avm,+=,',--,'
self.avm,+=,',%s../test/spidermonkey-prefix.es',%,self.escbin,,#needed,to,run,shell,harness
if,self.androidthreads:
p=subprocess.Popen('adb,devices',shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
(out,err)=p.communicate()
out,=,out.decode('latin_1','replace')
out,=,out.split('\n')
for,line,in,out:
items=line.split()
if,len(items)==2,and,items[1]=='device':
for,i,in,range(self.threads):
self.androiddevices.append(items[0])
if,len(self.androiddevices)==0:
print("error:,adb,did,not,detect,any,attached,devices")
print("adb,devices,stdout:,%s,stderr:,%s",%,(out,err))
sys.exit(1)
print("detected,%d,android,devices",%,(len(self.androiddevices)/self.threads))
self.threads=len(self.androiddevices)
def,skip_test(self,,ast,,testnum,,settings,,key):
'''Skip,the,given,test,,returns,output_calls'''
output_calls,=,[]
output_calls.append((self.js_print,,('%d,running,%s',%,(testnum,,ast),
'<b>',,'</b><br/>')))
output_calls.append((self.js_print,(',,skipping...,reason:,%s',%
settings['.*'][key],)))
self.allskips,+=,1
return,output_calls
def,exclude_test(self,,ast,,testnum,,settings,,key):
'''Exclude,the,given,test,,returns,output_calls'''
output_calls,=,[]
output_calls.append((self.js_print,,('%d,running,%s',%,(testnum,,ast),
'<b>',,'</b><br/>')))
output_calls.append((self.js_print,(',,excluding...,reason:,%s',%
settings['.*'][key],)))
return,output_calls
def,runTestPrep(self,,testAndNum):
ast,=,testAndNum[0]
testnum,=,testAndNum[1]
outputCalls,=,[],#queue,all,output,calls,so,that,output,is,written,in,a,block
extraVmArgs,=,''
abcargs,=,''
dir,=,os.path.split(ast)[0]
root,ext,=,splitext(ast)
if,self.runSource,or,self.eval,or,ext,in,self.executableExtensions:
testName,=,ast
else:
testName,=,root,+,'.abc'
includes,=,self.includes,#list
settings,=,self.get_test_settings(root)
#,exclude,entire,test,if,specified
if,'.*',in,settings,and,'exclude',in,settings['.*']:
return,self.exclude_test(ast,,testnum,,settings,,'exclude')
#,skip,entire,test,if,specified
if,'.*',in,settings,and,'skip',in,settings['.*']:
return,self.skip_test(ast,,testnum,,settings,,'skip')
#,skip,tests,that,can't,be,verified
if,self.verify,and,'.*',in,settings,and,'verify_skip',in,settings['.*']:
return,self.skip_test(ast,,testnum,,settings,,'verify_skip')
#,Check,for,a,timezone,file
if,isfile('%s.tz',%,ast):
if,not,self.valid_time_zone(ast,,testnum,,outputCalls):
return,outputCalls
#,delete,abc,if,forcerebuild
if,self.forcerebuild,and,isfile(testName),and,ext,not,in,self.executableExtensions:
os.unlink(testName)
if,isfile(testName),and,getmtime(ast)>getmtime(testName),and,self.timestampcheck:
outputCalls.append((self.verbose_print,,("%s,has,been,modified,,recompiling",%,ast,)))
os.unlink(testName)
#,process,support,dir
if,exists(root+self.supportFolderExt),and,not,(self.runSource,or,self.eval):
self.compile_support_files(root+self.supportFolderExt,,outputCalls)
#,compile,any,files,in,subdir,with,same,name,as,test,(were,previously,included)
if,exists(root):
self.compile_support_files(root,,outputCalls)
for,testfile,in,sorted(glob(join(root,'/*.abc'))):
extraVmArgs,+=,',%s',%,testfile
if,'Interface',in,extraVmArgs:
extraVmArgs,=,self.sortInterfaces(extraVmArgs),
#,compile,file,if,needed
if,not,isfile(testName):
compileOutput,=,self.compile_test(ast,,outputCalls=outputCalls)
if,not,isfile(testName):
if,ast.endswith(self.abcasmExt):
#,file,didn't,compile,,compare,compile,output
flines,=,self.compareAbcAsmOutput(ast,,compileOutput)
if,flines:
self.allfails,+=,1
outputCalls.append((self.fail,(testName,,'FAILED!,:\nExpected:\n'+''.join(flines)+'\nGOT:\n'+''.join(compileOutput),,self.failmsgs)))
outputCalls.append((self.js_print,,(',,,FAILED,passes:,0,fails:,1,unexpected,passes:,0,expected,failures:,0',,'',,'<br/>')))
else:
self.allpasses,+=,1
outputCalls.append((self.verbose_print,,(',,,PASSED,passes:,1,fails:,0,unexpected,passes:,0,expected,failures:,0',,'',,'<br/>')))
outputCalls.insert(0,(self.js_print,('%d,running,%s',%,(testnum,,ast),,'<b>',,'</b><br/>'))),;
return,outputCalls
else:
self.allfails,+=,1
outputCalls.insert(0,(self.js_print,('%d,running,%s',%,(testnum,,ast),,'<b>',,'</b><br/>')))
outputCalls.append((self.js_print,,('%s',%,'\n'.join(compileOutput),)))
outputCalls.append((self.fail,(testName,,'FAILED!,file,did,not,compile:,%s',%
testName,,self.failmsgs)))
return,outputCalls
if,self.runSource,or,self.eval:
incfiles=self.build_incfiles(testName)
#,read,any,extra,avm,arguments,,each,line,will,execute,the,avm,with,those,args
if,isfile('%s.avm_args',%,ast):
avm_args_file,=,open('%s.avm_args',%,ast,'r')
index,=,0
uses_swfversion,=,re.compile('uses_swfversion',,re.IGNORECASE)
uses_apiversion,=,re.compile('uses_apiversion',,re.IGNORECASE)
for,line,in,avm_args_file:
line,=,line.strip()
if,line.startswith('#'):
continue
index,+=,1
#,uses_swfversion
if,uses_swfversion.search(line):
#,run,avm,with,all,bugcompat,versions
for,swf_ver,in,self.swfversions:
line,=,uses_swfversion.sub('',,line)
line,,extraVmArgs,,abcargs,,multiabc,=,self.process_avm_args_line(line,,dir)
extraVmArgs,+=,',-swfversion,%s,',%,swf_ver
outputCalls.extend(self.runTest(
ast,,root,,testName,,'%s.%s',%,(testnum,,index),
settings,,extraVmArgs,,abcargs))
index,+=,1
continue
#,uses_apiversion
if,uses_apiversion.search(line):
#,run,avm,with,all,api,versions
for,api_ver,in,self.apiversions:
line,=,uses_apiversion.sub('',,line)
line,,extraVmArgs,,abcargs,,multiabc,=,self.process_avm_args_line(line,,dir)
extraVmArgs,+=,',-api,SWF_%s,',%,api_ver
outputCalls.extend(self.runTest(
ast,,root,,testName,,'%s.%s',%,(testnum,,index),
settings,,extraVmArgs,,abcargs))
index,+=,1
continue
line,,extraVmArgs,,abcargs,,multiabc,=,self.process_avm_args_line(line,,dir)
outputCalls.extend(self.runTest(ast,,root,,testName,,'%s.%s',%,(testnum,,index),
settings,,extraVmArgs,,abcargs,,multiabc))
avm_args_file.close()
else:
outputCalls.extend(self.runTest(ast,,root,,testName,,testnum,,settings,,extraVmArgs))
return,outputCalls
def,valid_time_zone(self,,testname,,testnum,,outputCalls):
'''Read,in,the,associated,time,zone,(testname.as.tz),file,and
check,if,we,match,that,timezone.,,Returns,a,boolean,indicating
whether,we,are,in,the,right,timezone'''
tz_file,=,open('%s.tz',%,testname)
valid_timezones,=,[]
for,line,in,tz_file:
line,=,line.strip()
if,not,line,or,line.startswith('#'):
continue
valid_timezones.append(line)
tz_file.close()
#,windows,python,time.tzname,returns,time,zone,strings,instead,of
#,abbreviations.,,Take,the,string,and,condense,it,so,that,it,matches
#,the,unix,tzname,values.,,Not,ideal,,but,works,for,most,time,zones.
#,e.g.:,computer,set,to,Pacific,Standard,Time
#,windows,tzname,=,('Pacific,Standard,Time',,'Pacific,Daylight,Time')
#,cygwin,,tzname,=,('PST',,'PDT')
if,self.osName,==,'win',and,not,self.cygwin:
#,extract,only,the,upper,case,letters,from,the,windows,time,zone
tzname,=,tuple([''.join(re.findall('[A-Z]',tz)),for,tz,in,time.tzname])
else:
tzname,=,time.tzname
#,check,if,current,tz,is,in,the,list
if,str(tzname),not,in,valid_timezones:
outputCalls.append(
(self.js_print,
(',,skipping...,reason:,Current,timezone:,%s,not,in,%s.tz,timezones:\n',\
',,,,,,,,,,,,,,,,,,,,,,%s'
%,(tzname,,testname,,','.join(valid_timezones)),)))
outputCalls.insert(0,(self.js_print,('%d,running,%s',%,(testnum,,testname),,'<b>',,'</b><br/>'))),;
self.allskips,+=,1
return,False
return,True
def,process_avm_args_line(self,,line,,dir):
abcargs,=,''
multiabc,=,''
extraVmArgs,=,''
line,=,line.replace("$DIR",,dir)
if,line.find('--'),!=,-1:
(line,,abcargs),=,line.split('--')
if,line.find('|multiabc|'),!=,-1:
multiabc,=,line[line.find('|multiabc|')+10:]
extraVmArgs,+=,line[:line.find('|multiabc|')]
else:
extraVmArgs,=,line
return,line,,extraVmArgs,,abcargs,,multiabc
def,runTest(self,,ast,,root,,testName,,testnum,,settings,,extraVmArgs='',,abcargs='',,multiabc=''):
#,add,as,harness,files,to,extra,vm,args
harnessAbcString,=,''
for,harness_abc,in,self.harness_abcs:
harnessAbcString,+=,",%s",%,harness_abc
extraVmArgs,+=,harnessAbcString
passByEnv=None
if,self.passthreadid:
try:
if,threading.currentThread().getName()=='MainThread':
n=0
else:
n=int(threading.currentThread().getName()[7:])-1
passByEnv=copy.deepcopy(os.environ)
passByEnv["threadid"]='%s',%,n
except:
print(sys.exc_info())
if,self.androidthreads:
try:
if,threading.currentThread().getName()=='MainThread':
n=0
else:
n=int(threading.currentThread().getName()[7:])-1
if,n<len(self.androiddevices):
extraVmArgs=",--threadid=%d,--androidid=%s,%s",%,(n,self.androiddevices[n],extraVmArgs)
except:
print(sys.exc_info())
outputCalls,=,[]
lpass,=,0
lfail,=,0
lexpfail,=,0
lunpass,=,0
ltimeout,=,0
lassert,=,0
starttime=time.time()
if,self.aotsdk,and,self.aotout:
progname,=,testName.replace(".abc",,"")
progname,=,progname.replace("/",,".")
progpath,=,os.path.join(self.aotout,,progname)
if,self.remoteip:
retryCount,=,5
while,retryCount,>,0:
#,copy,file,to,remote,device
cmd,=,"scp,%s,%s@%s:",%,(progpath,,self.remoteuser,,self.remoteip)
self.run_pipe(cmd,,outputCalls=outputCalls)
#,run,app
cmd,=,"ssh,%s@%s,./%s,%s",%,(self.remoteuser,,self.remoteip,,progname,,avm_args)
(f,err,exitcode),=,self.run_pipe(cmd,,outputCalls=outputCalls)
if,exitcode,!=,0:
time.sleep(5)
retryCount,-=,1
else:
break
#,delete,app
cmd,=,"ssh,%s@%s,rm,%s",%,(self.remoteuser,,self.remoteip,,progname)
self.run_pipe(cmd,,outputCalls=outputCalls)
elif,self.avm:,#,AVM,is,set,to,a,script,that,will,handle,SSH,communications
cmd,=,"%s,%s,%s,%s",%,(self.avm,,progpath,,self.vmargs,,extraVmArgs)
(f,err,exitcode),=,self.run_pipe(cmd,,outputCalls=outputCalls,,envVars=passByEnv)
else:,#,Execute,on,OSX
cmd,=,"%s,%s,%s",%,(progpath,,self.vmargs,,extraVmArgs)
#,print("about,to,execute:,",+,cmd)
(f,err,exitcode),=,self.run_pipe(cmd,,outputCalls=outputCalls)
elif,ast.endswith(self.abcasmExt):
#,make,sure,util,file,has,been,compiled
if,not,exists(self.abcasmShell+'.abc'):,,#,compile,abcasmShell,with,no,additional,args
self.run_pipe('"%s",-jar,%s,-import,%s,%s',%,(self.java,,self.asc,,self.builtinabc,,self.abcasmShell+'.as'),,outputCalls=outputCalls)
(f,err,exitcode),=,self.run_pipe('%s,%s,%s,%s,%s',%,(self.avm,,self.vmargs,,extraVmArgs,,self.abcasmShell+'.abc',,testName),,outputCalls=outputCalls,,envVars=passByEnv)
elif,self.verify:
#,get,the,abcdump,for,the,file
(f,err,exitcode),=,self.run_pipe('%s,%s,--,%s',%,(self.avm,,self.abcdump+'.abc',,testName),,outputCalls=outputCalls)
abcdumpFunctions,=,[line.strip(),for,line,in,f,if,line.startswith('var,function')]
if,self.verbose:
outputCalls.append((self.js_print,(abcdumpFunctions,)))
#,get,-Dverifyall,-Dverbose=verify,output
(f,err,exitcode),=,self.run_pipe('%s,%s,%s',%,(self.avm,,self.vmargs,,testName),,outputCalls=outputCalls)
verifyFunctions,=,[line.strip(),for,line,in,f,if,line.startswith('verify,Function/')]
if,self.verbose:
outputCalls.append((self.js_print,(verifyFunctions,)))
#,we,can't,compare,actual,function,names,since,abcdump,treats,function,names,and,var,names,the,same
#,we,instead,just,compare,that,the,#,of,functions,verified,==,the,#,of,functions,listed,out,by,abcdump
if,len(abcdumpFunctions),!=,len(verifyFunctions):
lfail,+=,1
outputCalls.append((self.fail,(testName,,'FAILED!,:\nExpected,(from,abcdump):,%s,functions,verified\nGOT,(-Dverifyall,-Dverbose=verify):,%s,functions,verified',%
(len(abcdumpFunctions),len(verifyFunctions)),,self.failmsgs)))
else:
lpass,+=,1
else:
#,escape,any,$,chars,in,extraVmArgs
if,'$',in,extraVmArgs:
#,escape,$,on,all,platforms,
#,if,self.osName,!=,'win',or,self.cygwin:
extraVmArgs,=,extraVmArgs.replace('$',,'\$')
if,abcargs:
(f,err,exitcode),=,self.run_pipe('%s,%s,%s,%s,%s,--,%s',%,(self.avm,,self.vmargs,,extraVmArgs,,multiabc,,testName,,abcargs),,outputCalls=outputCalls,,envVars=passByEnv)
elif,multiabc:
(f,err,exitcode),=,self.run_pipe('%s,%s,%s,%s,%s',%,(self.avm,,self.vmargs,,extraVmArgs,,multiabc,testName),,outputCalls=outputCalls,,envVars=passByEnv)
else:
(f,err,exitcode),=,self.run_pipe('%s,%s,%s,%s',%,(self.avm,,self.vmargs,,extraVmArgs,,testName),,outputCalls=outputCalls,,envVars=passByEnv)
#,Scrub,extraVmArgsString,as,it,does,not,need,to,be,displayed,in,the,output
extraVmArgs,=,extraVmArgs.replace(harnessAbcString,,'')
#,Test,has,been,run,,handle,output
if,self.verifyonly:
#,only,check,the,exit,code,when,running,a,verifyonly,pass
ec_lfail,,ec_lexpfail,,expectedExitcode,=,self.check_exit_code(
exitcode,,root,,testName,,f,,err,,settings,,outputCalls)
if,ec_lfail,or,ec_lexpfail:
lfail,+=,ec_lfail
lexpfail,+=,ec_lexpfail
else:
lpass,+=,1
elif,not,self.verify:
outputLines,=,[]
if,isfile(root+'.out'):
lpass,,lfail,,lexpfail,,lunpass,=,self.check_out_file(
root,,testName,,f+err,,settings,,outputCalls)
else:
for,line,in,f+err:
outputLines.append(line)
outputCalls.append((self.verbose_print,(',,,%s',%,line.strip(),)))
if,'Assertion,failed:',in,line:
lassert,+=,1
outputCalls.append((self.fail,(testName+extraVmArgs,,line,,self.assertmsgs)))
testcase=''
if,len(line)>9:
testcase=line.strip()
skipTestDesc,=,dict_match(settings,testcase,'skip')
if,skipTestDesc:
outputCalls.append((self.js_print,(',,skipping,"%s",...,reason:,%s',%,(line.strip(),skipTestDesc),)))
self.allskips+=1
continue
if,'PASSED!',in,line:
res=dict_match(settings,testcase,'expectedfail')
if,res:
outputCalls.append((self.fail,(testName,,'unexpected,pass:,',+,line.strip(),+,',reason:,'+res,,self.unpassmsgs)))
lunpass,+=,1
else:
lpass,+=,1
if,'FAILED!',in,line:
res=dict_match(settings,testcase,'expectedfail')
if,res:
outputCalls.append((self.fail,(testName,,'expected,failure:,',+,line.strip().replace('FAILED','failed'),+,',reason:,'+res,,self.expfailmsgs)))
lexpfail,+=,1
else:
lfail,+=,1
if,not,self.verbose:
outputCalls.append((self.fail,(testName+extraVmArgs,,line,,self.failmsgs)))
#,exitcode,check
ec_lfail,,ec_lexpfail,,expectedExitcode,=,self.check_exit_code(exitcode,,root,,testName,,f,,err,,settings,,outputCalls)
if,ec_lfail,or,ec_lexpfail:
lfail,+=,ec_lfail
lexpfail,+=,ec_lexpfail
elif,err:
#,TODO:,When,needed,,add,support,for,expected,stderr,output,-,see,https://bugzilla.mozilla.org/show_bug.cgi?id=561892
outputCalls.append((self.fail,(testName,,"unexpected,stderr,expected:'%s',actual:'%s'",%,('',err),,self.failmsgs)))
lfail,+=,1,,#,any,messages,to,stderr,automatically,fail,the,test
elif,lpass,==,0,and,lfail,==,0,and,lunpass==0,and,lexpfail==0:
res=dict_match(settings,'*','expectedfail')
if,res:
outputCalls.append((self.fail,(testName,,'expected,failure:,FAILED,contained,no,testcase,messages,reason:,%s',%,res,self.expfailmsgs)))
lexpfail,+=,1
else:
#,test,may,not,have,any,output,but,is,still,passing,if,a,non-standard,exitcode,was,expected,(e.g.,VerifyErrors)
if,expectedExitcode,!=,0,and,exitcode==expectedExitcode:
#outputCalls.append((self.js_print,(',,Expected,Exit,Code:,%s,Actual,Exit,Code:,%s,PASSED',%,(expectedExitcode,,exitcode),)))
lpass,=,1
else:
lfail,=,1
outputmsg=''
for,l,in,outputLines:
outputmsg+=l.strip()+'|'
outputCalls.append((self.fail,(testName,,',,,FAILED,contained,no,testcase,messages,-,reason:,%s',%,outputmsg,,self.failmsgs)))
self.allfails,+=,lfail
self.allpasses,+=,lpass
self.allexpfails,+=,lexpfail
self.allunpass,+=,lunpass
self.alltimeouts,+=,ltimeout
self.allasserts,+=,lassert
if,lfail,or,lunpass:
outputCalls.append((self.js_print,,(',,,FAILED,passes:%d,fails:%d,unexpected,passes:,%d,expected,failures:,%d\n',%,(lpass,lfail,lunpass,lexpfail),,'',,'<br/>')))
else:
outputCalls.append((self.verbose_print,,(',,,PASSED,passes:%d,fails:%d,unexpected,passes:,%d,expected,failures:,%d\n',%,(lpass,lfail,lunpass,lexpfail),,'',,'<br/>')))
if,self.show_time:
if,self.passthreadid:
outputCalls.insert(0,(self.js_print,('%s,running,%s,%s,%s,threadid=%s,time,%.1f',%,(testnum,,ast,,extraVmArgs,,abcargs,,passByEnv['threadid'],,time.time()-starttime),,'<b>',,'</b><br/>'))),;
else:
outputCalls.insert(0,(self.js_print,('%s,running,%s,%s,%s,time,%.1f',%,(testnum,,ast,,extraVmArgs,,abcargs,,time.time()-starttime),,'<b>',,'</b><br/>'))),;
else:
if,self.passthreadid:
outputCalls.insert(0,(self.js_print,('%s,running,%s,%s,%s,threadid=%s',%,(testnum,,ast,,extraVmArgs,,abcargs,,passByEnv['threadid']),,'<b>',,'</b><br/>'))),;
else:
outputCalls.insert(0,(self.js_print,('%s,running,%s,%s,%s',%,(testnum,,ast,,extraVmArgs,,abcargs),,'<b>',,'</b><br/>'))),;
return,outputCalls
def,check_out_file(self,,root,,testName,,output,,settings,,outputCalls):
#,override,standard,runtests,behavior,,just,compare,the,.out,file,with,stdout+stderr
lpass,,lfail,,lexpfail,,lunpass,=,0,,0,,0,,0
actual,=,[line.strip(),for,line,in,output,if,line.strip()]
try:
outfile,=,open(root+'.out',,'r')
expectedOut,=,[line.strip(),for,line,in,outfile.readlines(),if,line.strip()]
outfile.close()
except,IOError:
outputCalls.append((self.js_print,('Error,opening,%s.out',%,root,)))
lfail,+=,1
return,lpass,,lfail,,lexpfail,,lunpass
outputCalls.append((self.verbose_print,('%s.out,file,(expected):',%,root,)))
outputCalls.append((self.verbose_print,(expectedOut,)))
outputCalls.append((self.verbose_print,('\nactual,output:',)))
outputCalls.append((self.verbose_print,(actual,)))
#,check,settings,if,this,should,be,an,expected,failure
expectedfail,=,dict_match(settings,'','expectedfail')
#,.out,files,can,contain,regex,but,must,be,prefaced,with,REGEXP,as,the,first,line,in,the,file
try:
if,expectedOut[0],==,'REGEXP':
expectedOut,=,expectedOut[1:]
if,len(actual),<,len(expectedOut):
#,pad,actual,output,w/,empty,lines
for,i,in,range(len(expectedOut)-len(actual)):
actual.append('')
for,i,in,range(len(actual)):
if,not,re.search(expectedOut[i],,actual[i]):
raise,IndexError
else:
if,actual,!=,expectedOut:
raise,IndexError
#,test,passed,-,check,to,make,sure,its,not,an,expected,failure
if,expectedfail:
outputCalls.append((self.fail,(
testName,,'unexpected,.out,file,pass.,',+
',reason:,'+expectedfail,,self.unpassmsgs)))
lunpass,+=,1
else:
lpass,+=,1
except,IndexError:
#,test,failed
if,expectedfail:
outputCalls.append((self.fail,(
testName,
'expected,failure:,.out,file,does,not,match,stdout+stderr.,',+
',reason:,'+expectedfail,,self.expfailmsgs)))
lexpfail,+=,1
else:
outputCalls.append((self.fail,(testName,
'.out,file,does,not,match,output:\n%s.out,file,(expected):\n%s\nactual,output:\n%s',%,(root,,expectedOut,actual),
self.failmsgs)))
lfail,+=,1
return,lpass,,lfail,,lexpfail,,lunpass
def,check_exit_code(self,,exitcode,,root,,testName,,f,,err,,settings,,outputCalls):
'''Check,the,exitcode,for,a,test,against,any,expected,non-zero,exitcodes
Return,the,fail,and,the,expected,exitcode,if,non-zero
'''
lfail,=,0
lexpfail,=,0
expectedExitcode=0
if,isfile(root+'.err'):
#,.err,file,holds,both,the,expected,(non-catchable),error,(usually,a,VerifyError),and,the,expected,exitcode
expectedErr,expectedExitcode,=,self.loadExpectedErr(root+'.err')
#,check,the,expectedErr,-,error,is,always,the,last,(non-empty),line,of,output
actualErr,=,''
for,line,in,reversed(f):
#,When,running,in,--verifyonly,mode,,output,will,be,VERIFY,FAILED,instead,of,VerifyError
line,=,line.replace('VERIFY,FAILED',,'VerifyError')
#,make,sure,we,have,an,error
if,re.search('.*Error:.*',,line):
actualErr,=,self.getError(line.strip())
break
if,actualErr,!=,expectedErr:
outputCalls.append((self.fail,(testName,,'unexpected,error,message.,expected:,%s,actual:,%s'
%,(expectedErr,,actualErr),,self.failmsgs)))
lfail,+=,1
elif,isfile(root+".exitcode"):
try:
expectedExitcode=int(open(root+".exitcode").read())
except:
print("ERROR:,reading,exit,code,file,'%s',should,contain,an,integer")
res=dict_match(settings,'exitcode','expectedfail')
if,exitcode!=expectedExitcode:
res2=dict_match(settings,'exitcode','skip')
if,res2==None,and,res:
outputCalls.append((self.js_print,(testName,,'expected,failure:,exitcode,reason:,%s'
%,res,self.expfailmsgs)))
lexpfail,+=,1
elif,res2==None:
outputCalls.append((self.fail,(testName,,'unexpected,exit,code,expected:%d,actual:%d,Signal,Name:,%s,FAILED!'
%,(expectedExitcode,exitcode,getSignalName(abs(exitcode))),
self.failmsgs)))
outputmsg=''
for,l,in,f+err:
outputmsg+=l.strip()+'|'
outputCalls.append((self.fail,(testName,,'captured,output:,%s'
%,outputmsg,self.failmsgs)))
lfail+=,1
return,lfail,,lexpfail,,expectedExitcode
def,loadExpectedErr(self,,file):
try:
f,=,open(file,,'r')
expectedErr,=,''
expectedExitcode,=,0
for,line,in,f:
line,=,line.strip()
if,line,and,not,line.startswith('#'):
if,line.lower().startswith('exitcode:'):
try:
expectedExitcode,=,int(line.split(':')[1].strip())
except,ValueError:
pass
else:
#,check,to,see,if,line,is,a,number,-,if,so,set,expectedExitcode
try:
expectedExitcode,=,int(line)
except,ValueError:
expectedErr,=,line
f.close()
return,expectedErr,,expectedExitcode
except:
return,'Error,reading,.err,file:,%s',%,file,,0
def,getError(self,,line):
#,Parse,out,the,error,type,and,#,,but,strip,the,description
try:
return,':'.join(line.split(':')[0:2])
except:
return,line
#,custom,sort,on,filenames,passed,to,avmshell
#,puts,Interfaces,first,in,a,list,,followed,by,all,other,classes
def,sortInterfaces(self,,fileList):
result,=,''
files,=,fileList.split(),;
for,f,in,files:
if,'Interface',in,f:
result,+=,',%s',%,f
for,c,in,files:
if,'Interface',not,in,c:
result,+=,',%s',%,c
return,result
runtest,=,AcceptanceRuntest()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os,re,subprocess,os.path,sys,time
class,RunTestLib:
"base,class,to,run,cmdline,tests"
__shared_state,=,{}
def,__init__(self):
self.__dict__=self.__shared_state
if,self.__shared_state=={}:
self.firstinit()
def,firstinit(self):
self.verbose=True
self.avm=self.checkenv('AVM','path,to,vm,shell')
self.avmrd=self.checkenv('AVMRD','path,to,debugger,vm,shell',False)
self.asc=self.checkenv('ASC','path,to,actionscript,compiler,asc.jar')
self.gabc=self.checkenv('BUILTINABC','path,to,generated/builtin.abc')
self.sabc=self.checkenv('SHELLABC','path,to,generated/shell_toplevel.abc')
self.loadConfig()
def,loadConfig(self):
file=open('testconfig.txt')
self.testconfig={}
for,line,in,file:
if,len(line.strip())==0,or,line.strip().startswith('#'):
continue
fields=line.split(',')
if,len(fields)<3:
print("incorrect,number,of,fields,in,line,'%s'",%,line)
continue
self.testconfig[fields[0].strip()]=(fields[1].strip(),fields[2].strip())
def,checkenv(self,env,desc='',required=True):
val=None
if,env,in,os.environ:
val=os.environ[env]
if,val==None:
if,required:
print("required,environment,variable,'%s',is,not,set...,it,is,'%s'",%,(env,desc))
sys.exit(1)
print("optional,environment,variable,'%s',is,not,set,...,it,is,'%s'",%,(env,desc))
else:
val=val.strip()
return,val
def,run_command(self,cwd,command,input=None):
self.verbose_print(command)
if,cwd==None:
cwd=os.getcwd()
proc,=,subprocess.Popen(command.split(),,stdout=subprocess.PIPE,stdin=subprocess.PIPE,,shell=False,cwd=cwd)
if,input:
proc.stdin.write(input.encode('latin_1'))
(stdo,stde)=proc.communicate()
stdo,=,stdo.decode('latin_1'),if,stdo,else,None
stde,=,stde.decode('latin_1'),if,stde,else,None
return,(proc.returncode,stdo,stde)
def,run_command_async(self,cwd=None,command=None,input=None,sleep=None):
self.verbose_print(command)
if,cwd==None:
cwd=os.getcwd()
proc,=,subprocess.Popen(command.split(),,stdout=subprocess.PIPE,stdin=subprocess.PIPE,,shell=False,cwd=cwd)
if,input!=None:
proc.stdin.write(input)
if,sleep!=None:
time.sleep(sleep)
return,proc
def,compile(self,file,imports=None,args=None):
print("compiling,%s",%,file)
if,imports==None:
imports="-import,%s,-import,%s",%,(self.gabc,self.sabc)
if,args==None:
args=''
cmd="java,-jar,%s,%s,%s,%s",%,(self.asc,imports,args,file)
cwd=os.getcwd()
(exitcode,stdo,stde)=self.run_command(cwd,cmd)
if,exitcode!=0:
print("ERROR:,compile,error\nstdout=%s\nstderr-%s\n",%,(stdo,stde))
sys.exit(1)
return,(exitcode,stdo,stde)
def,set_verbose(self,v):
self.verbose=v
def,verbose_print(self,msg):
if,self.verbose:
print(msg)
def,replace_crlf(self,s):
return,s.replace('\r','<cr>').replace('\n','<lf>')
def,run_test(self,name,command=None,cwd=None,input=None,expectedout=None,expectederr=None,expectedcode=None,actualcode=None,actualout=None,actualerr=None):
if,command!=None:
(actualcode,actualout,actualerr)=self.run_command(cwd,command,input)
result=True
msg=''
if,cwd:
msg+="cwd:,%s\n",%,cwd
msg+="command:,%s\n",%,command
if,input:
msg+="input:,%s\n",%,input
if,expectedcode!=None:
if,expectedcode==actualcode:
msg+=',exit,code,matched,%d\n',%,actualcode
else:
result=False
msg+=",exit,code,expected,'%d',got,'%d'\n",%,(expectedcode,actualcode)
elif,self.verbose,and,actualcode!=None:
msg+=",exit,code=%d\n",%,actualcode
if,expectedout!=None:
for,eout,in,expectedout:
if,re.search(eout,actualout):
msg+=",output,matched,expected,'%s'\n",%,eout
else:
result=False
msg+=",output,failed,to,match,'%s'\n",%,(eout)
if,(self.verbose,or,result==False),and,actualout!=None:
if,len(actualout)>80:
msg+="[OUTPUT,START]\n%s\n[OUTPUT,END]\n",%,actualout
else:
msg+="output='%s'\n",%,actualout
if,expectederr!=None:
for,eerr,in,expectederr:
if,p1.search(eerr,actualerr):
msg+=",error,matched,expected,'%s'\n",%,eerr
else:
result=False
msg+=",error,failed,to,match,'%s'\n",%,(eerr)
if,(self.verbose,or,result==False),and,actualerr!=None:
if,len(actualerr)>80:
msg+="[START,STDERR]\n%s\n[END,STDERR]\n",%,actualerr
else:
msg+="stderr='%s'\n",%,actualerr
msg=name,+,",",+,msg
if,os.path.exists("%s.output"%name):
os.remove("%s.output"%name)
type='normal'
if,name,in,self.testconfig:
(type,notes)=self.testconfig[name]
if,type=='skip':
msg=msg,+,",SKIPPED,,result,%s",%,result
print("%-30s,SKIPPED,,result,%s",%,(name,result))
elif,result,and,type=='normal':
msg=msg,+,",PASSED"
print("%-30s,PASSED",%,name)
elif,result,and,type=='expectfail':
msg=msg,+,",UNEXPECTED,PASS,:,%s",%,notes
print("%-30s,UNEXPECTED,PASS,:,%s",%,(name,name))
elif,result==False,,and,type=='expectfail':
msg=msg,+,",EXPECTED,FAIL,",+,notes
print("%-30s,EXPECTED,FAIL,,see,%s.output",%,(name,name))
else:
msg=msg,+,",FAILED"
print("%-30s,FAILED,,see,%s.output",%,(name,name))
if,result==False:
out_file=open("%s.output"%name,"w")
out_file.write(msg)
out_file.close()
if,__name__,==,"__main__":
rt=RunTestLib()
#,,,,rt.run_test("test1",avm,expectedcode=1,expectedout=['avmplus,shell','\[-Dforcemir]'])
rt.run_command(None,'%s,-d,debug.abc',%,rt.avm,'quit\n')
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
from,os,import,listdir
import,testAvmShell,testDebugger,testShellSystem
class,RunTests,(RunTestLib):
def,compileAll(self):
print("compile,all")
#,for,testShellSystem.py
r.compile("testdata/exec.as")
r.compile("testdata/exit.as")
r.compile("testdata/readline.as")
r.compile("testdata/trace1.as")
r.compile("testdata/write.as")
r.compile("testdata/argv.as")
#,for,testAvmShell.py
r.compile("testdata/sleep.as")
#,for,testDebuggerShell.py
r.compile("testdata/debug.as",None,"-d")
#,for,testMemstats.py
r.compile("testdata/memstats.as",None)
#,for,testLanguage.py
r.compile("testdata/rt_error.as",None)
def,runAll(self):
list=os.listdir(".")
for,f,in,list:
if,re.match("test.*\.py$",f):
if,f,in,self.testconfig:
(type,notes)=self.testconfig[f]
if,type=='skip':
print("%-30s,SKIPPED,,%s",%,(f,notes))
continue
cl=f[0:f.rindex('.')]
exec("import,",+,cl)
print("%s.run()",%,cl)
exec(cl,+,".run()")
if,__name__,==,"__main__":
r=RunTests()
r.compileAll()
r.runAll()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,template,for,testcase,in,cmdline,testsuite
#,the,testsuite,is,for,testing,the,avmshell,or,other,executables,,works,by,creating,a,python,script,containing:
#,,-,the,executable,and,any,arguments
#,,-,optionally,any,input,text,to,be,sent,to,the,process
#,,-,optionally,a,list,of,string,regexp,pattern,matched,against,the,stdout
#,,-,optionally,a,list,of,string,regexp,pattern,matched,against,the,stdin
#,,-,optionally,the,exit,code,to,verify
#,,
#,the,cmdutils.py,contains,utilities
#,below,is,a,template
#,import,the,utilities,from,cmdutils.py
from,cmdutils,import,*
#,define,a,run(),function,,this,will,be,called,by,the,runtests.py
def,run():
#,instantiate,the,RunTestLib,class,,it,will,contain,environment,vars,AVM,AVMRD,ASC,GLOBALABC,SHELLABC
r=RunTestLib()
#,create,any,number,of,testcases
#,,,,r.run_test(
#,,,,,,,,,,,,,,,,name='testname',
#,,,,,,,,,,,,,,,,command='the,executable,and,any,arguments',
#,,optional,,,,,,,,,,,,,,expectedcode=1,
#,,optional,,,,,,,,,,,,,,expectedout=['Error,#1502']
#,,optional,,,,,,,,,,,,,,expectederr=[]
#,,optional,,,,,,,,,,,,,,cwd='testdata'
#,,,,,,,,,,,,,,,)
r.run_test(name='shell,usage',
command=r.avm,
expectedcode=1,
expectedout=['.*\[-Ojit\].*use,jit,always.*',
'.*\[--\],application,args'
]
)
#,by,specifying,a,main,can,run,this,test,individually
if,__name__,==,'__main__':
r=RunTestLib()
#,,,if,any,testdata/.as,files,need,to,be,compiled,to,.abc,use,the,.compile,method
#,,,,r.compile("testdata/sleep.as")
run()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
r.run_test('shell,-Dtimeout','%s,-Dtimeout,testdata/sleep.abc',%,r.avm,expectedcode=1,expectedout=['Error,#1502'])
if,__name__,==,'__main__':
r=RunTestLib()
r.compile("testdata/sleep.as")
run()
#!/usr/bin/env,python
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
if,r.avmrd==None:
print("environment,variable,'AVMRD',is,not,set")
print("SKIPPED,all,tests")
return
r.run_test(
'debugger,basic',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='quit\n',
expectedout=['6:,,public,class,debug','(asdb)']
)
r.run_test(
'debugger,list',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='list\nlist,10\nquit\n',
expectedout=['10:,,,,,public,function,pubfunc','12:[,]+privfunc\(\),;']
)
r.run_test(
'debugger,break',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,11\ninfo,break\nquit\n',
expectedout=['Breakpoint,1:,file,testdata.debug.as,,11.']
)
r.run_test(
'debugger,stacktrace',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='bt\nquit\n',
expectedout=['#0,,,global.*global\$init']
)
r.run_test(
'debugger,break2',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,11\ndelete,1\nbreak,1\nbreak,15\ninfo,break\ncontinue\nquit\n',
expectedout=['Breakpoint,1,deleted.','2,at,testdata.debug.as:15','Could,not,locate,specified,line.']
)
r.run_test(
'debugger,next',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,8\ncontinue\nnext\nstep\nquit\n',
expectedout=['8:.*print\("in,constructor\(\)"\),;','9:.*}']
)
r.run_test(
'debugger,locals',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,19\ncontinue\nnext\ninfo,locals\nnext\ninfo,locals\nquit\n',
expectedout=['local1,=,undefined','local2,=,10','local2,=,15']
)
r.run_test(
'debugger,arguments',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,19\ncontinue\nnext\ninfo,arguments\nquit\n',
expectedout=['arg1,=,110','arg2,=,115']
)
r.run_test(
'debugger,exception',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='continue\nquit\n',
expectedout=['Exception,has,been,thrown:']
)
r.run_test(
'debugger,where',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,19\ncontinue\nwhere\nquit\n',
expectedout=['locals\(arg1=110,arg2=115\),at,testdata.debug.as:19','init\(\),at,testdata.debug.as:39']
)
r.run_test(
'debugger,bt',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,19\ncontinue\nbt\nquit\n',
expectedout=['locals\(arg1=110,arg2=115\),at,testdata.debug.as:19','init\(\),at,testdata.debug.as:39']
)
r.run_test(
'debugger,finish',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,19\ncontinue\nfinish\nwhere\nquit\n',
expectedout=['#0,,,global@[0-9a-z]+.global\$init\(\),at,testdata.debug.as:39']
)
r.run_test(
'debugger,set',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='break,19\ncontinue\nnext\nset,local2,=,5\ninfo,locals\nquit\n',
expectedout=['local2,=,5']
)
r.run_test(
'debugger,print',
'%s,-d,testdata/debug.abc'%r.avmrd,
input='print,Function.\nquit\n',
expectedout=['const,length,=,1','function,get,prototype\(\),=,Function']
)
if,__name__,==,'__main__':
r=RunTestLib()
r.compile("testdata/debug.as",None,"-d")
run()
#!/usr/bin/env,python
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
if,r.avmrd==None:
print("environment,variable,'AVMRD',is,not,set")
print("SKIPPED,all,tests")
return
r.run_test(
'french',
'%s,-Dlanguage,fr,testdata/rt_error.abc'%r.avmrd,
expectedout=['RangeError:,Error,#1002:,L\'argument,precision,doit']
)
r.run_test(
'italian',
'%s,-Dlanguage,it,testdata/rt_error.abc'%r.avmrd,
expectedout=['RangeError:,Error,#1002:,L\'argomento,precision,deve,essere,compreso,tra']
)
r.run_test(
'english',
'%s,-Dlanguage,en,testdata/rt_error.abc'%r.avmrd,
expectedout=['RangeError:,Error,#1002:,Number.toPrecision,has,a,range,of,1,to,21.']
)
if,__name__,==,'__main__':
r=RunTestLib()
r.compile("testdata/rt_Error.as",None,"")
run()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,import,the,utilities,from,cmdutils.py
import,os
from,cmdutils,import,*
def,run():
r=RunTestLib()
r.run_test(name='memstats',
command="%s,-memstats,testdata/memstats.abc",%,r.avm,
expectedout=[
'gross,stats',
'managed,overhead',
'gross,stats,end',
'sweep\\([0-9]+\\),reclaimed,[0-9]+,whole,pages'
]
)
if,os.name!='nt':
print("pyspy,,,,,requires,windows,named,pipes,,does,not,work,with,cygwin,python,or,non-windows,operating,systems")
else:
failed=False
try:
import,win32event
import,win32pipe
import,win32file
except:
failed=True
print("pyspy,failed,to,load,python,win32,extension,,FAILED")
if,failed==False:
os.putenv('MMGC_PROFILE','1')
proc=r.run_command_async(command="%s,testdata/memstats.abc",%,r.avm,sleep=2)
#,pyspy,source,,,,,,,
e,=,"MMgc::MemoryProfiler::DumpFatties"
h,=,None
try:
h,=,win32event.OpenEvent(win32event.EVENT_MODIFY_STATE,,False,,e)
except,Exception:
print("Error:,No,registered,event:,%s,FAILED!",%,e)
sys.exit(1)
win32event.SetEvent(h)
pipe,=,"\\\\.\\pipe\MMgc_Spy",
readHandle,=,None
while,True:
try:
readHandle,=,win32file.CreateFile(pipe,,win32file.GENERIC_READ,,0,,None,,win32file.OPEN_EXISTING,,0,,None)
win32pipe.WaitNamedPipe(pipe,,100)
except,Exception:
pass
if,readHandle:
break
while,True:
try:
data,=,win32file.ReadFile(readHandle,,128)
sys.stdout.write(data[1])
except:
break
#,by,specifying,a,main,can,run,this,test,individually
if,__name__,==,'__main__':
r=RunTestLib()
r.compile("testdata/memstats.as",None,"-d")
run()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
r.run_test(
name="mmfx_new_array_opts_canFail",
command="%s,-Dselftest=mmgc,mmfx_array,mmfx_new_array_opts_canFail,-memlimit,1024",%,r.avm,
expectedout=["['start',,'mmgc',,'mmfx_array']",
"['test',,'mmgc',,'mmfx_array',,'mmfx_new_array_opts_canFail']",
"['pass',,'mmgc',,'mmfx_array',,'mmfx_new_array_opts_canFail']",
"['end',,'mmgc',,'mmfx_array']"]
)
r.run_test(
name="mmfx_new_array_opts_oom",
command="%s,-Dselftest=mmgc,mmfx_array,mmfx_new_array_opts_oom,-memlimit,1024",%,r.avm,
expectedcode=128
)
r.run_test(
name="mmfx_new_array_oom",
command="%s,-Dselftest=mmgc,mmfx_array,mmfx_new_array_oom,-memlimit,1024",%,r.avm,
expectedcode=128
)
if,__name__,==,'__main__':
r=RunTestLib()
run()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
r.run_test('trace','%s,testdata/trace1.abc',,%,r.avm,expectedout=['single,line','array,line1,array,line2','arg1,arg2,arg3','null'])
r.run_test('write','%s,testdata/write.abc',%r.avm,expectedout=['part1part2'])
r.run_test('exit','%s,testdata/exit.abc',%r.avm,expectedcode=5)
r.run_test('readline','%s,testdata/readline.abc',%r.avm,input='test,input\n',expectedout=['line=test,input'])
r.run_test('exec','%s,testdata/exec.abc',%r.avm,expectedout=['result=0'])
r.run_test('argv,0','%s,testdata/argv.abc,--',%r.avm,expectedout=['argv.length=0'])
r.run_test('argv,n','%s,testdata/argv.abc,--,zero,one,two"',%r.avm,expectedout=['argv.length=3','argv\[0\]=zero','argv\[1\]=one','argv\[2\]=two'])
#,Bug:,https://bugzilla.mozilla.org/show_bug.cgi?id=507454
#,,,,,,avmshell,commandline,args,with,values,can't,assume,the,values,are,present
#,,,,,,Prior,to,fix,the,shell,would,segfault,on,these,tests
r.run_test('memlimit,no,value','%s,-memlimit',%r.avm,expectedout=['Invalid,GC,option:,-memlimit'],expectedcode=1)
r.run_test('load,no,value','%s,-load',%r.avm,expectedout=['Invalid,GC,option:,-load'],expectedcode=1)
r.run_test('gcwork,no,value','%s,-gcwork',%r.avm,expectedout=['Invalid,GC,option:,-gcwork'],expectedcode=1)
r.run_test('cache_bindings,no,value','%s,-cache_bindings',%r.avm,expectedout=['Unrecognized,option,-cache_bindings'],expectedcode=1)
r.run_test('cache_metadata,no,value','%s,-cache_metadata',%r.avm,expectedout=['Unrecognized,option,-cache_metadata'],expectedcode=1)
r.run_test('cache_methods,no,value','%s,-cache_methods',%r.avm,expectedout=['Unrecognized,option,-cache_methods'],expectedcode=1)
r.run_test('stack,no,value','%s,-stack',%r.avm,expectedout=['Unrecognized,option,-stack'],expectedcode=1)
r.run_test('gcstack,no,value','%s,-gcstack',%r.avm,expectedout=['Unrecognized,option,-gcstack'],expectedcode=1)
if,r.avmrd!=None:
r.run_test('Dastrace,no,value','%s,-Dastrace',%r.avmrd,expectedout=['Unrecognized,option,-Dastrace'],expectedcode=1)
r.run_test('Dlanguage,no,value','%s,-Dlanguage',%r.avmrd,expectedout=['Unrecognized,option,-Dlanguage'],expectedcode=1)
if,__name__,==,'__main__':
r=RunTestLib()
r.compile("testdata/exec.as")
r.compile("testdata/exit.as")
r.compile("testdata/readline.as")
r.compile("testdata/trace1.as")
r.compile("testdata/write.as")
r.compile("testdata/argv.as")
run()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
r.run_test('VMbaseConcurrency(-Dselftest=vmbase,concurrency)','%s,-Dselftest=vmbase,concurrency',%,r.avm,expectedcode=0,
expectedout=[
"\['start',,'vmbase',,'concurrency'\]",
"\['test',,'vmbase',,'concurrency',,'mutexes'\]",
"\['pass',,'vmbase',,'concurrency',,'mutexes'\]",
"\['test',,'vmbase',,'concurrency',,'conditions'\]",
"\['pass',,'vmbase',,'concurrency',,'conditions'\]",
"\['test',,'vmbase',,'concurrency',,'atomic_counter'\]",
"\['pass',,'vmbase',,'concurrency',,'atomic_counter'\]",
"\['test',,'vmbase',,'concurrency',,'compare_and_swap_without_barrier'\]",
"\['pass',,'vmbase',,'concurrency',,'compare_and_swap_without_barrier'\]",
"\['test',,'vmbase',,'concurrency',,'compare_and_swap_with_barrier'\]",
"\['pass',,'vmbase',,'concurrency',,'compare_and_swap_with_barrier'\]",
"\['test',,'vmbase',,'concurrency',,'memory_barrier'\]",
"\['pass',,'vmbase',,'concurrency',,'memory_barrier'\]",
"\['test',,'vmbase',,'concurrency',,'condition_with_wait'\]",
"\['pass',,'vmbase',,'concurrency',,'condition_with_wait'\]",
"\['test',,'vmbase',,'concurrency',,'sleep'\]",
"\['pass',,'vmbase',,'concurrency',,'sleep'\]",
"\['test',,'vmbase',,'concurrency',,'vmthreadlocal'\]",
"\['pass',,'vmbase',,'concurrency',,'vmthreadlocal'\]",
"\['test',,'vmbase',,'concurrency',,'join'\]",
"\['pass',,'vmbase',,'concurrency',,'join'\]",
"\['end',,'vmbase',,'concurrency'\]"
]
)
if,__name__,==,'__main__':
r=RunTestLib()
run()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
r.run_test('VMbaseSafepoints(-Dselftest=vmbase,safepoints)','%s,-Dselftest=vmbase,safepoints',%,r.avm,expectedcode=0,
expectedout=[
"\['start',,'vmbase',,'safepoints'\]",
"\['test',,'vmbase',,'safepoints',,'simple'\]",
"\['pass',,'vmbase',,'safepoints',,'simple'\]",
"\['test',,'vmbase',,'safepoints',,'producer_consumer'\]",
"\['pass',,'vmbase',,'safepoints',,'producer_consumer'\]",
"\['test',,'vmbase',,'safepoints',,'nested_producer_consumer'\]",
"\['pass',,'vmbase',,'safepoints',,'nested_producer_consumer'\]",
"\['end',,'vmbase',,'safepoints'\]"
]
)
if,__name__,==,'__main__':
r=RunTestLib()
run()
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,cmdutils,import,*
import,os
def,run():
r=RunTestLib()
r.run_test('VMPIThreads(-Dselftest=vmpi,threads)','%s,-Dselftest=vmpi,threads',%,r.avm,expectedcode=0,
expectedout=[
"\['start',,'vmpi',,'threads'\]",
"\['test',,'vmpi',,'threads',,'mutexes'\]",
"\['pass',,'vmpi',,'threads',,'mutexes'\]",
"\['test',,'vmpi',,'threads',,'conditions'\]",
"\['pass',,'vmpi',,'threads',,'conditions'\]",
"\['test',,'vmpi',,'threads',,'atomic_increment_without_barrier'\]",
"\['pass',,'vmpi',,'threads',,'atomic_increment_without_barrier'\]",
"\['test',,'vmpi',,'threads',,'atomic_decrement_without_barrier'\]",
"\['pass',,'vmpi',,'threads',,'atomic_decrement_without_barrier'\]",
"\['test',,'vmpi',,'threads',,'compare_and_swap_without_barrier'\]",
"\['pass',,'vmpi',,'threads',,'compare_and_swap_without_barrier'\]",
"\['test',,'vmpi',,'threads',,'atomic_increment_with_barrier'\]",
"\['pass',,'vmpi',,'threads',,'atomic_increment_with_barrier'\]",
"\['test',,'vmpi',,'threads',,'atomic_decrement_with_barrier'\]",
"\['pass',,'vmpi',,'threads',,'atomic_decrement_with_barrier'\]",
"\['test',,'vmpi',,'threads',,'compare_and_swap_with_barrier'\]",
"\['pass',,'vmpi',,'threads',,'compare_and_swap_with_barrier'\]",
"\['test',,'vmpi',,'threads',,'memory_barrier'\]",
"\['pass',,'vmpi',,'threads',,'memory_barrier'\]",
"\['test',,'vmpi',,'threads',,'try_lock'\]",
"\['pass',,'vmpi',,'threads',,'try_lock'\]",
"\['test',,'vmpi',,'threads',,'condition_with_wait'\]",
"\['pass',,'vmpi',,'threads',,'condition_with_wait'\]",
"\['test',,'vmpi',,'threads',,'sleep'\]",
"\['pass',,'vmpi',,'threads',,'sleep'\]",
"\['test',,'vmpi',,'threads',,'detach'\]",
"\['pass',,'vmpi',,'threads',,'detach'\]",
"\['test',,'vmpi',,'threads',,'thread_attributes'\]",
"\['pass',,'vmpi',,'threads',,'thread_attributes'\]",
"\['end',,'vmpi',,'threads'\]"
]
)
if,__name__,==,'__main__':
r=RunTestLib()
run()
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,The,testindex,file,contains,a,list,of,test,results,that,are,used,to,normalize
#,all,current,results,using,these,provided,values.,,This,enables,us,to,equally
#,weight,the,results,of,each,test,irrespective,of,the,actual,test,runtime.
#,In,order,to,simplify,the,importing,and,processing,of,this,file,,the,values,are
#,kept,in,a,python,dictionary,which,MUST,be,named,testIndexDict
#,The,dictionary,format,is:
#,'testName':{'metric':value}
#,These,values,were,generated,on,asteammac16,(10.60.146.16)
#,see,https://zerowing.corp.adobe.com/display/FlashPlayer/BuildBot+Machines#BuildBotMachines-asteammac16
#,for,machine,details
testIndexDict,=,{'asmicro/alloc-1.as':,{'memory':,300.0,,'v8':,25},
'asmicro/alloc-10.as':,{'memory':,300.0,,'v8':,6},
'asmicro/alloc-11.as':,{'memory':,300.0,,'v8':,7},
'asmicro/alloc-12.as':,{'memory':,300.0,,'v8':,4},
'asmicro/alloc-13.as':,{'memory':,300.0,,'v8':,63},
'asmicro/alloc-14.as':,{'memory':,556.0,,'v8':,42},
'asmicro/alloc-2.as':,{'memory':,300.0,,'v8':,12},
'asmicro/alloc-3.as':,{'memory':,300.0,,'v8':,7},
'asmicro/alloc-4.as':,{'memory':,300.0,,'v8':,27},
'asmicro/alloc-5.as':,{'memory':,300.0,,'v8':,21},
'asmicro/alloc-6.as':,{'memory':,300.0,,'v8':,45},
'asmicro/alloc-7.as':,{'memory':,300.0,,'v8':,20},
'asmicro/alloc-8.as':,{'memory':,300.0,,'v8':,7},
'asmicro/alloc-9.as':,{'memory':,300.0,,'v8':,7},
'asmicro/array-1.as':,{'memory':,288.0,,'v8':,1173},
'asmicro/array-2.as':,{'memory':,288.0,,'v8':,246},
'asmicro/array-pop-1.as':,{'memory':,300.0,,'v8':,169},
'asmicro/array-push-1.as':,{'memory':,288.0,,'v8':,164},
'asmicro/array-shift-1.as':,{'memory':,300.0,,'v8':,75},
'asmicro/array-slice-1.as':,{'memory':,300.0,,'v8':,7},
'asmicro/array-sort-1.as':,{'memory':,300.0,,'v8':,16},
'asmicro/array-sort-2.as':,{'memory':,300.0,,'v8':,1},
'asmicro/array-sort-3.as':,{'memory':,2969.5999999999999,,'v8':,12},
'asmicro/array-sort-4.as':,{'memory':,2969.5999999999999,,'v8':,5},
'asmicro/array-unshift-1.as':,{'memory':,288.0,,'v8':,88},
'asmicro/closedvar-read-1.as':,{'memory':,288.0,,'v8':,803},
'asmicro/closedvar-write-1.as':,{'memory':,288.0,,'v8':,818},
'asmicro/closedvar-write-2.as':,{'memory':,288.0,,'v8':,812},
'asmicro/do-1.as':,{'memory':,288.0,,'v8':,1708},
'asmicro/for-1.as':,{'memory':,288.0,,'v8':,478},
'asmicro/for-2.as':,{'memory':,288.0,,'v8':,313},
'asmicro/for-3.as':,{'memory':,288.0,,'v8':,314},
'asmicro/for-in-1.as':,{'memory':,288.0,,'v8':,229},
'asmicro/for-in-2.as':,{'memory':,288.0,,'v8':,147},
'asmicro/funcall-1.as':,{'memory':,288.0,,'v8':,118},
'asmicro/funcall-2.as':,{'memory':,288.0,,'v8':,83},
'asmicro/funcall-3.as':,{'memory':,288.0,,'v8':,106},
'asmicro/funcall-4.as':,{'memory':,300.0,,'v8':,60},
'asmicro/globalvar-read-1.as':,{'memory':,288.0,,'v8':,765},
'asmicro/globalvar-write-1.as':,{'memory':,288.0,,'v8':,765},
'asmicro/isNaN-1.as':,{'memory':,288.0,,'v8':,266},
'asmicro/lookup-array-fetch-1.as':,{'memory':,2150.4000000000001,,'v8':,258},
'asmicro/lookup-array-in-1.as':,{'memory':,2150.4000000000001,,'v8':,373},
'asmicro/lookup-negindex-array-1.as':,{'memory':,288.0,,'v8':,225},
'asmicro/lookup-negindex-array-2.as':,{'memory':,292.0,,'v8':,194},
'asmicro/lookup-negindex-object-1.as':,{'memory':,288.0,,'v8':,233},
'asmicro/lookup-negindex-object-2.as':,{'memory':,292.0,,'v8':,228},
'asmicro/lookup-object-fetch-1.as':,{'memory':,2867.1999999999998,,'v8':,298},
'asmicro/lookup-object-in-1.as':,{'memory':,2867.1999999999998,,'v8':,336},
'asmicro/number-toString-1.as':,{'memory':,300.0,,'v8':,2},
'asmicro/number-toString-2.as':,{'memory':,300.0,,'v8':,48},
'asmicro/oop-1.as':,{'memory':,292.0,,'v8':,1},
'asmicro/parseFloat-1.as':,{'memory':,288.0,,'v8':,34},
'asmicro/parseInt-1.as':,{'memory':,288.0,,'v8':,49},
'asmicro/regex-exec-1.as':,{'memory':,300.0,,'v8':,27},
'asmicro/regex-exec-2.as':,{'memory':,300.0,,'v8':,33},
'asmicro/regex-exec-3.as':,{'memory':,300.0,,'v8':,57},
'asmicro/regex-exec-4.as':,{'memory':,300.0,,'v8':,129},
'asmicro/restarg-1.as':,{'memory':,288.0,,'v8':,360},
'asmicro/restarg-2.as':,{'memory':,288.0,,'v8':,260},
'asmicro/restarg-3.as':,{'memory':,300.0,,'v8':,21},
'asmicro/restarg-4.as':,{'memory':,300.0,,'v8':,15},
'asmicro/string-casechange-1.as':,{'memory':,300.0,,'v8':,16},
'asmicro/string-casechange-2.as':,{'memory':,300.0,,'v8':,16},
'asmicro/string-charAt-1.as':,{'memory':,288.0,,'v8':,114},
'asmicro/string-charAt-2.as':,{'memory':,300.0,,'v8':,33},
'asmicro/string-charCodeAt-1.as':,{'memory':,288.0,,'v8':,99},
'asmicro/string-charCodeAt-2.as':,{'memory':,288.0,,'v8':,89},
'asmicro/string-fromCharCode-1.as':,{'memory':,288.0,,'v8':,160},
'asmicro/string-fromCharCode-2.as':,{'memory':,300.0,,'v8':,40},
'asmicro/string-indexOf-1.as':,{'memory':,288.0,,'v8':,70},
'asmicro/string-indexOf-2.as':,{'memory':,288.0,,'v8':,80},
'asmicro/string-indexOf-3.as':,{'memory':,288.0,,'v8':,45},
'asmicro/string-lastIndexOf-1.as':,{'memory':,288.0,,'v8':,358},
'asmicro/string-lastIndexOf-2.as':,{'memory':,288.0,,'v8':,67},
'asmicro/string-lastIndexOf-3.as':,{'memory':,288.0,,'v8':,289},
'asmicro/string-slice-1.as':,{'memory':,300.0,,'v8':,87},
'asmicro/string-split-1.as':,{'memory':,300.0,,'v8':,4},
'asmicro/string-split-2.as':,{'memory':,300.0,,'v8':,4},
'asmicro/string-substring-1.as':,{'memory':,300.0,,'v8':,72},
'asmicro/switch-1.as':,{'memory':,288.0,,'v8':,441},
'asmicro/switch-2.as':,{'memory':,288.0,,'v8':,16},
'asmicro/switch-3.as':,{'memory':,288.0,,'v8':,20},
'asmicro/try-1.as':,{'memory':,288.0,,'v8':,97},
'asmicro/try-2.as':,{'memory':,300.0,,'v8':,7},
'asmicro/try-3.as':,{'memory':,300.0,,'v8':,24},
'asmicro/vector-push-1.as':,{'memory':,288.0,,'v8':,15},
'asmicro/while-1.as':,{'memory':,288.0,,'v8':,478},
'jsbench/Crypt.as':,{'memory':,43008.0,,'time':,19018},
'jsbench/Euler.as':,{'memory':,4812.8000000000002,,'time':,16512},
'jsbench/FFT.as':,{'memory':,32358.400000000001,,'time':,18957},
'jsbench/HeapSort.as':,{'memory':,4710.3999999999996,,'time':,7630},
'jsbench/LUFact.as':,{'memory':,31744.0,,'time':,18444},
'jsbench/Moldyn.as':,{'memory':,688.0,,'time':,24964},
'jsbench/RayTracer.as':,{'memory':,1024.0,,'time':,19940},
'jsbench/SOR.as':,{'memory':,52019.199999999997,,'time':,78922},
'jsbench/Series.as':,{'memory':,9011.2000000000007,,'time':,21067},
'jsbench/SparseMatmult.as':,{'memory':,15155.200000000001,,'time':,46434},
'jsbench/typed/Crypt.as':,{'memory':,35430.400000000001,,'time':,11939},
'jsbench/typed/Euler.as':,{'memory':,1433.5999999999999,,'time':,22814},
'jsbench/typed/FFT.as':,{'memory':,300.0,,'time':,15636},
'jsbench/typed/HeapSort.as':,{'memory':,4198.3999999999996,,'time':,5251},
'jsbench/typed/LUFact.as':,{'memory':,2048.0,,'time':,25497},
'jsbench/typed/Moldyn.as':,{'memory':,492.0,,'time':,8809},
'jsbench/typed/RayTracer.as':,{'memory':,416.0,,'time':,3288},
'jsbench/typed/SOR.as':,{'memory':,8089.6000000000004,,'time':,64754},
'jsbench/typed/Series.as':,{'memory':,420.0,,'time':,17418},
'jsbench/typed/SparseMatmult.as':,{'memory':,4812.8000000000002,
'time':,12284},
'jsmicro/alloc-1.as':,{'memory':,300.0,,'v8':,22},
'jsmicro/alloc-10.as':,{'memory':,300.0,,'v8':,6},
'jsmicro/alloc-11.as':,{'memory':,300.0,,'v8':,7},
'jsmicro/alloc-12.as':,{'memory':,300.0,,'v8':,5},
'jsmicro/alloc-13.as':,{'memory':,300.0,,'v8':,42},
'jsmicro/alloc-14.as':,{'memory':,972.0,,'v8':,32},
'jsmicro/alloc-2.as':,{'memory':,300.0,,'v8':,11},
'jsmicro/alloc-3.as':,{'memory':,300.0,,'v8':,7},
'jsmicro/alloc-4.as':,{'memory':,300.0,,'v8':,23},
'jsmicro/alloc-5.as':,{'memory':,300.0,,'v8':,19},
'jsmicro/alloc-6.as':,{'memory':,300.0,,'v8':,33},
'jsmicro/alloc-7.as':,{'memory':,300.0,,'v8':,20},
'jsmicro/alloc-8.as':,{'memory':,300.0,,'v8':,7},
'jsmicro/alloc-9.as':,{'memory':,300.0,,'v8':,7},
'jsmicro/array-1.as':,{'memory':,288.0,,'v8':,130},
'jsmicro/array-2.as':,{'memory':,288.0,,'v8':,108},
'jsmicro/array-pop-1.as':,{'memory':,300.0,,'v8':,24},
'jsmicro/array-push-1.as':,{'memory':,288.0,,'v8':,16},
'jsmicro/array-shift-1.as':,{'memory':,300.0,,'v8':,22},
'jsmicro/array-slice-1.as':,{'memory':,300.0,,'v8':,6},
'jsmicro/array-sort-1.as':,{'memory':,300.0,,'v8':,15},
'jsmicro/array-sort-2.as':,{'memory':,300.0,,'v8':,1},
'jsmicro/array-sort-3.as':,{'memory':,2969.5999999999999,,'v8':,12},
'jsmicro/array-sort-4.as':,{'memory':,3072.0,,'v8':,4},
'jsmicro/array-unshift-1.as':,{'memory':,300.0,,'v8':,11},
'jsmicro/closedvar-read-1.as':,{'memory':,288.0,,'v8':,155},
'jsmicro/closedvar-write-1.as':,{'memory':,288.0,,'v8':,137},
'jsmicro/closedvar-write-2.as':,{'memory':,288.0,,'v8':,137},
'jsmicro/do-1.as':,{'memory':,288.0,,'v8':,160},
'jsmicro/for-1.as':,{'memory':,288.0,,'v8':,156},
'jsmicro/for-2.as':,{'memory':,300.0,,'v8':,67},
'jsmicro/for-3.as':,{'memory':,300.0,,'v8':,29},
'jsmicro/for-in-1.as':,{'memory':,288.0,,'v8':,108},
'jsmicro/for-in-2.as':,{'memory':,288.0,,'v8':,83},
'jsmicro/funcall-1.as':,{'memory':,288.0,,'v8':,66},
'jsmicro/funcall-2.as':,{'memory':,288.0,,'v8':,57},
'jsmicro/funcall-3.as':,{'memory':,288.0,,'v8':,57},
'jsmicro/funcall-4.as':,{'memory':,300.0,,'v8':,59},
'jsmicro/globalvar-read-1.as':,{'memory':,288.0,,'v8':,152},
'jsmicro/globalvar-write-1.as':,{'memory':,288.0,,'v8':,137},
'jsmicro/isNaN-1.as':,{'memory':,288.0,,'v8':,93},
'jsmicro/lookup-array-fetch-1.as':,{'memory':,2150.4000000000001,,'v8':,237},
'jsmicro/lookup-array-in-1.as':,{'memory':,2150.4000000000001,,'v8':,346},
'jsmicro/lookup-object-fetch-1.as':,{'memory':,2867.1999999999998,,'v8':,254},
'jsmicro/lookup-object-in-1.as':,{'memory':,2867.1999999999998,,'v8':,296},
'jsmicro/number-toString-1.as':,{'memory':,300.0,,'v8':,2},
'jsmicro/number-toString-2.as':,{'memory':,300.0,,'v8':,35},
'jsmicro/oop-1.as':,{'memory':,292.0,,'v8':,1},
'jsmicro/parseFloat-1.as':,{'memory':,300.0,,'v8':,18},
'jsmicro/parseInt-1.as':,{'memory':,288.0,,'v8':,46},
'jsmicro/regex-exec-1.as':,{'memory':,300.0,,'v8':,23},
'jsmicro/regex-exec-2.as':,{'memory':,300.0,,'v8':,28},
'jsmicro/regex-exec-3.as':,{'memory':,300.0,,'v8':,49},
'jsmicro/regex-exec-4.as':,{'memory':,300.0,,'v8':,102},
'jsmicro/string-casechange-1.as':,{'memory':,300.0,,'v8':,9},
'jsmicro/string-casechange-2.as':,{'memory':,300.0,,'v8':,9},
'jsmicro/string-charAt-1.as':,{'memory':,288.0,,'v8':,29},
'jsmicro/string-charAt-2.as':,{'memory':,300.0,,'v8':,20},
'jsmicro/string-charCodeAt-1.as':,{'memory':,288.0,,'v8':,26},
'jsmicro/string-charCodeAt-2.as':,{'memory':,288.0,,'v8':,32},
'jsmicro/string-fromCharCode-1.as':,{'memory':,288.0,,'v8':,34},
'jsmicro/string-fromCharCode-2.as':,{'memory':,300.0,,'v8':,20},
'jsmicro/string-fromCharCode-3.as':,{'memory':,300.0,,'v8':,39},
'jsmicro/string-fromCharCode-4.as':,{'memory':,300.0,,'v8':,44},
'jsmicro/string-indexOf-1.as':,{'memory':,288.0,,'v8':,30},
'jsmicro/string-indexOf-2.as':,{'memory':,288.0,,'v8':,23},
'jsmicro/string-indexOf-3.as':,{'memory':,288.0,,'v8':,19},
'jsmicro/string-lastIndexOf-1.as':,{'memory':,288.0,,'v8':,28},
'jsmicro/string-lastIndexOf-2.as':,{'memory':,288.0,,'v8':,20},
'jsmicro/string-lastIndexOf-3.as':,{'memory':,288.0,,'v8':,29},
'jsmicro/string-slice-1.as':,{'memory':,300.0,,'v8':,21},
'jsmicro/string-split-1.as':,{'memory':,300.0,,'v8':,3},
'jsmicro/string-split-2.as':,{'memory':,300.0,,'v8':,3},
'jsmicro/string-substring-1.as':,{'memory':,300.0,,'v8':,21},
'jsmicro/switch-1.as':,{'memory':,288.0,,'v8':,40},
'jsmicro/switch-2.as':,{'memory':,288.0,,'v8':,14},
'jsmicro/switch-3.as':,{'memory':,288.0,,'v8':,17},
'jsmicro/try-1.as':,{'memory':,288.0,,'v8':,62},
'jsmicro/try-2.as':,{'memory':,300.0,,'v8':,7},
'jsmicro/try-3.as':,{'memory':,300.0,,'v8':,20},
'jsmicro/while-1.as':,{'memory':,288.0,,'v8':,156},
'language/describetype/desctypeperf.as':,{'memory':,300.0,,'time':,1206},
'language/e4x/addingToXMLList.as':,{'memory':,424.0,,'time':,40},
'language/e4x/appendChildAndString.as':,{'memory':,368.0,,'time':,112},
'language/e4x/concatenatingStringsFromE4X.as':,{'memory':,300.0,,'time':,14},
'language/e4x/simpleStringConcatenation.as':,{'memory':,300.0,,'time':,3},
'language/e4x/usingAppendChildAndE4X.as':,{'memory':,348.0,,'time':,117},
'language/string/append_concat.as':,{'memory':,18022.400000000001,
'time':,153},
'language/string/append_equal_plus.as':,{'memory':,18022.400000000001,
'time':,125},
'language/string/append_plus_equal.as':,{'memory':,18022.400000000001,
'time':,124},
'language/string/charAt.as':,{'memory':,5939.1999999999998,,'time':,576},
'language/string/charCodeAt.as':,{'memory':,5939.1999999999998,,'time':,729},
'language/string/indexOf.as':,{'memory':,13619.200000000001,,'time':,734},
'language/string/lastIndexOf.as':,{'memory':,13516.799999999999,,'time':,510},
'language/string/replace.as':,{'memory':,1945.5999999999999,,'time':,988},
'language/string/replace2.as':,{'memory':,288.0,,'time':,2142},
'language/string/search.as':,{'memory':,640.0,,'time':,205},
'language/string/slice.as':,{'memory':,2252.8000000000002,,'time':,594},
'language/string/split.as':,{'memory':,53452.800000000003,,'time':,788},
'language/string/static_ascii_array_100.as':,{'memory':,2457.5999999999999,
'time':,1476},
'language/string/static_ascii_array_50.as':,{'memory':,1843.2,,'time':,1396},
'language/string/static_latin1_array_100.as':,{'memory':,4300.8000000000002,
'time':,2845},
'language/string/static_latin1_array_50.as':,{'memory':,4096.0,,'time':,1391},
'language/string/substr.as':,{'memory':,1740.8,,'time':,472},
'language/string/substring.as':,{'memory':,1740.8,,'time':,436},
'language/string/typed/append_concat.as':,{'memory':,18022.400000000001,
'time':,138},
'language/string/typed/append_equal_plus.as':,{'memory':,18022.400000000001,
'time':,104},
'language/string/typed/append_plus_equal.as':,{'memory':,18022.400000000001,
'time':,104},
'language/string/typed/charAt.as':,{'memory':,5939.1999999999998,
'time':,106},
'language/string/typed/charCodeAt.as':,{'memory':,5939.1999999999998,
'time':,130},
'language/string/typed/indexOf.as':,{'memory':,13619.200000000001,
'time':,733},
'language/string/typed/lastIndexOf.as':,{'memory':,13516.799999999999,
'time':,511},
'language/string/typed/replace.as':,{'memory':,1740.8,,'time':,986},
'language/string/typed/replace2.as':,{'memory':,288.0,,'time':,2111},
'language/string/typed/search.as':,{'memory':,640.0,,'time':,218},
'language/string/typed/slice.as':,{'memory':,2252.8000000000002,,'time':,261},
'language/string/typed/split.as':,{'memory':,53452.800000000003,,'time':,790},
'language/string/typed/substr.as':,{'memory':,1740.8,,'time':,207},
'language/string/typed/substring.as':,{'memory':,1740.8,,'time':,185},
'misc/boids.as':,{'memory':,300.0,,'time':,3795},
'misc/boidshack.as':,{'memory':,6144.0,,'time':,1109},
'misc/gameoflife.as':,{'memory':,1433.5999999999999,,'time':,11067},
'misc/primes.as':,{'memory':,288.0,,'time':,55149},
'mmgc/gcbench.as':,{'memory':,17203.200000000001,,'time':,4858},
'mmgc/ofib-rc.as':,{'memory':,21504.0,,'time':,421},
'mmgc/ofib.as':,{'memory':,56422.400000000001,,'time':,1942},
'mmgc/sfib.as':,{'memory':,2252.8000000000002,,'time':,828},
'scimark/FFT.as':,{'memory':,300.0,,'time':,7879},
'scimark/LU.as':,{'memory':,1740.8,,'time':,6672},
'scimark/MonteCarlo.as':,{'memory':,300.0,,'time':,6226},
'scimark/SOR.as':,{'memory':,1433.5999999999999,,'time':,7094},
'scimark/SparseCompRow.as':,{'memory':,292.0,,'time':,256},
'sunspider/access-binary-trees.as':,{'memory':,300.0,,'time':,69},
'sunspider/access-fannkuch.as':,{'memory':,288.0,,'time':,169},
'sunspider/access-nbody.as':,{'memory':,296.0,,'time':,164},
'sunspider/access-nsieve.as':,{'memory':,288.0,,'time':,88},
'sunspider/as3/access-binary-trees.as':,{'memory':,300.0,,'time':,20},
'sunspider/as3/access-fannkuch.as':,{'memory':,288.0,,'time':,121},
'sunspider/as3/access-nbody.as':,{'memory':,288.0,,'time':,16},
'sunspider/as3/access-nsieve.as':,{'memory':,288.0,,'time':,63},
'sunspider/as3/bitops-3bit-bits-in-byte.as':,{'memory':,288.0,,'time':,15},
'sunspider/as3/bitops-bits-in-byte.as':,{'memory':,288.0,,'time':,27},
'sunspider/as3/bitops-bitwise-and.as':,{'memory':,288.0,,'time':,13},
'sunspider/as3/bitops-nsieve-bits.as':,{'memory':,560.0,,'time':,74},
'sunspider/as3/controlflow-recursive.as':,{'memory':,312.0,,'time':,10},
'sunspider/as3/crypto-aes.as':,{'memory':,296.0,,'time':,69},
'sunspider/as3/crypto-md5.as':,{'memory':,292.0,,'time':,80},
'sunspider/as3/crypto-sha1.as':,{'memory':,288.0,,'time':,61},
'sunspider/as3/date-format-tofte.as':,{'memory':,308.0,,'time':,757},
'sunspider/as3/math-cordic.as':,{'memory':,292.0,,'time':,107},
'sunspider/as3/math-partial-sums.as':,{'memory':,288.0,,'time':,122},
'sunspider/as3/math-spectral-norm.as':,{'memory':,288.0,,'time':,24},
'sunspider/as3/s3d-cube.as':,{'memory':,304.0,,'time':,44},
'sunspider/as3/s3d-morph.as':,{'memory':,488.0,,'time':,78},
'sunspider/as3/s3d-raytrace.as':,{'memory':,556.0,,'time':,95},
'sunspider/as3/string-fasta.as':,{'memory':,300.0,,'time':,100},
'sunspider/as3/string-unpack-code.as':,{'memory':,724.0,,'time':,413},
'sunspider/as3/string-validate-input.as':,{'memory':,300.0,,'time':,74},
'sunspider/as3vector/access-fannkuch.as':,{'memory':,288.0,,'time':,92},
'sunspider/as3vector/access-nbody.as':,{'memory':,288.0,,'time':,16},
'sunspider/as3vector/access-nsieve.as':,{'memory':,288.0,,'time':,32},
'sunspider/as3vector/bitops-nsieve-bits.as':,{'memory':,288.0,,'time':,21},
'sunspider/as3vector/math-cordic.as':,{'memory':,288.0,,'time':,85},
'sunspider/as3vector/math-spectral-norm.as':,{'memory':,288.0,,'time':,44},
'sunspider/as3vector/s3d-cube.as':,{'memory':,304.0,,'time':,40},
'sunspider/as3vector/s3d-morph.as':,{'memory':,292.0,,'time':,77},
'sunspider/as3vector/string-fasta.as':,{'memory':,300.0,,'time':,105},
'sunspider/as3vector/string-validate-input.as':,{'memory':,300.0,,'time':,76},
'sunspider/bitops-3bit-bits-in-byte.as':,{'memory':,288.0,,'time':,28},
'sunspider/bitops-bits-in-byte.as':,{'memory':,288.0,,'time':,76},
'sunspider/bitops-bitwise-and.as':,{'memory':,288.0,,'time':,380},
'sunspider/bitops-nsieve-bits.as':,{'memory':,564.0,,'time':,98},
'sunspider/controlflow-recursive.as':,{'memory':,332.0,,'time':,37},
'sunspider/crypto-aes.as':,{'memory':,296.0,,'time':,84},
'sunspider/crypto-md5.as':,{'memory':,288.0,,'time':,65},
'sunspider/crypto-sha1.as':,{'memory':,288.0,,'time':,63},
'sunspider/date-format-tofte.as':,{'memory':,308.0,,'time':,758},
'sunspider/math-cordic.as':,{'memory':,296.0,,'time':,167},
'sunspider/math-partial-sums.as':,{'memory':,296.0,,'time':,342},
'sunspider/math-spectral-norm.as':,{'memory':,292.0,,'time':,88},
'sunspider/s3d-cube.as':,{'memory':,620.0,,'time':,174},
'sunspider/s3d-morph.as':,{'memory':,536.0,,'time':,99},
'sunspider/s3d-raytrace.as':,{'memory':,932.0,,'time':,178},
'sunspider/string-fasta.as':,{'memory':,300.0,,'time':,188},
'sunspider/string-unpack-code.as':,{'memory':,612.0,,'time':,411},
'sunspider/string-validate-input.as':,{'memory':,300.0,,'time':,93},
'v8.5/js/crypto.as':,{'memory':,712.0,,'v8':,129},
'v8.5/js/deltablue.as':,{'memory':,564.0,,'v8':,134},
'v8.5/js/raytrace.as':,{'memory':,304.0,,'v8':,318},
'v8.5/js/regexp.as':,{'memory':,736.0,,'v8':,32.5},
'v8.5/js/richards.as':,{'memory':,300.0,,'v8':,134},
'v8.5/js/splay.as':,{'memory':,97177.600000000006,,'v8':,410},
'v8.5/optimized/crypto.as':,{'memory':,496.0,,'v8':,1858},
'v8.5/optimized/deltablue.as':,{'memory':,1228.8,,'v8':,1145},
'v8.5/optimized/raytrace.as':,{'memory':,304.0,,'v8':,3668},
'v8.5/optimized/regexp.as':,{'memory':,828.0,,'v8':,32.399999999999999},
'v8.5/optimized/richards.as':,{'memory':,304.0,,'v8':,1576},
'v8.5/optimized/splay.as':,{'memory':,40857.599999999999,,'v8':,2735},
'v8.5/typed/crypto.as':,{'memory':,292.0,,'v8':,253},
'v8.5/typed/deltablue.as':,{'memory':,1331.2,,'v8':,1306},
'v8.5/typed/raytrace.as':,{'memory':,304.0,,'v8':,3708},
'v8.5/typed/regexp.as':,{'memory':,796.0,,'v8':,32.399999999999999},
'v8.5/typed/richards.as':,{'memory':,304.0,,'v8':,1574},
'v8.5/typed/splay.as':,{'memory':,67891.199999999997,,'v8':,514},
'v8.5/untyped/crypto.as':,{'memory':,664.0,,'v8':,134},
'v8.5/untyped/deltablue.as':,{'memory':,1126.4000000000001,,'v8':,639},
'v8.5/untyped/raytrace.as':,{'memory':,752.0,,'v8':,1378},
'v8.5/untyped/regexp.as':,{'memory':,812.0,,'v8':,32.299999999999997},
'v8.5/untyped/richards.as':,{'memory':,300.0,,'v8':,168},
'v8.5/untyped/splay.as':,{'memory':,68812.800000000003,,'v8':,480},
'v8/crypto.as':,{'memory':,992.0,,'v8':,139},
'v8/deltablue.as':,{'memory':,1126.4000000000001,,'v8':,626},
'v8/raytrace.as':,{'memory':,544.0,,'v8':,1299},
'v8/richards.as':,{'memory':,300.0,,'v8':,438},
'v8/typed/crypto.as':,{'memory':,1126.4000000000001,,'v8':,139},
'v8/typed/deltablue.as':,{'memory':,1126.4000000000001,,'v8':,1026},
'v8/typed/raytrace.as':,{'memory':,304.0,,'v8':,2952},
'v8/typed/richards.as':,{'memory':,300.0,,'v8':,789}}
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,This,file,contains,information,about,the,different,performance,metrics
#,It,is,a,python,file,that,is,imported,into,runtests.py
#,Only,one,variable,,metric_info,is,to,be,defined,in,this,file.,,
#,metric_info,is,a,dictionary,with,the,primary,key,being,the,metric,name,whose,value,is,another
#,dictionary.,,
#,This,secondary,dictionary,MUST,define,the,following,(string),keys:
#,,,,,,,best,,,,:,,,when,analyzing,multiple,iterations,,how,is,the,"best",value,calculated
#,,,,,,,,,,,,,,,,,,,valid,values,are,one,of,[,min,|,max,|,mean,|,median,]
#,,,,,,,,,,,,,,,,,,,note,that,these,are,NOT,strings,,but,method,names
#,The,following,are,optional,(string),keys:
#,,,,,,,desc,,,,:,,,A,string,description,of,the,metric
#,,,,,,,name,,,,:,,,Display,this,name,instead,of,the,metric,name
#,,,,,,,unit,,,,:,,,Metric,Unit
#,,,,,,,largerIsFaster,:,Boolean,indicating,whether,larger,values,are,considered
#,,,,,,,,,,,,,,,,,,,,,,,,to,be,faster.,,Defaults,to,False
#,If,a,test,reports,a,metric,not,defined,in,the,metric_info,dictionary,,min,is,used,as,the,default
import,sys
#,add,parent,dir,to,python,module,search,path
sys.path.append('..')
from,util.runtestUtils,import,mean,,median
