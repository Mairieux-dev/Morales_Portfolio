
args,=,parseSendchangeArguments(changes[0].files),,,,,,,,,,,,,,,,,
if,not,'infoFile',in,args,and,self.isOptional:
return,SKIPPED
#log.msg("command,CLEAN,[BEFORE]:,%s",%,self.command)
#log.msg("commandOriginal:,%s",%,self.commandOriginal)
self.command,=,[]
for,item,in,self.commandOriginal:
self.command.append(item)
#log.msg("command,CLEAN,[AFTER]:,%s",%,self.command)
#log.msg("command,[BEFORE]:,%s",%,self.command)
f,=,open(self.patchDir,+"/",+,args['infoFile'])
for,line,in,f.readlines():
if,line.startswith("repoPath"):
repoPath,=,line.split()[1]
if,line.startswith("revision"):
revision,=,line.split()[1]
if,line.startswith("branch:"):
branch,=,line.split()[1]
builderName,=,self.step_status.build.getBuilder().getName()
log.msg("ShellCommandToken,->,repoPath:,%s",%,repoPath)
log.msg("ShellCommandToken,->,revision:,%s",%,revision)
log.msg("ShellCommandToken,->,branch:,%s",%,branch)
log.msg("ShellCommandToken,->,builderName:,%s",%,builderName)
for,index,,item,in,enumerate(self.command):
self.command[index],=,self.command[index].replace("$repoPath$",,repoPath)
self.command[index],=,self.command[index].replace("$revision$",,revision)
self.command[index],=,self.command[index].replace("$branch$",,branch)
self.command[index],=,self.command[index].replace("$builderName$",,builderName)
#log.msg("command,[AFTER]:,%s",%,self.command)
#log.msg("workdir,[BEFORE]:,%s",%,self.remote_kwargs['workdir'])
self.remote_kwargs['workdir'],=,self.remote_kwargs['workdir'].replace("$branch$",,branch)
#log.msg("workdir,[AFTER]:,%s",%,self.remote_kwargs['workdir'])
BaseShellCommand.start(self)
class,SandboxClone(BaseShellCommand):
changeDir,=,""
dest,=,""
def,__init__(self,,dest=".",,changeDir=".",,**kwargs):
"""arguments:
@type,,changeDir:,,,,string
@param,changeDir:,,,,The,directory,on,the,master,that,holds,the,processed
change,requests.,This,directory,is,relative,to,the,base,
buildmaster,directory.
Defaults,to,'changes/processed'
"""
self.changeDir,=,changeDir
self.dest,=,dest
BaseShellCommand.__init__(self,,**kwargs)
#,need,to,explicitly,tell,add,our,custom,arguments,to,the,factory
self.addFactoryArguments(changeDir=changeDir,
dest=dest)
def,start(self):
changes,=,self.step_status.build.getChanges()
#,I,think,that,was,only,here,as,a,safety,check,since,it,used,to,only
#,be,used,for,sandbox,builds,which,were,supposed,to,only,have,a,single,change
#if,len(changes),<,1:
#,,,,return,SKIPPED
#,The,list,of,files,changed,for,this,build,also,contains,an,additional
#,entry,the,is,the,name,of,the,build,trigger,file,,we,need,to,find,that
#,file,so,that,we,can,pass,the,build,information,along,the,build,process
for,changefile,in,changes[0].files:
if,changefile.startswith("change-"):
f,=,open(self.changeDir,+"/",+,changefile)
for,line,in,f.readlines():
if,line.startswith("url:"):
hg_url,=,line[line.find(":")+1:].strip()
break
self.command,=,[]
self.command.append("hg")
self.command.append("clone")
self.command.append(hg_url)
self.command.append(self.dest)
break
BaseShellCommand.start(self)
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
version,=,"0.7.10p1"
#!/usr/bin/env,python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os.path,sys,getopt
basedir=os.path.dirname(sys.argv[0])
publichtml=os.path.abspath(basedir+"/../public_html")
statushtml=publichtml+"/status.html"
usage="""
-m,--message=,new,message
-s,--style=,style,from,buildbot.css,[Successstatus,Failurestatus]
"""
color='Passstatus'
message='Tree,is,open'
options='m:s:'
longOptions=['message=','style=']
try:
opts,,args=getopt.getopt(sys.argv[1:],options,longOptions)
except:
print('usage:\n%s'%usage)
sys.exit(1)
for,(o,v),in,opts:
if,o,in,('-m','--message'):
message=v
elif,o,in,('-s','--style'):
color=v
contents='<link,href="buildbot.css",rel="stylesheet",type="text/css">\n<center><div,class="%s">%s<br></div>\n<Center>',%,(color,message)
open(statushtml,"w").write(contents)
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:,(add,to,~/.vimrc:,set,modeline,modelines=5)
#
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#
#,the,script,outputs,a,list,of,exclude,patterns
#,the,exclude,pattern,to,print
exclude_pattern=""
#,document,each,exclude,with,a,reason
#,exclude,the,self,tests,,they,are,not,part,of,the,source,code
exclude_pattern+="!extensions/ST_*.cpp,!extensions/Selftest*.cpp,"
#,exclude,generated,code
exclude_pattern+="!generated/shell_toplevel.h,!generated/shell_toplevel.cpp,!generated/shell_toplevel*.hh,"
#,exclude,Memory,Profiler,not,part,of,flash,player,shipping,code
exclude_pattern+="!MMgc/GCMemoryProfiler.h,!MMgc/GCMemoryProfiler.cpp,"
#,exclude,other-licenses,,zlib,and,pcre,,they,are,external,packages
exclude_pattern+="!other-licenses/,!pcre/,"
#,exclude,the,shell,code,,it,is,not,part,of,the,flash,player,shipping,code
exclude_pattern+="!shell/,"
#,exclude,debugging,utilities
exclude_pattern+="!vmbase/AvmAssert.cpp,!VMPI/MacDebugUtils.cpp,!VMPI/SpyUtils*.cpp,!VMPI/*DebugUtils.cpp,"
#,exclude,Sampler
exclude_pattern+="!extensions/SamplerScript.h,"
#,exclude,vprof,and,eval,tools,,not,part,of,flash,player,shipping,code
exclude_pattern+="!vprof/,!eval/,"
#,exclude,gtest
exclude_pattern+="!gtest/,"
#,The,following,functions,in,MathClass,and,MathUtils,have,been,excluded
#,from,the,coverage,calculation,as,there,are,currently,not,reachable
#,(not,called,from,any,other,source):
#,https://bugzilla.mozilla.org/show_bug.cgi?id=592728
exclude_pattern+="'!avmplus::MathClass::max2(double,double)',"
exclude_pattern+="'!avmplus::MathClass::min2(double,double)',"
exclude_pattern+="'!avmplus::MathUtils::equals(double,double)',"
exclude_pattern+="'!avmplus::MathUtils::infinity()',"
exclude_pattern+="'!avmplus::MathUtils::max(double,double)',"
exclude_pattern+="'!avmplus::MathUtils::min(double,double)',"
exclude_pattern+="'!avmplus::MathUtils::nan()',"
exclude_pattern+="'!avmplus::MathUtils::neg_infinity()',"
exclude_pattern+="'!avmplus::MathUtils::nextDigit(double*)',"
exclude_pattern+="'!avmplus::MathUtils::powerOfTen(int32_t,double)',"
exclude_pattern+="'!avmplus::MathUtils::roundInt(double)',"
#,print,exclude,pattern
print(exclude_pattern)
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:,(add,to,~/.vimrc:,set,modeline,modelines=5)
#
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#
import,getopt,os,re,subprocess,sys,datetime,shutil,platform,shutil
class,CodeCoverageRunner:
compile_csvfile="../all/codecoverage-compile.csv"
test_csvfile="../all/codecoverage-test.csv"
root_dir="../../../../"
script_dir="./"
buildnum=None
bullseye_dir=None
builds_dir=None
platform=None
exclude_regions=None
options='b:'
longOptions=['buildnum=','compilecsv=','testcsv=','buildsdir=']
def,__init__(self):
self.parseOptions()
self.determineOS()
#,Make,sure,that,bullseyedir,is,set,in,the,environment
env=os.environ
if,env.has_key("bullseyedir"),==,False:
print("error:,must,set,bullseyedir,environment,variable,to,the,bullseye/bin,directory")
sys.exit(1)
self.bullseye_dir=env["bullseyedir"]
self.exclude_regions=env["coverage_exclude_regions"]
if,self.builds_dir==None:
#,Determine,the,hash,of,the,change,,required,to,know,what,the,build,directory,is
out,exit,=,self.run_pipe(cmd="hg,log,-r,%s,|,head,-n,1,|,awk,-F:,'{print,$3}'",%,self.buildnum)
if,out[0].find("unknown,revision")!=-1:
print,"Unable,to,determine,change,has,for,hg,revision,%s",%,(self.buildnum)
sys.exit(1)
self.builds_dir="../../../../../builds/%s-%s/%s",%,(self.buildnum,,out[0],,self.platform)
#,Convert,all,relative,paths,to,absolute
self.builds_dir=os.path.abspath(self.builds_dir)
self.root_dir=os.path.abspath(self.root_dir)
self.script_dir=os.path.abspath(self.script_dir)
if,self.platform=='windows':
self.compile_csvfile=self.convertFromCygwin(self.compile_csvfile)
self.test_csvfile=self.convertFromCygwin(self.test_csvfile)
self.root_dir=self.convertFromCygwin(self.root_dir)
self.script_dir=self.convertFromCygwin(self.script_dir)
self.bullseye_dir=self.convertFromCygwin(self.bullseye_dir)
self.builds_dir=self.convertFromCygwin(self.builds_dir)
compile=True
test=True
if,compile:
print('parsing,%s...',%,self.compile_csvfile)
lines=open(self.compile_csvfile).read()
#,throw,away,header(1st)
lines=lines.split('\n')[1:]
for,line,in,lines:
if,line.startswith("#"):
continue
tokens=self.mysplit(line)
#,current,format,is:
#,display_name,,shell_name,,configure,options,,env_script,,notes
if,len(tokens)<5:
continue
shellname=tokens[1].strip()
configure_args=tokens[2].strip()
env_script=tokens[3].strip()
self.compile_shell(shellname,,configure_args,,env_script)
if,test:
print('parsing,%s...',%,self.test_csvfile)
lines=open(self.test_csvfile).read()
#,throw,away,header(1st)
lines=lines.split('\n')[1:]
for,line,in,lines:
if,line.startswith("#"):
continue
tokens=self.mysplit(line)
#,current,format,is:
#,shell_name,,suite,,vm_args,,config_string,,script_args
if,len(tokens)<5:
continue
shellname=tokens[0].strip()
suite=tokens[1].strip()
vm_args=tokens[2].strip()
config_string=tokens[3].strip()
script_args=tokens[4].strip()
self.test_shell(shellname,,suite,,vm_args,,config_string,,script_args)
#,Merge,all,of,the,coverage,files,together
#,let,the,build,system,call,../all/codecoverage_process.sh
#self.merge_coverage()
def,usage(self,c):
print('usage:,%s,[options]',%,sys.argv[0])
print(',,,,-b,--buildnum,build,number,that,is,being,built')
print(',,,,--compilecsv,,csv,file,defining,what,to,compile,')
print(',,,,,,,,,,,,,,,,,,defaults,to,%s',%,self.compile_csvfile)
print(',,,,--testcsv,,,,,csv,file,defining,what,test,to,run,')
print(',,,,,,,,,,,,,,,,,,defaults,to,%s',%,self.test_csvfile)
print(',,,,--buildsdir,,,location,to,store,final,binaries,')
print(',,,,,,,,,,,,,,,,,,shell,and,coverage,file')
sys.exit(c)
def,parseOptions(self):
try:
opts,args,=,getopt.getopt(sys.argv[1:],,self.options,self.longOptions)
except:
print(sys.exc_info()[1])
self.usage(2)
for,o,v,in,opts:
if,o,in,('-b',,'--buildnum'):
self.buildnum=v
if,o,in,('--compilecsv',):
self.compile_csvfile=v
if,o,in,('--testcsv',):
self.test_csvfile=v
if,o,in,('--buildsdir',):
self.builds_dir=v
if,self.buildnum==None:
print('--buildnum,must,be,set')
self.usage(1)
def,compile_shell(self,,shellname,,configure_args,,env_script):
'''
Compile,the,shell,with,the,given,configure,args.
'''
print,"\n\n========================================"
print,"About,to,compile,using,the,following:,"
print,"shellname:,"+shellname
print,"configure_args:,"+configure_args
print,"env_script:,"+env_script
#,Make,sure,that,Bullseye,is,in,the,path
env=os.environ
if,env["PATH"].find(self.bullseye_dir)==-1:
env["PATH"]=self.bullseye_dir+":"+env["PATH"]
#,Setup,the,covfile,based,on,the,shellname,being,built
env["COVFILE"]="%s/%s-%s.cov",%,(self.builds_dir,,self.platform,,shellname)
if,os.path.exists(env["COVFILE"]):
os.unlink(env["COVFILE"])
#,Make,sure,that,the,builds,dir,exists,before,starting,the,build
#,otherwise,the,covc,process,will,fail,creating,the,coverage,file
if,not,os.path.exists(self.builds_dir):
os.makedirs(self.builds_dir)
#,Need,to,load,up,the,env_script:
#,,-,maintain,original,env,variables,that,are,being,modified,so,that
#,,,,it,can,be,reset,once,the,subprocess,call,is,completed
#,,-,execute,a,replace(),if,the,value,contains,the,key,name,,substituting
#,,,,the,original,env,value,for,the,$KEY,token
env_orig=dict()
env_script=self.script_dir+"/"+env_script
lines=open(env_script).read()
lines=lines.split('\n')
for,line,in,lines:
if,line.startswith("#"):
continue
if,line.startswith("CONFIGURE_ARGS="):
env["CONFIGURE_ARGS"]=line[len("CONFIGURE_ARGS="):]
print("configure_args:,%s,%s",%,(configure_args,,env["CONFIGURE_ARGS"]))
continue
pattern,=,re.compile(r'^.*\=')
m,=,pattern.match(line)
if,m:
key=m.group()[:-1]
value=line[len(key)+1:]
value_orig=None
if,env.has_key(key):
value_orig=env[key]
env_orig[key]=value_orig
#,Is,there,a,$key,token,string,that,we,need,to,replace?
if,value.find("$%s",%,key)>-1:
value=value.replace("$%s",%,key,,value_orig)
#,Set,the,environment
env[key]=value
#,Turn,on,code,coverage
cmd="%s/cov01,--on",%,self.bullseye_dir
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env)
for,line,in,stdout:
print,line
#,Use,the,compile-generic,script,to,compile,the,shell
cmd="../all/compile-generic.sh,'%s','%s','%s','false','','objdir-codecoverage',",%,(self.buildnum,,configure_args,,shellname)
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env)
for,line,in,stdout:
print,line
if,exit:
print("\n\naborting,code,coverage,run")
print("message:,Build,%s,failed",%,shellname)
sys.exit(exit)
#,Turn,off,code,coverage
cmd="%s/cov01,--off",%,self.bullseye_dir
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env)
for,line,in,stdout:
print,line
#,If,running,in,JENKINS,then,copy,binary,to,buids_dir
if,env["JENKINS_HOME"]:
shutil.copy('%s/objdir-codecoverage/shell/%s',%,(env["WS"],,shellname),,self.builds_dir)
#,Set,the,environ,back,to,its,original,state
for,key,in,env_orig:
#,If,there,is,an,original,value,set,it,back
if,env_orig[key]:
env[key]=env_orig[key]
else:,#,There,was,no,original,value,so,delete,the,key/value
del,env[key]
def,test_shell(self,,shellname,,suite,,vm_args="",,config_string="",,script_args=""):
print,"\n\n========================================"
print,"About,to,run,tests,using,the,following:,"
print,"shellname:,"+shellname
print,"suite:,"+suite
print,"vm_args:,"+vm_args
print,"config_string:,"+config_string
print,"script_args:,"+script_args
#,Make,sure,that,Bullseye,is,in,the,path
env=os.environ
if,env["PATH"].find(self.bullseye_dir)==-1:
env["PATH"]=self.bullseye_dir+":"+env["PATH"]
#,Setup,the,covfile,based,on,the,shellname,being,built
env["COVFILE"]="%s/%s-%s.cov",%,(self.builds_dir,,self.platform,,shellname)
if,suite=="acceptance":
#,If,running,in,JENKINS,then,copy,binary,to,buids_dir
if,env["JENKINS_HOME"]:
env["AVM"]="%s/%s",%,(self.builds_dir,,shellname)
print,"running,acceptance"
#,Use,the,compile-generic,script,to,compile,the,shell
cmd="../all/run-acceptance-generic.sh,'%s','%s','%s','%s','%s'",%,(self.buildnum,,shellname,,vm_args,,config_string,,script_args)
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env)
for,line,in,stdout:
print,line
del,env["AVM"]
elif,suite=="performance":
print,"running,performance"
env["AVM"]="%s/%s",%,(self.builds_dir,,shellname)
env["ASC"]="%s/utils/asc.jar",%,(self.root_dir)
env["BUILTINABC"]="%s/generated/builtin.abc",%,(self.root_dir)
env["SHELLABC"]="%s/generated/shell_toplevel.abc",%,(self.root_dir)
cmd="python,runtests.py,%s",%,script_args
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env,,cwd="%s/test/performance"%self.root_dir)
for,line,in,stdout:
print,line
del,env["AVM"]
del,env["ASC"]
del,env["BUILTINABC"]
del,env["SHELLABC"]
elif,suite=="selftest":
print,"running,selftest"
cmd="%s/%s,-Dselftest,%s",%,(self.builds_dir,,shellname,,vm_args)
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env)
for,line,in,stdout:
print,line
elif,suite=="commandline":
print,"running,commandline"
env["AVM"]="%s/%s",%,(self.builds_dir,,shellname)
env["ASC"]="%s/utils/asc.jar",%,(self.root_dir)
env["BUILTINABC"]="%s/generated/builtin.abc",%,(self.root_dir)
env["SHELLABC"]="%s/generated/shell_toplevel.abc",%,(self.root_dir)
#,Determine,if,the,shell,contains,a,debugger
debugger=False
cmd="%s/%s,-Dversion",%,(self.builds_dir,,shellname)
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env)
for,line,in,stdout:
if,line!=None,and,line.find("AVMFEATURE_DEBUGGER")>-1:
debugger=True
env["AVMRD"]="%s/%s",%,(self.builds_dir,,shellname)
print,"Are,we,running,with,debugger:,%s",%,debugger
cmd="python,runtests.py"
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env,,cwd="%s/test/cmdline"%self.root_dir)
for,line,in,stdout:
print,line
del,env["AVM"]
del,env["ASC"]
del,env["BUILTINABC"]
del,env["SHELLABC"]
if,debugger:
del,env["AVMRD"]
#,Get,the,current,coverage,data,,execute,from,the,root_dir,so,that,path,information,is,correct
cmd="%s/covdir,-q,-m,%s",%,(self.bullseye_dir,,self.exclude_regions)
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env,,cwd=self.root_dir)
for,line,in,stdout:
print,line
def,merge_coverage(self):
print,"\n\n========================================"
print,"Merging,all,coverage,files,together"
#,Make,sure,that,Bullseye,is,in,the,path
env=os.environ
if,env["PATH"].find(self.bullseye_dir)==-1:
env["PATH"]=self.bullseye_dir+":"+env["PATH"]
#,Setup,the,covfile,based,on,the,shellname,being,built
env["COVFILE"]="%s/%s-avmshell.cov",%,(self.platform,self.builds_dir)
if,os.path.exists(env["COVFILE"]):
os.unlink(env["COVFILE"])
covfiles=""
for,file,in,os.listdir(self.builds_dir):
if,file.endswith(".cov"):
covfiles+=",%s"%file
#,Get,the,current,coverage,data,,execute,from,the,root_dir,so,that,path,information,is,correct
cmd="%s/covmerge,-c,%s",%,(self.bullseye_dir,,covfiles)
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env,,cwd=self.builds_dir)
for,line,in,stdout:
print,line
#,Get,the,current,coverage,data,,execute,from,the,root_dir,so,that,path,information,is,correct
cmd="%s/covdir,-q,-m,%s",%,(self.bullseye_dir,,self.exclude_regions)
stdout,exit,=,self.run_pipe(cmd=cmd,,env=env,,cwd=self.root_dir)
Total=None
for,line,in,stdout:
if,line.startswith("Total"):
Total=line
print,line
print,""
print,"message:,total,function,coverage:,,,,,,,,,,,%s",%,Total.split()[5]
print,"message:,total,condition/decision,coverage:,%s",%,Total.split()[10]
def,run_pipe(self,,cmd,,cwd=None,,env=None):
if,cwd==None:
cwd=self.script_dir
#,run,a,command,and,return,a,tuple,of,(output,,exitCode)
if,env==None:
process,=,subprocess.Popen(cmd,cwd=cwd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
else:
process,=,subprocess.Popen(cmd,cwd=cwd,shell=True,env=env,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
(output,err),=,process.communicate()
output,=,output.split('\n'),if,output,else,[]
if,output,and,output[-1].strip(),==,'':,#,strip,empty,line,at,end
output,=,output[:-1]
exitCode,=,process.returncode
return,(output,exitCode)
#,workaround,since,python,split,does,not,allow,",to,span,multiple,tokens
#,"func1(param1,param)","foo","foo",would,not,split,correctly
def,mysplit(self,line):
tokens=[]
while,True:
if,len(line)==0:
break
if,line[0]=='"':
line=line[1:]
if,line.find('"')==-1:
tokens.append(line)
break
tokens.append(line[0:line.find('"')])
line=line[line.find('"')+2:]
else:
if,line.find(',')==-1:
tokens.append(line)
break
else:
tokens.append(line[0:line.find(',')])
line=line[line.find(',')+1:]
return,tokens
def,convertFromCygwin(self,,cygpath):
if,cygpath.find('\\'),==,-1:
try:
f,=,self.run_pipe('cygpath,-m,%s',%,cygpath)
cygpath,=,','.join([i.strip(),for,i,in,f[0]])
except:
pass
return,cygpath
def,determineOS(self):
_os,=,platform.system()
ostype,=,''
if,re.search('(CYGWIN_NT)',,_os):
ostype='windows'
self.cygwin,=,True
if,re.search('(Windows)',,_os):
ostype='windows'
self.useShell,=,False
if,re.search('(Darwin)',,_os):
ostype='mac'
if,re.search('(Linux)',,_os):
ostype='linux'
if,ostype,==,'':
print("ERROR:,os,%s,is,unknown",%,(platform.system()))
exit(1)
self.platform,=,ostype
if,__name__,==,'__main__':
p,=,CodeCoverageRunner()
#!/usr/bin/env,python
#
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os
import,os.path
from,os.path,import,*
import,stat
import,re
import,sys
def,usage():
print,"file-check.py,<dir>"
print,"Must,pass,in,a,directory,<dir>."
exit(1)
try:
base_dir,=,sys.argv[1]
if,not,isdir(base_dir):
usage()
except:
usage()
MPL_string="You,can,obtain,one,at,http://mozilla\.org/MPL/2\.0"
MPL1_string="Version:,MPL,1\.1/GPL,2\.0/LGPL,2\.1"
MPL_excludes,=,open(os.getcwd(),+,'/../all/mpl_excluded.txt').read().splitlines()
mpl1_files,=,[]
mpl_files,=,[]
LineEnding_excludes,=,open(os.getcwd(),+,'/../all/lineending_excluded.txt').read().splitlines()
ending_file,=,[]
file_count,=,0
def,walktree,(top,=,".",,depthfirst,=,True):
names,=,os.listdir(top)
if,not,depthfirst:
yield,top,,names
for,name,in,names:
if,name=='.hg':
continue
try:
st,=,os.lstat(os.path.join(top,,name))
except,os.error:
continue
if,stat.S_ISDIR(st.st_mode):
for,(newtop,,children),in,walktree,(os.path.join(top,,name),,depthfirst):
yield,newtop,,children
if,depthfirst:
yield,top,,names
for,(basepath,,children),in,walktree(base_dir,,False):
for,child,in,children:
mpl1_excluded,=,0
mpl_excluded,=,0
lineending_excluded,=,0
filename,=,os.path.join(basepath,,child)
#,Ignore,directory,names
if,isfile(filename):
file_count,+=,1
for,line,in,MPL_excludes:
if,line.startswith('#'),or,len(line)==0:,#,Skip,the,line,if,blank,or,is,comment
continue
if,re.search(line,,filename)!=None:
mpl_excluded,=,1
break
for,line,in,LineEnding_excludes:
if,line.startswith('#'),or,len(line)==0:,#,Skip,the,line,if,blank,or,is,comment
continue
if,re.search(line,,filename)!=None:
lineending_excluded,=,1
break
else:,#,Exclude,directory,
mpl1_excluded,=,1
mpl_excluded,=,1
lineending_excluded,=,1
############
#,MPL1,Check
############
if,mpl1_excluded,==,0:
file,=,open(filename)
MPL1found=0,,,,
#,Search,the,file,for,the,MPL,string
for,line,in,file:
if,re.search(MPL1_string,,line)!=None:
MPL1found,=,1
break
#,No,MPL,string,was,found
if,MPL1found,!=,0:
mpl1_files.append(filename)
############
#,MPL,Check
############
#,These,files,have,not,been,mpl_excluded,and,need,to,be,checked
if,mpl_excluded,==,0:
MPLfound,=,0
file,=,open(filename)
#,Search,the,file,for,the,MPL,string
for,line,in,file:
if,re.search(MPL_string,,line)!=None:
MPLfound,=,1
break
#,No,MPL,string,was,found
if,MPLfound,!=,1:
mpl_files.append(filename)
####################
#,Line,Ending,Checks
####################
#,These,files,have,not,been,lineending_excluded,and,need,to,be,checked
if,lineending_excluded,==,0:
unix_lines,=,1
file,=,open(filename)
#,Search,the,file,for,the,MPL,string
for,line,in,file:
if,re.search("\r\n",,line)!=None:
unix_lines,=,0
break
#,None,UNIX,line,endings,foune
if,unix_lines,!=,1:
ending_file.append(filename)
if,mpl1_files,or,mpl_files,or,ending_file:
print,"buildbot_status:,WARNINGS"
else:
print,"status:,PASSED"
if,mpl1_files:
print,""
print,""
print,"MPL1,Issues:"
print,"============"
for,file,in,mpl1_files:
print,file.replace(base_dir,,'')
if,mpl_files:
print,""
print,""
print,"MPL,Issues:"
print,"==========="
for,file,in,mpl_files:
print,file.replace(base_dir,,'')
if,ending_file:
print,""
print,""
print,"Line,Ending,Issues:"
print,"==================="
for,file,in,ending_file:
print,file.replace(base_dir,,'')
print,""
print,""
print,"number,of,MPL,Issues,,,,,,,,,:,%d,",%,len(mpl_files)
print,"number,of,MPL1,Issues,,,,,,,,:,%d,",%,len(mpl1_files)
print,"number,of,Line,Ending,Issues,:,%d,",%,len(ending_file)
print,"number,of,files,,,,,,,,,,,,,,:,%d,",%,file_count
#!/usr/python
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,This,script,will,regenerate,performance,data,for,the,given,build
import,subprocess
import,os
import,shutil
from,subprocess,import,check_call,,CalledProcessError
from,getopt,import,getopt
from,sys,import,argv,,exit
class,RegenerateBaseLineData:
options,=,''
vmbuilds,=,''
branch,=,''
longOptions,=,[]
args=[]
build=''
def,__init__(self):
self.setOptions()
self.parseOptions()
self.run()
def,vprint(self,msg):
print,msg
def,usage(self,c):
print,''
print,'usage:,%s,[options],[test/dir]',%,os.path.basename(argv[0])
print,',Default,Usage:,This,script,will,regenerate,performance,data,for,the,given,revision'
print,',and,test(s),specified.,,If,no,test/dir,is,specified,,all,performance,tests,will'
print,',be,run,for,the,given,revision.'
#print,',Options,that,can,have,multiple,values,must,be,comma,delimited,(no,spaces).'
print,''
print,',e.g:,%s,-r,703,-l,http://10.60.48.47/builds,-b,tamarin-central,jsbench',%,os.path.basename(argv[0])
print,''
print,',-r,specify,revision,(build),to,regenerate,data,for,(required)'
print,',-b,specify,branch,[tamarin-redux|tamarin-central|tamarin-flash],(replaces,$branch)'
#print,',-m,specify,milestone(s),[release|iteration|weekly|all]'
#print,',-a,specify,different,avmshell,name,(replaces,$)'
print,',-l,specify,builds,location,(replaces,$vmbuilds)'
print,',-h,--help,print,this,message'
exit(c)
def,setOptions(self):
'''set,the,valid,command,line,options.'''
self.options,=,'r:b:m:a:l:h'
self.longOptions,=,['help']
def,parseOptions(self):
try:
opts,,self.args,=,getopt(argv[1:],,self.options,,self.longOptions,)
if,not,self.args:
self.args,=,['']
except:
self.usage(2)
for,o,,v,in,opts:
if,o,in,('-r'):
self.build,=,v
elif,o,in,('-h',,'--help'):
self.usage(0)
elif,o,in,('-m'):
self.milestones,=,v.split(',')
elif,o,in,('-l'):
self.vmbuilds,=,v
elif,o,in,('-b'):
self.branch,=,v
if,not,self.build:
self.vprint('Revision/Build,must,be,specified')
self.usage(1)
def,verifyOptions(self):
pass
def,run(self):
#,determine,where,buildbot,home,is
currentDir,=,os.getcwd()
buildbotRootDir,=,currentDir[0:currentDir.find('performance/')+12]
#,verify,that,this,is,the,root,dir
if,not,os.access(buildbotRootDir+'buildbot.tac',,os.F_OK):
self.vprint('Can,not,determine,buildbot,root,directory')
exit(1)
os.chdir(buildbotRootDir)
#,is,buildbot,running
if,,os.access(buildbotRootDir+'twistd.pid',,os.F_OK):
restartBuildbot,=,True
try:
check_call(['buildbot',,'stop',,'.'])
except,CalledProcessError:
self.vprint('Problem,stopping,buildbot.')
#,lock,machine,for,performance,runs
os.chdir(buildbotRootDir+'scripts')
try:
check_call(['../all/lock-acquire.sh',self.build])
except,CalledProcessError:
self.vprint('Problem,aquiring,lock.')
#,resync,qe,scripts
'''
os.chdir('qe')
try:
check_call(['hg',,'pull',,'-u'])
except,CalledProcessError:
self.vprint('Problem,syncing,qe,scripts.')
'''
#,TODO:,resync,repo
#,override,environment,vars
shutil.copyfile(buildbotRootDir+'scripts/environment.sh',buildbotRootDir+'scripts/environment.sh.orig')
newEnvVar,=,[]
if,self.vmbuilds:
newEnvVar.append('vmbuilds=%s',%,self.vmbuilds)
if,self.branch:
newEnvVar.append('branch=%s',%,self.branch)
newEnvVar.append('change=%s',%,self.build)
envFile,=,open(buildbotRootDir+'scripts/environment.sh','a')
envFile.write('\n'.join(newEnvVar))
envFile.close()
#,run,perf,scripts
os.chdir(buildbotRootDir+'scripts')
try:
check_call(['./prepare.sh',self.build])
except,CalledProcessError:
self.vprint('Problem,with,prepare,step.')
perfCommands,=,[
'../all/run-performance-release.sh',
'../all/run-performance-release-interp.sh',
'../all/run-performance-release-jit.sh',
'../all/run-performance-release-mir.sh',
]
for,cmd,in,perfCommands:
try:
check_call([cmd,self.build,,self.args[0]])
except,CalledProcessError:
pass
#,replace,back,to,original,env,file
os.remove(buildbotRootDir+'scripts/environment.sh')
os.rename(buildbotRootDir+'scripts/environment.sh.orig',,buildbotRootDir+'scripts/environment.sh')
#,release,lock
os.chdir(buildbotRootDir+'scripts')
try:
check_call(['../all/lock-release.sh',self.build])
except,CalledProcessError:
self.vprint('Problem,releasing,lock.')
#,restart,buildbot
if,restartBuildbot:
os.chdir(buildbotRootDir)
try:
check_call(['buildbot',,'start',,'.'])
except,CalledProcessError:
self.vprint('Problem,starting,buildbot.')
regen,=,RegenerateBaseLineData(),,,,,,
#!/usr/bin/env,python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,Alternatively,,the,contents,of,this,file,may,be,used,under,the,terms,of
#,either,the,GNU,General,Public,License,Version,2,or,later,(the,"GPL"),,or
#,the,GNU,Lesser,General,Public,License,Version,2.1,or,later,(the,"LGPL"),
#,in,which,case,the,provisions,of,the,GPL,or,the,LGPL,are,applicable,instead
#,of,those,above.,If,you,wish,to,allow,use,of,your,version,of,this,file,only
#,under,the,terms,of,either,the,GPL,or,the,LGPL,,and,not,to,allow,others,to
#,use,your,version,of,this,file,under,the,terms,of,the,MPL,,indicate,your
#,decision,by,deleting,the,provisions,above,and,replace,them,with,the,notice
#,and,other,provisions,required,by,the,GPL,or,the,LGPL.,If,you,do,not,delete
#,the,provisions,above,,a,recipient,may,use,your,version,of,this,file,under
#,the,terms,of,any,one,of,the,MPL,,the,GPL,or,the,LGPL.
#
#,*****,END,LICENSE,BLOCK,*****
import,os
import,sys
import,time
import,shutil
from,optparse,import,OptionParser
from,datetime,import,date
@staticmethod
def,_onerror(func,,path,,exc_info):,
import,stat
if,not,os.access(path,,os.W_OK):
try:
os.chmod(path,,stat.S_IWUSR)
func(path)
except,Exception,e:
print,e
print,"buildbot_status:,WARNINGS"
pass
def,main():
usage,=,"usage:,%prog,[options],arg"
parser,=,OptionParser(usage)
parser.add_option("-p",,"--path",,type="string",,dest="directory",
help="path,to,tree,to,delete")
parser.add_option("-i",,"--interval",,type="int",,dest="interval",
help="number,of,days,to,preserve,folders")
(options,,args),=,parser.parse_args()
if,not,options.directory,or,not,options.interval:
parser.error("-p,<path>,and,-i,<interval>,arguments,required")
path,=,options.directory,,,,,,,,
numdays,=,options.interval,*,86400,#,86400,=,number,of,seconds,in,a,day
now,=,time.time()
for,r,d,f,in,os.walk(path):
for,dir,in,d:
timestamp,=,os.path.getmtime(os.path.join(r,dir))
if,now-timestamp,>,numdays:
try:
print,"Removing:,%s,--,Date:,%s",%,(os.path.join(r,dir),,date.fromtimestamp(timestamp))
shutil.rmtree(os.path.join(r,dir),,onerror=_onerror),,#,comment,to,test
except,Exception,e:
print,e
print,"buildbot_status:,WARNINGS"
pass
if,__name__,==,"__main__":
main()
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:,(add,to,~/.vimrc:,set,modeline,modelines=5)
#
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#
'''
usage:
The,script,parses,a,bullseye,code,coverage,binary,file,and,generates,a,list,of,missing,functions,,and,several,csv,files
for,use,with,confluence,tables,and,charts.
requirement,for,the,csv,filename,output,to,look,correct,must,run,this,script,with,cwd,set,to,the,tamarin-redux,directory
parsecodecoverage.py,--covfile,avm.cov,--build=5110
env,variables:,$coverage_exclude_regions
input:
--covfile,<bullseye,merged,binary,.cov>
--build,,,<hg,revision,number>
output:
for,output,files,the,$basename,is,the,covfile,with,the,.cov,removed,e.g.,avmshell_s_cov_64.cov,produces,avmshell_s_cov_64-info.csv
these,files,are,created:
$basename-info.csv,,,,,,,,,,,,,,#,build,number,and,timestamp
$basename-summaryfn.csv,,,,,,,,,#,function,data,table,for,current,build,for,table
$basename-summarybc.csv,,,,,,,,,#,branches/conditions,data,table,for,current,build,for,table
$basename-missingfn.csv,,,,,,,,,#,list,of,uncovered,functions
these,files,are,appended:
$basename-recentfn.csv,,,,,,,,,,#,uncovered,function,historical,chart,for,this,iteration,(month)
$basename-recentbc.csv,,,,,,,,,,#,uncovered,branch/conditions,historical,chart,for,this,iteration,(month)
$basename-milestonefn.csv,,,,,,,#,uncovered,function,historical,chart,for,recent,iterations/milestones
$basename-milestonebc.csv,,,,,,,#,uncovered,branches/conditions,historical,chart,for,recent,iterations/milestones
bullseye,tool,must,be,installed,and,in,the,path,,covfn,is,executed,from,bullseye,tested,with,version,7.13.32
CSV,output,formats:
$basename-missingfn.csv,format:,,build,module,name,source,file,name,,function,name
$basename-info.csv,format,(single,line):,build:,###,,updated:,YYYY-MM-DD,HH:MM
$basename-summaryfn.csv,format:,module,uncovered,fns,total,fns,%,fn,cov
$basename-summarygc.csv,format:,module,uncovered,branches,%,branch,cov,total,branches,%,branch,cov
'''
import,getopt,os,re,subprocess,sys,datetime
class,ParseCodeCoverage:
covfile=None
incsvfile=None
outcsvfile=None
datadir='./data'
missingfnfile=None
info=None
summary=None
fnsummary=None
fnpercentsummary=None
bcsummary=None
bcpercentsummary=None
basefile=None
modulelist=None
skips=[]
bullseyedir=None
build='unknown'
options=''
longOptions=['covfile=','build=','incsvfile=']
region=''
def,__init__(self):
self.parseOptions()
if,os.environ.has_key('coverage_exclude_regions'):
self.region=os.environ['coverage_exclude_regions']
if,os.environ.has_key('bullseyedir')==False:
print("error:,must,set,bullseyedir,environment,variable,to,the,bullseye/bin,directory")
sys.exit(1)
self.bullseyedir=os.environ['bullseyedir']
#,if,incsvfile,not,set,run,covfn,to,generate,the,csv,file
if,self.incsvfile==None:
self.runcovfn()
else:
self.outcsvfile=self.incsvfile
#,parse,the,csv,file,into,missingfn,csv,string,,and,dictionaries:,module:fncovered,,module:fntotal,,
#,,,,,,,module:bccovered,,module:bctotal
csvdata,fnucovered,fntotal,bcucovered,bctotal,=,self.processCSV()
self.modulelist=fntotal.keys()
self.modulelist.sort(key=str.lower)
#,write,the,missing,fn,csv,file
self.missingfnfile=self.basefile+'-missingfn.csv'
self.saveCSV(csvdata)
#,calculate,missing,fn,diff,against,milestone
self.prepareFileForDiff(self.basefile+'-milestone-missingfn.csv')
self.prepareFileForDiff(self.basefile+'-missingfn.csv')
cmd="diff,-U,0,%s,%s",%,(self.basefile+'-milestone-missingfn.csv.1',self.basefile+'-missingfn.csv.1')
process=subprocess.Popen(cmd,shell=True,stdout=open(self.basefile+'-missingfn-diffs.csv','w'),stderr=subprocess.STDOUT)
(stdout,stderr)=process.communicate()
#,write,the,csv,table,for,current,build,and,csv,table,with,build,number,and,timestamp
self.info=self.basefile+'-info.csv'
self.summaryfn=self.basefile+'-summaryfn.csv'
self.generateSummaryTableFn(fnucovered,fntotal)
self.summarybc=self.basefile+'-summarybc.csv'
self.generateSummaryTableBc(bcucovered,bctotal)
self.appendData(self.basefile+'-recentfn.csv',fnucovered,fntotal)
self.appendData(self.basefile+'-recentbc.csv',bcucovered,bctotal)
self.appendData(self.basefile+'-milestonefn.csv',fnucovered,fntotal)
self.appendData(self.basefile+'-milestonebc.csv',bcucovered,bctotal)
print('finished'),,,,,,,,
def,prepareFileForDiff(self,file):
f=open(file)
contents=f.read()
f.close()
newcontents=''
lines=contents.split('\n')
for,line,in,lines:
tokens=line.split(',')
if,len(tokens)==0:
continue
tokens=tokens[1:]
newcontents+=",".join(tokens)+"\n"
f=open(file+".1","w")
f.write(newcontents)
f.close()
def,usage(self,c):
print('usage:,%s,[options]',%,sys.argv[0])
print(',,,,--covfile,,,,,set,the,bullseye,.cov,file,to,be,processing,,assumes,bullseye,is,installed')
print(',,,,--incsvfile,,,set,the,csv,file,to,load,,the,csv,is,returned,by,covfn,--csv,>,file.csv,')
print(',,,,,,,,,,,,,,,,,,,,,if,not,set,covfn,--csv,is,run')
print(',,,,--build,,,,,,,set,the,build,number')
sys.exit(c)
def,parseOptions(self):
try:
opts,args,=,getopt.getopt(sys.argv[1:],,self.options,self.longOptions)
except:
print(sys.exc_info()[1])
self.usage(2)
for,o,v,in,opts:
if,o,in,('--covfile'):
self.covfile=v
if,v.find('.')>-1:
v=v[0:v.find('.')]
self.basefile=v
if,o,in,('--incsvfile'):
self.incsvfile=v
if,v.find('.')>-1:
v=v[0:v.find('.')-1]
self.basefile=v
if,o,in,('--build'):
self.build=v
if,self.covfile==None,and,self.incsvfile==None:
print('--covfile,or,--incsvfile,must,be,set')
sys.exit(1)
def,runcovfn(self):
outfile=self.basefile+'.csv'
print('processing,.cov,binary,to,%s...',%,outfile)
covarg=''
if,self.covfile!=None:
covarg='--file,%s',%,self.covfile
cmd='%s/covfn,%s,--no-banner,--csv,%s',%,(self.bullseyedir,covarg,self.region)
if,os.path.exists(outfile):
os.unlink(outfile)
process=subprocess.Popen(cmd,shell=True,stdout=open(outfile,'w'),stderr=subprocess.PIPE)
(stdout,stderr)=process.communicate()
self.outcsvfile=outfile
def,processCSV(self):
print('parsing,%s...',%,self.outcsvfile)
lines=open(self.outcsvfile).read()
output=""
#,throw,away,header(1st),and,summary(last),lines
lines=lines.split('\n')[0:-1]
uncoveredfncount={}
totalfncount={}
uncoveredbccount={}
totalbccount={}
output+='build,module,source,function\n'
modulefiles={}
for,line,in,lines:
tokens=self.mysplit(line)
if,len(tokens)<6:
continue
#,check,if,file,name,contains,extra,directories
if,tokens[1].find('repo/')>-1:
tokens[1]=tokens[1][tokens[1].find('repo/')+5:]
if,tokens[1].find('tamarin-redux/')>-1:
tokens[1]=tokens[1][tokens[1].find('tamarin-redux/')+14:]
#,set,module,to,name,before,'/'
module=''
dirs=re.findall('[A-Za-z0-9_.-]+',tokens[1])
if,len(dirs)>1:
module=dirs[0]
else:
continue
#,skip,modules,for,third-party,apis
if,module,in,self.skips:
continue
#,check,if,function,is,not,covered
if,tokens[3]=='0':
output+='%s,%s,%s,"%s"\n'%(self.build,module,tokens[1],tokens[0])
if,uncoveredfncount.has_key(module)==False:
uncoveredfncount[module]=0
uncoveredfncount[module]+=1
#,add,to,function,total
if,totalfncount.has_key(module)==False:
totalfncount[module]=0
totalfncount[module]+=1
#,add,to,b/c,covered
if,uncoveredbccount.has_key(module)==False:
uncoveredbccount[module]=0
uncoveredbccount[module]+=int(tokens[4])
#,add,to,b/c,total
if,totalbccount.has_key(module)==False:
totalbccount[module]=0
totalbccount[module]+=int(tokens[5])
#,flip,b/c,totals,to,make,uncovered
for,module,in,uncoveredbccount.keys():
uncoveredbccount[module]=totalbccount[module]-uncoveredbccount[module]
return,output,,uncoveredfncount,,totalfncount,,uncoveredbccount,totalbccount
def,saveCSV(self,csvdata):
print('saving,csv,data,to,%s',%,self.missingfnfile)
open(self.missingfnfile,'w').write(csvdata)
def,appendData(self,filename,uncovered,total):
print('appending,results,to,%s',%,filename)
uncoveredsum=0
totalsum=0
for,module,in,self.modulelist:
if,uncovered.has_key(module)==False:
if,total.has_key(module)==False:
print('WARNING:,module,%s,is,not,in,module,list',%,module)
continue
uncoveredsum+=uncovered[module]
totalsum+=total[module]
percent=self.calcpercent(uncoveredsum,totalsum)
if,os.path.exists(filename)==False:
print("ERROR:,file,%s,does,not,exist,,generating,new,file")
contents="build\ncore\nnanojit\nMMgc\ngenerated\nplatform\nextensions\nVMPI\nvmbase"
else:
contents=open(filename).read()
newcontents=''
lines=contents.split('\n')
for,line,in,lines:
if,line=='':
continue
tokens=line.split(',')
if,tokens[0]=='build':
value=self.build
elif,tokens[0],in,self.modulelist==False:
value="0"
elif,tokens[0]=='total':
value=percent
else:
if,uncovered.has_key(tokens[0])==False:
uncov=0
else:
uncov=uncovered[tokens[0]]
value=self.calcpercent(uncov,total[tokens[0]])
newcontents+="%s,%s\n",%,(line,value)
f=open(filename,'w')
f.write(newcontents)
f.close()
def,generateSummaryTableFn(self,fnuncovered,fntotal):
print('generating,fn,summary,data...')
if,os.path.exists(self.summaryfn):
os.unlink(self.summaryfn)
fnuncoveredsum=0
fntotalsum=0
contents='module,uncovered,functions,total,functions,%,function,coverage\n'
for,module,in,self.modulelist:
if,fnuncovered.has_key(module)==False:
continue
fnuncoveredsum+=fnuncovered[module]
fntotalsum+=fntotal[module]
contents+='%s,%s,%s,%s%s\n',%,(module,fnuncovered[module],fntotal[module],self.calcpercent(fnuncovered[module],fntotal[module]),'%')
contents+='total,%s,%s,%s%s\n',%,(fnuncoveredsum,fntotalsum,self.calcpercent(fnuncoveredsum,fntotalsum),'%')
open(self.summaryfn,'w').write(contents)
open(self.info,'w').write('current,build:,%s,function,coverage:,%s%s',%,
(self.build,
self.calcpercent(fnuncoveredsum,fntotalsum),'%')
)
def,generateSummaryTableBc(self,bcuncovered,bctotal):
print('generating,bc,summary,data...')
if,os.path.exists(self.summarybc):
os.unlink(self.summarybc)
bcuncoveredsum=0
bctotalsum=0
contents='module,uncovered,branches,total,branches,%,branch,coverage\n'
for,module,in,self.modulelist:
if,bcuncovered.has_key(module)==False:
continue
bcuncoveredsum+=bcuncovered[module]
bctotalsum+=bctotal[module]
contents+='%s,%s,%s,%s%s\n',%,(module,bcuncovered[module],bctotal[module],self.calcpercent(bcuncovered[module],bctotal[module]),'%')
contents+='total,%s,%s,%s%s\n',%,(bcuncoveredsum,bctotalsum,self.calcpercent(bcuncoveredsum,bctotalsum),'%')
open(self.summarybc,'w').write(contents)
open(self.info,'a').write(',branch,coverage:,%s%s,updated:,%s',%,
(self.calcpercent(bcuncoveredsum,bctotalsum),'%',
datetime.datetime.today().strftime('%Y-%m-%d,%H:%M'))
)
def,generateSummary(self,,file,,modulescount):
print('generating,summary,%s...',%,file)
if,os.path.exists(file)==False:
summaryFile=open(file,'w')
summaryFile.write('build\n')
for,module,in,self.modulelist:
summaryFile.write('%s\n',%,module)
summaryFile.close()
modules=modulescount.keys()
modulefile=open(file).read()
modulefilelistupdated=''
fieldslen=0
for,line,in,modulefile.split('\n'):
if,line=='':
continue
#,check,if,historical,builds,exceed,max
tokens=line.split(',')
if,len(tokens)>self.maxBuilds:
first=tokens[0]
tokens=tokens[(len(tokens)-self.maxBuilds+1):]
tokens.insert(0,first)
line=",".join(tokens)
if,line.startswith('build'):
modulefileupdated=line+','+self.build+'\n'
else:
fields=line.split(',')
fieldslen=len(fields)
if,modulescount.has_key(fields[0]):
modulefileupdated+="%s,%s\n",%,(line,modulescount[fields[0]])
modules.remove(fields[0])
for,newmodule,in,modules:
line=newmodule
for,i,in,range(fieldslen-1):
line+=',0'
line='%s,%s\n',%,(line,modulescount[newmodule])
modulefileupdated+=line
open(file,'w').write(modulefileupdated)
def,generatePercentSummary(self,,file,,modulescount,,totalmodulescount):
print('generating,percent,function,summary,data...')
if,os.path.exists(file)==False:
summaryFile=open(file,'w')
summaryFile.write('build\n')
for,module,in,self.modulelist:
summaryFile.write('%s\n',%,module)
summaryFile.close()
modulefile=open(file).read()
modulefilelistupdated=''
fieldslen=0
modules=modulescount.keys()
for,line,in,modulefile.split('\n'):
if,line=='':
continue
#,check,if,historical,builds,exceed,max
tokens=line.split(',')
if,len(tokens)>self.maxBuilds:
first=tokens[0]
tokens=tokens[(len(tokens)-self.maxBuilds+1):]
tokens.insert(0,first)
line=",".join(tokens)
if,line.startswith('build'):
modulefileupdated=line+','+self.build+'\n'
else:
fields=line.split(',')
fieldslen=len(fields)
if,modulescount.has_key(fields[0]):
modulefileupdated+="%s,%s\n",%,(line,self.calcpercent(modulescount[fields[0]],totalmodulescount[fields[0]]))
modules.remove(fields[0])
for,newmodule,in,modules:
line=newmodule
for,i,in,range(fieldslen-1):
line+=',0'
line='%s,%s\n',%,(line,self.calcpercent(modulescount[newmodule],totalmodulescount[newmodule]))
modulefileupdated+=line
open(file,'w').write(modulefileupdated)
def,calcpercent(self,value,total):
value=float(value)
total=float(total)
pct=(total-value)*100.0/total
return,'%.1f',%,pct
#,workaround,since,python,split,does,not,allow,",to,span,multiple,tokens
#,"func1(param1,param)","foo","foo",would,not,split,correctly
def,mysplit(self,line):
tokens=[]
while,True:
if,len(line)==0:
break
if,line[0]=='"':
line=line[1:]
if,line.find('"')==-1:
tokens.append(line)
break
tokens.append(line[0:line.find('"')])
line=line[line.find('"')+2:]
else:
if,line.find(',')==-1:
tokens.append(line)
break
else:
tokens.append(line[0:line.find(',')])
line=line[line.find(',')+1:]
return,tokens,
if,__name__,==,'__main__':
p,=,ParseCodeCoverage()
#!/usr/bin/env,python
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys,socket,os,getopt,time
host=''
port=0
if,os.environ.has_key("WINRSSERVERHOST"):
host=os.environ.get("WINRSSERVERHOST")
if,os.environ.has_key("WINRSSERVERPORT"):
port=int(os.environ.get("WINRSSERVERPORT"))
expectNoOutput=os.environ.get("WINRSSERVEREXPECTNOOUTPUT",,False)
timeout=-1
winrs_host=''
winrs_user=''
winrs_pass=''
usage='''
winrs.py,args,...
--port=
--timeout=
--host=
--cmd=
--file=
--skipExit
'''
cmd='winrs,'
longoptions=['port=','host=','cmd=','timeout=','file=','skipexit']
skipExit=False
infile=None
cmd="winrs,%s",%,','.join(sys.argv[1:])
if,host=='':
print("must,specify,host,through,--host,or,environment,variable,WINRSSERVERHOST")
sys.exit(1)
if,port==0:
print("must,specify,port,through,--port,or,environment,variable,WINRSSERVERPORT")
sys.exit(1)
def,run():
start=time.time()
s=socket.socket(socket.AF_INET,,socket.SOCK_STREAM)
try:
s.connect((host,port))
except:
print("could,not,connect,to,host=%s,port=%s",%,(host,port))
sys.exit(1)
s.send("set,timeout,-1\n")
start=time.time()
result=''
while,True:
result+=s.recv(1024)
if,result.find('$'):
break
if,time.time()-start>30:
print("error,failed,to,set,timeout")
sys.exit(1)
time.sleep(.5)
if,infile!=None:
lines=open(infile)
count=0
for,line,in,lines:
if,line=='':
continue
s.send(line+'\n')
result=s.recv(1024)
if,result.find("finished")==-1:
print("error:,did,not,receive,ack")
break
print('[%d],%s',%,(count,line))
count+=1
print("done,sending,file")
else:
s.send(cmd+'\n')
result=''
exitSent=False
while,True:
result+=s.recv(1024)
if,result.find('$'),and,exitSent==False:
exitSent=True
s.send('exit\n')
if,skipExit:
break
if,result.find('closing,connection')>-1:
break
if,timeout!=-1,and,time.time()-start>timeout:
result+='timed,out,after,%d',%,timeout
break
time.sleep(.5)
s.close()
if,skipExit:
code=0
else:
fnd=result.find('closing,connection')
code=1
if,fnd>-1:
result=result[0:fnd-3]
code=0
return,result,,code
tries=5
attempts=0
output=""
code=0
while,(attempts,<,tries):
#print("::,Attempt,%s",%attempts)
output,code,=,run()
#print("::,len(output),%s",%,len(output))
#print(output)
if,len(output),!=,0,or,expectNoOutput:
break
attempts+=1
print(output)
#print("exitcode=%d",%,code)
sys.exit(code)
#!/usr/bin/env,python
#,-*-,python,-*-
#,ex:,set,syntax=python:
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys,socket,os,time,re
port=None
host=None
if,os.environ.has_key("SHELLPORT"):
try:
port=int(os.environ.get("SHELLPORT"))
except:
print("error:,parsing,SHELLPORT")
if,os.environ.has_key("SHELLSERVER"):
host=os.environ.get("SHELLSERVER")
if,len(sys.argv)>1,and,re.search('^--shellserver=',sys.argv[1]):
shellserver=sys.argv[1][14:]
if,shellserver.find(':')>-1:
host=shellserver[0:shellserver.find(':')]
try:
port=int(shellserver[shellserver.find(':')+1:])
except:
True
sys.argv=sys.argv[1:]
if,(host==None,or,port==None):
print("error:,SHELLPORT,and,SHELLSERVER,must,be,set")
sys.exit(1)
args=""
for,item,in,sys.argv[1:]:
args+=item+","
s=socket.socket(socket.AF_INET,,socket.SOCK_STREAM)
s.connect((host,port))
s.send("abc_android,%s",%,args)
result=''
timeout=300
starttime=time.time()
while,True:
newdata=s.recv(1024)
#,,,,print("data:,"+newdata)
result+=newdata
if,re.search("EXITCODE=[0-9]+\s",result):
break
if,result.find("--,application,argument")>-1:
break
if,result.find("\n$")>-1:
break,,,,
if,time.time()-starttime>timeout:
print("error:,timeout,detected")
break
s.close()
if,re.search("EXITCODE=[0-9]+\s",result):
exitcode=result[result.find("EXITCODE")+9:]
if,exitcode.find("$")>-1:
exitcode=exitcode[0:exitcode.find("$")]
try:
exitcode=int(exitcode.strip())
except:
True
result=result[0:result.find("EXITCODE")]
else:
exitcode=0
print(result)
sys.exit(exitcode)
#!/usr/bin/env,python
#,-*-,python,-*-
#,ex:,set,syntax=python:
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys,socket,os,time
port=None
host=None
if,os.environ.has_key("SHELLPORT"):
try:
port=int(os.environ.get("SHELLPORT"))
except:
print("error:,parsing,SHELLPORT")
if,os.environ.has_key("SHELLSERVER"):
host=os.environ.get("SHELLSERVER")
if,(host==None,or,port==None):
print("error:,SHELLPORT,and,SHELLSERVER,must,be,set")
sys.exit(1)
args=""
for,item,in,sys.argv[1:]:
args+=item+","
s=socket.socket(socket.AF_INET,,socket.SOCK_STREAM)
s.connect((host,port))
s.send("%s",%,args)
result=''
timeout=300
starttime=time.time()
exitcode=0
while,True:
result+=s.recv(1024)
if,result.find("setup,finished")>-1,or,result.find("ok:")>-1:
break
if,result.find("setup,failed")>-1,or,result.find("error:")>-1:
exitcode=1
break
if,time.time()-starttime>timeout:
print("ERROR:,timed,out,after,%d,sec",%,timeout)
exitcode=1
break
print(result)
s.close()
sys.exit(exitcode)
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:,(add,to,~/.vimrc:,set,modeline,modelines=5)
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this,file,
#,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,Gist,of,the,script,flow:
#,1.,read,in,what,the,last,mirror,point,was,from,an,external,file
#,2.,get,a,list,of,changes,from,p4,since,that,last,change
#,3.,in,tamarin,do,a,pull,update,(in,the,event,there,was,a,change,outside,of,p4)
#,4.,loop,over,the,changes:
#,,,,a.,sync,to,the,change
#,,,,b.,capture,the,p4,commit,message,,user,,date,and,CL#
#,,,,c.,rm,everything,in,tamarin,minus,.hg/
#,,,,d.,copy,everything,from,p4,clientspace,into,tamarin,MINUS,tamarin-merge.txt
#,,,,e.,hg,commit,using,p4,message,(append,CL#,to,message),,p4,user,and,p4,date,if,possible
#,,,,f.,hg,push,this,change,(this,will,make,sure,that,if,there,is,another,change,available
#,,,,,,,that,for,some,reason,bombs,out,,we,have,at,least,pushed,to,mozilla,what,we,could)
#,,,,g.,rewrite,the,external,tracking,file,with,this,CL#
#,,,,h.,if,the,push,fails....
#,Information,on,how,to,setup,the,host,of,this,script,can
#,be,found,@,https://zerowing.corp.adobe.com/x/QwU5JQ
import,os,,marshal,,sys,,subprocess,,shutil,,tempfile
import,datetime,,pytz
from,subprocess,import,Popen,,PIPE
class,P4Mirror():
#,Required,config,information:
#,tamarin-redux,repo,location
TAMARIN_REPO=os.getenv('TAMARIN_REPO')
LASTBUILD_FILE="lastbuild.txt"
P4ROOT=os.getenv('P4ROOT')
P4USER=os.getenv('P4USER')
P4CLIENT=os.getenv('P4CLIENT')
P4PORT=os.getenv('P4PORT')
P4AVMPLUS=os.getenv('P4AVMPLUS')
OLDHEAD=0
HEAD=0
script_dir="./"
env=os.environ
def,__init__(self):
#,Ensure,that,all,necessary,env,variables,have,been,configure
self.checkConfig()
self.log("Read,in,last,mirror,point")
self.getLastMirror()
self.log("\t%s\n",%,self.OLDHEAD)
self.log("Get,the,current,HEAD")
self.getCurrentHead()
self.log("\t%s\n",%,self.HEAD)
self.log("Get,changes,from,Perforce")
changes=self.getChanges()
self.log("Found,%s,changes,to,process...",%,len(changes))
if,len(changes),==,0:
sys.exit(0)
self.log("Sync,the,hg,mirror,repo")
self.syncHGRepo()
self.log("\n")
self.log("Process,Changes")
self.processChanges(changes)
def,checkConfig(self):
exit=False
#,Ensure,that,all,necessary,env,variables,have,been,configure
if,self.TAMARIN_REPO,==,None:
self.log("TAMARIN_REPO,is,not,set")
exit=True
if,self.LASTBUILD_FILE,==,None:
self.log("LASTBUILD_FILE,is,not,set")
exit=True
if,self.P4ROOT,==,None:
self.log("P4ROOT,is,not,set")
exit=True
if,self.P4USER,==,None:
self.log("P4USER,is,not,set")
exit=True
if,self.P4CLIENT,==,None:
self.log("P4CLIENT,is,not,set")
exit=True
if,self.P4PORT,==,None:
self.log("P4PORT,is,not,set")
exit=True
if,self.P4AVMPLUS,==,None:
self.log("P4AVMPLUS,is,not,set")
exit=True
if,exit:
sys.exit(1)
#,Do,a,quick,sanity,check,to,make,sure,that,self.TAMARIN_REPO/.hg/hgrc,exists
#,before,we,start,deleting,items,from,this,location,later,in,processChanges()
if,not,os.path.exists(self.TAMARIN_REPO+"/.hg/store"):
self.log("TAMARIN_REPO,does,not,contain,a,proper,mercurial,repo")
self.log("TAMARIN_REPO:,%s",%,self.TAMARIN_REPO)
sys.exit(1)
if,not,os.path.exists(self.LASTBUILD_FILE):
self.log("LASTBUILD_FILE,does,not,exist")
self.log("LASTBUILD_FILE:,%s",%,self.LASTBUILD_FILE)
sys.exit(1)
def,getLastMirror(self):
#,read,last,mirror,changelist
bf=open(self.LASTBUILD_FILE,,'r')
for,line,in,bf:
self.OLDHEAD,=,int(line)
bf.close()
def,getCurrentHead(self):
stdout,,stderr,,exit,=,self.run_pipe(cmd="p4,counter,change",,env=self.env)
for,line,in,stdout:
self.HEAD,=,int(line)
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
def,getChanges(self):
changes,=,[]
#,Actually,need,to,get,all,of,the,changes,from,OLDHEAD+1,to,HEAD
cmd,=,"p4,-G,changes,-s,submitted,//%s/...@%s,%s",%,(self.P4CLIENT,,self.OLDHEAD+1,,self.HEAD)
pipe,=,Popen(,cmd.split(),,stdout=PIPE).stdout
try:,#,The,-G,option,on,p4,returns,a,python,object,,so,need,to,be,loaded,via,marshal.load()
while,1:
record,=,marshal.load(,pipe,)
changes.append(,record,)
except,EOFError:
pass
pipe.close()
#,Need,to,loop,backwards,through,this,list,as,the,latest,changes,is,at,the,start
changes.reverse()
return,changes
def,syncHGRepo(self):
#,Script,being,really,paranoid,about,local,changes....
cmd,=,"hg,revert,--all"
stdout,,stderr,,exit,=,self.run_pipe(cmd=cmd,,cwd=self.TAMARIN_REPO,,env=self.env)
for,line,in,stdout:
self.log(line)
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
#,Script,being,really,paranoid,about,local,changes....
cmd,=,"hg,purge"
stdout,,stderr,,exit,=,self.run_pipe(cmd=cmd,,cwd=self.TAMARIN_REPO,,env=self.env)
for,line,in,stdout:
self.log(line)
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
cmd,=,"hg,pull"
stdout,,stderr,,exit,=,self.run_pipe(cmd=cmd,,cwd=self.TAMARIN_REPO,,env=self.env)
for,line,in,stdout:
self.log(line)
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
cmd,=,"hg,update,-C,-r,tip"
stdout,,stderr,,exit,=,self.run_pipe(cmd=cmd,,cwd=self.TAMARIN_REPO,,env=self.env)
for,line,in,stdout:
self.log(line)
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
def,processChanges(self,,changes):
'''
Loop,over,the,changes:
a.,sync,to,the,change
b.,capture,the,p4,commit,message,,user,,date,and,CL#
c.,rm,everything,in,tamarin,minus,.hg/
d.,copy,everything,from,p4,clientspace,into,tamarin,MINUS,tamarin-merge.txt
e.,hg,commit,using,p4,message,(append,CL#,to,message),,p4,user,and,p4,date,if,possible
f.,hg,push,this,change,(this,will,make,sure,that,if,there,is,another,change,available
that,for,some,reason,bombs,out,,we,have,at,least,pushed,to,mozilla,what,we,could)
g.,if,the,push,fails....
h.,rewrite,the,external,tracking,file,with,this,CL#
'''
user=''
changelist=''
desc=''
date=''
for,dict,in,changes:
changelist,=,dict["change"]
self.log("\nProcessing,changelist:,%s",%,changelist)
#########################################
#,a.,sync,to,the,change
#########################################
self.log("Sync,to,the,change...")
cmd,=,"p4,sync,%s@%s",%,(self.P4AVMPLUS,,changelist)
stdout,,stderr,,exit,=,self.run_pipe(cmd=cmd,,env=self.env)
for,line,in,stdout:
self.log(line)
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
#########################################
#,b.,capture,the,p4,commit,message,,user,
#,,,,date,and,CL#
#########################################
cmd,=,"p4,-G,describe,-s,%s",%,(dict["change"])
pipe,=,Popen(,cmd.split(),,stdout=PIPE).stdout
try:,#,The,-G,option,on,p4,returns,a,python,object,,so,need,to,be,loaded,via,marshal.load()
while,1:
record,=,marshal.load(,pipe,)
except,EOFError:
pass
pipe.close()
user,=,record["user"]
date,=,record["time"]
desc,=,record["desc"]
cmd,=,"p4,-G,user,-o,%s",%,(user)
pipe,=,Popen(,cmd.split(),,stdout=PIPE).stdout
try:,#,The,-G,option,on,p4,returns,a,python,object,,so,need,to,be,loaded,via,marshal.load()
while,1:
record,=,marshal.load(,pipe,)
except,EOFError:
pass
pipe.close()
user,=,"%s,<%s>",%,(record["FullName"],,record["Email"])
#########################################
#,c.,rm,everything,in,tamarin,minus,.hg/
#########################################
self.log("Clean,out,the,mirror,repo...")
for,filename,in,os.listdir(self.TAMARIN_REPO):
fullpath,=,"%s/%s",%,(self.TAMARIN_REPO,,filename)
if,filename,!=,".hg":
if,os.path.isfile(fullpath):
os.unlink(fullpath)
else:
shutil.rmtree(fullpath)
#########################################
#,d.,copy,everything,from,p4,clientspace,into,tamarin
#########################################
self.log("Repopulate,the,mirror,repo,from,p4,workspace...")
for,filename,in,os.listdir(self.P4ROOT):
src,=,"%s/%s",%,(self.P4ROOT,,filename)
dest,=,"%s/%s",%,(self.TAMARIN_REPO,,filename)
if,os.path.isfile(src):
shutil.copy2(src,,dest)
else:
shutil.copytree(src,,dest)
#########################################
#,e.,hg,commit,using,p4,message,(append,CL#,to,message),
#,,,,p4,user,and,p4,date,if,possible
#########################################
self.log("Commit,the,change,to,the,mirror,repo...")
commit_message,=,desc,+,"\nCL@",+,changelist
fd,,temp_path,=,tempfile.mkstemp()
os.write(fd,,commit_message)
os.close(fd)
#,Massage,the,date
d,=,datetime.datetime.fromtimestamp(float(date),,pytz.timezone("US/Pacific"))
date,=,d.strftime("%a,%b,%d,%H:%M:%S,%Y,%z")
cmd,=,"hg,commit,--addremove,--user,\"%s\",--date,\"%s\",--logfile,%s",%,(user,,date,,temp_path)
self.log(cmd)
stdout,,stderr,,exit,=,self.run_pipe(cmd=cmd,,cwd=self.TAMARIN_REPO,,env=self.env)
for,line,in,stdout:
self.log(line)
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
#,Make,sure,to,remove,the,temp,file
os.unlink(temp_path)
#########################################
#,f.,hg,push,this,change,(this,will,make,sure,that,if
#,,,,there,is,another,change,available,that,for,some
#,,,,reason,bombs,out,,we,have,at,least,pushed,to,mozilla
#,,,,what,we,could)
#########################################
self.log("Push,the,change,to,the,mirror,repo...")
cmd,=,"hg,push"
stdout,,stderr,,exit,=,self.run_pipe(cmd=cmd,,cwd=self.TAMARIN_REPO,,env=self.env)
for,line,in,stdout:
self.log(line)
#########################################
#,g.,if,the,push,fails....
#########################################
if,stderr:
for,line,in,stderr:
self.log(line)
if,exit:
sys.exit(exit)
#########################################
#,h.,rewrite,the,external,tracking,file,with,this,CL#
#########################################
self.log("Update,changelist,tracking,file...")
bf=open(self.LASTBUILD_FILE,,'w')
bf.write(changelist)
bf.close()
self.log("Completed,changelist:,%s\n\n#########################################",%,changelist)
def,run_pipe(self,,cmd,,cwd=None,,env=None):
if,cwd==None:
cwd=self.script_dir
#,run,a,command,and,return,a,tuple,of,(output,,exitCode)
if,env==None:
process,=,subprocess.Popen(cmd,,cwd=cwd,,shell=True,,stdout=subprocess.PIPE,,stderr=subprocess.STDOUT)
else:
process,=,subprocess.Popen(cmd,,cwd=cwd,,shell=True,,env=env,,stdout=subprocess.PIPE,,stderr=subprocess.STDOUT)
(output,,err),=,process.communicate()
output,=,output.split('\n'),if,output,else,[]
if,output,and,output[-1].strip(),==,'':,#,strip,empty,line,at,end
output,=,output[:-1]
exitCode,=,process.returncode
#process.close()
return,(output,,err,,exitCode)
def,log(self,,str):
print(str)
if,__name__,==,"__main__":
f=P4Mirror()
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,c-basic-offset:,4,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys,os
thisdir,=,os.path.dirname(__file__)
rootdir,=,thisdir,+,"/.."
sys.path.append(rootdir)
import,utils.exactgc
utils.exactgc.gen_builtins(rootdir,+,'/generated')
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,c-basic-offset:,4,;,indent-tabs-mode:,nil,;,tab-width:,4,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os
import,shutil
import,stat
import,sys
def,mv(oldfile,,newfile):
shutil.copyfile(oldfile,newfile)
os.remove(oldfile)
def,rm(file):
if,os.access(file,,os.F_OK),==,True:
os.remove(file)
def,warn_notwriteable(file):
if,os.path.exists(file),and,not,os.stat(file).st_mode,&,stat.S_IWUSR:
print("warning:,%s,is,not,writeable",%,file)
return,True
return,False
classpath,=,os.environ.get('ASC')
if,classpath,==,None:
classpath,=,"../utils/asc.jar"
#print,"ERROR:,ASC,environment,variable,must,point,to,asc.jar"
#exit(1)
javacmd,=,"java,-ea,-DAS3,-DAVMPLUS,-classpath,"+classpath
asc,=,javacmd+",macromedia.asc.embedding.ScriptCompiler,"
print("ASC="+classpath)
print("Building,builtins...")
#,https://bugzilla.mozilla.org/show_bug.cgi?id=697977
if,len(sys.argv),==,1:
print('To,build,the,float/float4,enabled,builtins,pass,the,following:'),;
print(',,,,>$,./builtin.py,-config,CONFIG::VMCFG_FLOAT=true,-abcfuture'),;
print(''),;
print('To,compile,the,builtins,without,float/float4,support:'),;
print(',,,,>$,./builtin.py,-config,CONFIG::VMCFG_FLOAT=false'),;
exit(1),;
if,warn_notwriteable('../generated/builtin.abc'):
sys.exit(0),,,#,exit,0,so,build,will,continue
configs,=,",".join(sys.argv[1:])
os.system(asc,+,",-builtin,-apiversioning,-out,builtin,builtin.as,Math.as,Error.as,Date.as,RegExp.as,JSON.as,XML.as,IDataInput.as,IDataOutput.as,ByteArray.as,Proxy.as,flash_net_classes.as,Dictionary.as,IDynamicPropertyOutput.as,IDynamicPropertyWriter.as,DynamicPropertyOutput.as,ObjectInput.as,ObjectOutput.as,IExternalizable.as,ObjectEncoding.as,concurrent.as,PromiseChannel.as,",+,configs)
rm("builtin.h")
rm("builtin.cpp")
mv("builtin.abc",,"../generated/builtin.abc")
print("Generating,native,thunks...")
os.system("python,../utils/nativegen.py,../generated/builtin.abc")
print("Done.")
#!/usr/bin/env,python
#
#,Copyright,2009,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""fuse_gtest_files.py,v0.2.0
Fuses,Google,Test,source,code,into,a,.h,file,and,a,.cc,file.
SYNOPSIS
fuse_gtest_files.py,[GTEST_ROOT_DIR],OUTPUT_DIR
Scans,GTEST_ROOT_DIR,for,Google,Test,source,code,,and,generates
two,files:,OUTPUT_DIR/gtest/gtest.h,and,OUTPUT_DIR/gtest/gtest-all.cc.
Then,you,can,build,your,tests,by,adding,OUTPUT_DIR,to,the,include
search,path,and,linking,with,OUTPUT_DIR/gtest/gtest-all.cc.,,These
two,files,contain,everything,you,need,to,use,Google,Test.,,Hence
you,can,"install",Google,Test,by,copying,them,to,wherever,you,want.
GTEST_ROOT_DIR,can,be,omitted,and,defaults,to,the,parent
directory,of,the,directory,holding,this,script.
EXAMPLES
./fuse_gtest_files.py,fused_gtest
./fuse_gtest_files.py,path/to/unpacked/gtest,fused_gtest
This,tool,is,experimental.,,In,particular,,it,assumes,that,there,is,no
conditional,inclusion,of,Google,Test,headers.,,Please,report,any
problems,to,googletestframework@googlegroups.com.,,You,can,read
http://code.google.com/p/googletest/wiki/GoogleTestAdvancedGuide,for
more,information.
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,re
import,sets
import,sys
#,We,assume,that,this,file,is,in,the,scripts/,directory,in,the,Google
#,Test,root,directory.
DEFAULT_GTEST_ROOT_DIR,=,os.path.join(os.path.dirname(__file__),,'..')
#,Regex,for,matching,'#include,"gtest/..."'.
INCLUDE_GTEST_FILE_REGEX,=,re.compile(r'^\s*#\s*include\s*"(gtest/.+)"')
#,Regex,for,matching,'#include,"src/..."'.
INCLUDE_SRC_FILE_REGEX,=,re.compile(r'^\s*#\s*include\s*"(src/.+)"')
#,Where,to,find,the,source,seed,files.
GTEST_H_SEED,=,'include/gtest/gtest.h'
GTEST_SPI_H_SEED,=,'include/gtest/gtest-spi.h'
GTEST_ALL_CC_SEED,=,'src/gtest-all.cc'
#,Where,to,put,the,generated,files.
GTEST_H_OUTPUT,=,'gtest/gtest.h'
GTEST_ALL_CC_OUTPUT,=,'gtest/gtest-all.cc'
def,VerifyFileExists(directory,,relative_path):
"""Verifies,that,the,given,file,exists,;,aborts,on,failure.
relative_path,is,the,file,path,relative,to,the,given,directory.
"""
if,not,os.path.isfile(os.path.join(directory,,relative_path)):
print,'ERROR:,Cannot,find,%s,in,directory,%s.',%,(relative_path,
directory)
print,('Please,either,specify,a,valid,project,root,directory,'
'or,omit,it,on,the,command,line.')
sys.exit(1)
def,ValidateGTestRootDir(gtest_root):
"""Makes,sure,gtest_root,points,to,a,valid,gtest,root,directory.
The,function,aborts,the,program,on,failure.
"""
VerifyFileExists(gtest_root,,GTEST_H_SEED)
VerifyFileExists(gtest_root,,GTEST_ALL_CC_SEED)
def,VerifyOutputFile(output_dir,,relative_path):
"""Verifies,that,the,given,output,file,path,is,valid.
relative_path,is,relative,to,the,output_dir,directory.
"""
#,Makes,sure,the,output,file,either,doesn't,exist,or,can,be,overwritten.
output_file,=,os.path.join(output_dir,,relative_path)
if,os.path.exists(output_file):
#,TODO(wan@google.com):,The,following,user-interaction,doesn't
#,work,with,automated,processes.,,We,should,provide,a,way,for,the
#,Makefile,to,force,overwriting,the,files.
print,('%s,already,exists,in,directory,%s,-,overwrite,it?,(y/N),',%
(relative_path,,output_dir))
answer,=,sys.stdin.readline().strip()
if,answer,not,in,['y',,'Y']:
print,'ABORTED.'
sys.exit(1)
#,Makes,sure,the,directory,holding,the,output,file,exists,;,creates
#,it,and,all,its,ancestors,if,necessary.
parent_directory,=,os.path.dirname(output_file)
if,not,os.path.isdir(parent_directory):
os.makedirs(parent_directory)
def,ValidateOutputDir(output_dir):
"""Makes,sure,output_dir,points,to,a,valid,output,directory.
The,function,aborts,the,program,on,failure.
"""
VerifyOutputFile(output_dir,,GTEST_H_OUTPUT)
VerifyOutputFile(output_dir,,GTEST_ALL_CC_OUTPUT)
def,FuseGTestH(gtest_root,,output_dir):
"""Scans,folder,gtest_root,to,generate,gtest/gtest.h,in,output_dir."""
output_file,=,file(os.path.join(output_dir,,GTEST_H_OUTPUT),,'w')
processed_files,=,sets.Set(),,#,Holds,all,gtest,headers,we've,processed.
def,ProcessFile(gtest_header_path):
"""Processes,the,given,gtest,header,file."""
#,We,don't,process,the,same,header,twice.
if,gtest_header_path,in,processed_files:
return
processed_files.add(gtest_header_path)
#,Reads,each,line,in,the,given,gtest,header.
for,line,in,file(os.path.join(gtest_root,,gtest_header_path),,'r'):
m,=,INCLUDE_GTEST_FILE_REGEX.match(line)
if,m:
#,It's,'#include,"gtest/..."',-,let's,process,it,recursively.
ProcessFile('include/',+,m.group(1))
else:
#,Otherwise,we,copy,the,line,unchanged,to,the,output,file.
output_file.write(line)
ProcessFile(GTEST_H_SEED)
output_file.close()
def,FuseGTestAllCcToFile(gtest_root,,output_file):
"""Scans,folder,gtest_root,to,generate,gtest/gtest-all.cc,in,output_file."""
processed_files,=,sets.Set()
def,ProcessFile(gtest_source_file):
"""Processes,the,given,gtest,source,file."""
#,We,don't,process,the,same,#included,file,twice.
if,gtest_source_file,in,processed_files:
return
processed_files.add(gtest_source_file)
#,Reads,each,line,in,the,given,gtest,source,file.
for,line,in,file(os.path.join(gtest_root,,gtest_source_file),,'r'):
m,=,INCLUDE_GTEST_FILE_REGEX.match(line)
if,m:
if,'include/',+,m.group(1),==,GTEST_SPI_H_SEED:
#,It's,'#include,"gtest/gtest-spi.h"'.,,This,file,is,not
#,#included,by,"gtest/gtest.h",,so,we,need,to,process,it.
ProcessFile(GTEST_SPI_H_SEED)
else:
#,It's,'#include,"gtest/foo.h"',where,foo,is,not,gtest-spi.
#,We,treat,it,as,'#include,"gtest/gtest.h"',,as,all,other
#,gtest,headers,are,being,fused,into,gtest.h,and,cannot,be
#,#included,directly.
#,There,is,no,need,to,#include,"gtest/gtest.h",more,than,once.
if,not,GTEST_H_SEED,in,processed_files:
processed_files.add(GTEST_H_SEED)
output_file.write('#include,"%s"\n',%,(GTEST_H_OUTPUT,))
else:
m,=,INCLUDE_SRC_FILE_REGEX.match(line)
if,m:
#,It's,'#include,"src/foo"',-,let's,process,it,recursively.
ProcessFile(m.group(1))
else:
output_file.write(line)
ProcessFile(GTEST_ALL_CC_SEED)
def,FuseGTestAllCc(gtest_root,,output_dir):
"""Scans,folder,gtest_root,to,generate,gtest/gtest-all.cc,in,output_dir."""
output_file,=,file(os.path.join(output_dir,,GTEST_ALL_CC_OUTPUT),,'w')
FuseGTestAllCcToFile(gtest_root,,output_file)
output_file.close()
def,FuseGTest(gtest_root,,output_dir):
"""Fuses,gtest.h,and,gtest-all.cc."""
ValidateGTestRootDir(gtest_root)
ValidateOutputDir(output_dir)
FuseGTestH(gtest_root,,output_dir)
FuseGTestAllCc(gtest_root,,output_dir)
def,main():
argc,=,len(sys.argv)
if,argc,==,2:
#,fuse_gtest_files.py,OUTPUT_DIR
FuseGTest(DEFAULT_GTEST_ROOT_DIR,,sys.argv[1])
elif,argc,==,3:
#,fuse_gtest_files.py,GTEST_ROOT_DIR,OUTPUT_DIR
FuseGTest(sys.argv[1],,sys.argv[2])
else:
print,__doc__
sys.exit(1)
if,__name__,==,'__main__':
main()
#!/usr/bin/env,python
#
#,Copyright,2006,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""gen_gtest_pred_impl.py,v0.1
Generates,the,implementation,of,Google,Test,predicate,assertions,and
accompanying,tests.
Usage:
gen_gtest_pred_impl.py,MAX_ARITY
where,MAX_ARITY,is,a,positive,integer.
The,command,generates,the,implementation,of,up-to,MAX_ARITY-ary
predicate,assertions,,and,writes,it,to,file,gtest_pred_impl.h,in,the
directory,where,the,script,is.,,It,also,generates,the,accompanying
unit,test,in,file,gtest_pred_impl_unittest.cc.
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,sys
import,time
#,Where,this,script,is.
SCRIPT_DIR,=,os.path.dirname(sys.argv[0])
#,Where,to,store,the,generated,header.
HEADER,=,os.path.join(SCRIPT_DIR,,'../include/gtest/gtest_pred_impl.h')
#,Where,to,store,the,generated,unit,test.
UNIT_TEST,=,os.path.join(SCRIPT_DIR,,'../test/gtest_pred_impl_unittest.cc')
def,HeaderPreamble(n):
"""Returns,the,preamble,for,the,header,file.
Args:
n:,,the,maximum,arity,of,the,predicate,macros,to,be,generated.
"""
#,A,map,that,defines,the,values,used,in,the,preamble,template.
DEFS,=,{
'today',:,time.strftime('%m/%d/%Y'),
'year',:,time.strftime('%Y'),
'command',:,'%s,%s',%,(os.path.basename(sys.argv[0]),,n),
'n',:,n
}
return,(
"""//,Copyright,2006,,Google,Inc.
//,All,rights,reserved.
//
//,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
//,modification,,are,permitted,provided,that,the,following,conditions,are
//,met:
//
//,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
//,notice,,this,list,of,conditions,and,the,following,disclaimer.
//,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
//,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
//,in,the,documentation,and/or,other,materials,provided,with,the
//,distribution.
//,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
//,contributors,may,be,used,to,endorse,or,promote,products,derived,from
//,this,software,without,specific,prior,written,permission.
//
//,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
//,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
//,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
//,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
//,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
//,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
//,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
//,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
//,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
//,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
//,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
//,This,file,is,AUTOMATICALLY,GENERATED,on,%(today)s,by,command
//,'%(command)s'.,,DO,NOT,EDIT,BY,HAND!
//
//,Implements,a,family,of,generic,predicate,assertion,macros.
#ifndef,GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_
#define,GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_
//,Makes,sure,this,header,is,not,included,before,gtest.h.
#ifndef,GTEST_INCLUDE_GTEST_GTEST_H_
#error,Do,not,include,gtest_pred_impl.h,directly.,,Include,gtest.h,instead.
#endif,,//,GTEST_INCLUDE_GTEST_GTEST_H_
//,This,header,implements,a,family,of,generic,predicate,assertion
//,macros:
//
//,,,ASSERT_PRED_FORMAT1(pred_format,,v1)
//,,,ASSERT_PRED_FORMAT2(pred_format,,v1,,v2)
//,,,...
//
//,where,pred_format,is,a,function,or,functor,that,takes,n,(in,the
//,case,of,ASSERT_PRED_FORMATn),values,and,their,source,expression
//,text,,and,returns,a,testing::AssertionResult.,,See,the,definition
//,of,ASSERT_EQ,in,gtest.h,for,an,example.
//
//,If,you,don't,care,about,formatting,,you,can,use,the,more
//,restrictive,version:
//
//,,,ASSERT_PRED1(pred,,v1)
//,,,ASSERT_PRED2(pred,,v1,,v2)
//,,,...
//
//,where,pred,is,an,n-ary,function,or,functor,that,returns,bool,
//,and,the,values,v1,,v2,,...,,must,support,the,<<,operator,for
//,streaming,to,std::ostream.
//
//,We,also,define,the,EXPECT_*,variations.
//
//,For,now,we,only,support,predicates,whose,arity,is,at,most,%(n)s.
//,Please,email,googletestframework@googlegroups.com,if,you,need
//,support,for,higher,arities.
//,GTEST_ASSERT_,is,the,basic,statement,to,which,all,of,the,assertions
//,in,this,file,reduce.,,Don't,use,this,in,your,code.
#define,GTEST_ASSERT_(expression,,on_failure),\\
GTEST_AMBIGUOUS_ELSE_BLOCKER_,\\
if,(const,::testing::AssertionResult,gtest_ar,=,(expression)),\\
,;,\\
else,\\
on_failure(gtest_ar.failure_message())
""",%,DEFS)
def,Arity(n):
"""Returns,the,English,name,of,the,given,arity."""
if,n,<,0:
return,None
elif,n,<=,3:
return,['nullary',,'unary',,'binary',,'ternary'][n]
else:
return,'%s-ary',%,n
def,Title(word):
"""Returns,the,given,word,in,title,case.,,The,difference,between
this,and,string's,title(),method,is,that,Title('4-ary'),is,'4-ary'
while,'4-ary'.title(),is,'4-Ary'."""
return,word[0].upper(),+,word[1:]
def,OneTo(n):
"""Returns,the,list,[1,,2,,3,,...,,n]."""
return,range(1,,n,+,1)
def,Iter(n,,format,,sep=''):
"""Given,a,positive,integer,n,,a,format,string,that,contains,0,or
more,'%s',format,specs,,and,optionally,a,separator,string,,returns
the,join,of,n,strings,,each,formatted,with,the,format,string,on,an
iterator,ranged,from,1,to,n.
Example:
Iter(3,,'v%s',,sep=',,'),returns,'v1,,v2,,v3'.
"""
#,How,many,'%s',specs,are,in,format?
spec_count,=,len(format.split('%s')),-,1
return,sep.join([format,%,(spec_count,*,(i,)),for,i,in,OneTo(n)])
def,ImplementationForArity(n):
"""Returns,the,implementation,of,n-ary,predicate,assertions."""
#,A,map,the,defines,the,values,used,in,the,implementation,template.
DEFS,=,{
'n',:,str(n),
'vs',:,Iter(n,,'v%s',,sep=',,'),
'vts',:,Iter(n,,'#v%s',,sep=',,'),
'arity',:,Arity(n),
'Arity',:,Title(Arity(n))
}
impl,=,"""
//,Helper,function,for,implementing,{EXPECT|ASSERT}_PRED%(n)s.,,Don't,use
//,this,in,your,code.
template,<typename,Pred""",%,DEFS
impl,+=,Iter(n,,""",
typename,T%s""")
impl,+=,""">
AssertionResult,AssertPred%(n)sHelper(const,char*,pred_text""",%,DEFS
impl,+=,Iter(n,,""",
const,char*,e%s""")
impl,+=,""",
Pred,pred"""
impl,+=,Iter(n,,""",
const,T%s&,v%s""")
impl,+=,"""),{
if,(pred(%(vs)s)),return,AssertionSuccess(),;
""",%,DEFS
impl,+=,',,return,AssertionFailure(),<<,pred_text,<<,"("'
impl,+=,Iter(n,,"""
<<,e%s""",,sep=',<<,",,"')
impl,+=,',<<,"),evaluates,to,false,,where"'
impl,+=,Iter(n,,"""
<<,"\\n",<<,e%s,<<,",evaluates,to,",<<,v%s""")
impl,+=,""",;
}
//,Internal,macro,for,implementing,{EXPECT|ASSERT}_PRED_FORMAT%(n)s.
//,Don't,use,this,in,your,code.
#define,GTEST_PRED_FORMAT%(n)s_(pred_format,,%(vs)s,,on_failure)\\
GTEST_ASSERT_(pred_format(%(vts)s,,%(vs)s),\\
on_failure)
//,Internal,macro,for,implementing,{EXPECT|ASSERT}_PRED%(n)s.,,Don't,use
//,this,in,your,code.
#define,GTEST_PRED%(n)s_(pred,,%(vs)s,,on_failure)\\
GTEST_ASSERT_(::testing::AssertPred%(n)sHelper(#pred""",%,DEFS
impl,+=,Iter(n,,""",,\\
#v%s""")
impl,+=,""",,\\
pred"""
impl,+=,Iter(n,,""",,\\
v%s""")
impl,+=,"""),,on_failure)
//,%(Arity)s,predicate,assertion,macros.
#define,EXPECT_PRED_FORMAT%(n)s(pred_format,,%(vs)s),\\
GTEST_PRED_FORMAT%(n)s_(pred_format,,%(vs)s,,GTEST_NONFATAL_FAILURE_)
#define,EXPECT_PRED%(n)s(pred,,%(vs)s),\\
GTEST_PRED%(n)s_(pred,,%(vs)s,,GTEST_NONFATAL_FAILURE_)
#define,ASSERT_PRED_FORMAT%(n)s(pred_format,,%(vs)s),\\
GTEST_PRED_FORMAT%(n)s_(pred_format,,%(vs)s,,GTEST_FATAL_FAILURE_)
#define,ASSERT_PRED%(n)s(pred,,%(vs)s),\\
GTEST_PRED%(n)s_(pred,,%(vs)s,,GTEST_FATAL_FAILURE_)
""",%,DEFS
return,impl
def,HeaderPostamble():
"""Returns,the,postamble,for,the,header,file."""
return,"""
#endif,,//,GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_
"""
def,GenerateFile(path,,content):
"""Given,a,file,path,and,a,content,string,,overwrites,it,with,the
given,content."""
print,'Updating,file,%s,.,.,.',%,path
f,=,file(path,,'w+')
print,>>f,,content,
f.close()
print,'File,%s,has,been,updated.',%,path
def,GenerateHeader(n):
"""Given,the,maximum,arity,n,,updates,the,header,file,that,implements
the,predicate,assertions."""
GenerateFile(HEADER,
HeaderPreamble(n)
+,''.join([ImplementationForArity(i),for,i,in,OneTo(n)])
+,HeaderPostamble())
def,UnitTestPreamble():
"""Returns,the,preamble,for,the,unit,test,file."""
#,A,map,that,defines,the,values,used,in,the,preamble,template.
DEFS,=,{
'today',:,time.strftime('%m/%d/%Y'),
'year',:,time.strftime('%Y'),
'command',:,'%s,%s',%,(os.path.basename(sys.argv[0]),,sys.argv[1]),
}
return,(
"""//,Copyright,2006,,Google,Inc.
//,All,rights,reserved.
//
//,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
//,modification,,are,permitted,provided,that,the,following,conditions,are
//,met:
//
//,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
//,notice,,this,list,of,conditions,and,the,following,disclaimer.
//,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
//,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
//,in,the,documentation,and/or,other,materials,provided,with,the
//,distribution.
//,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
//,contributors,may,be,used,to,endorse,or,promote,products,derived,from
//,this,software,without,specific,prior,written,permission.
//
//,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
//,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
//,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
//,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
//,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
//,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
//,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
//,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
//,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
//,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
//,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
//,This,file,is,AUTOMATICALLY,GENERATED,on,%(today)s,by,command
//,'%(command)s'.,,DO,NOT,EDIT,BY,HAND!
//,Regression,test,for,gtest_pred_impl.h
//
//,This,file,is,generated,by,a,script,and,quite,long.,,If,you,intend,to
//,learn,how,Google,Test,works,by,reading,its,unit,tests,,read
//,gtest_unittest.cc,instead.
//
//,This,is,intended,as,a,regression,test,for,the,Google,Test,predicate
//,assertions.,,We,compile,it,as,part,of,the,gtest_unittest,target
//,only,to,keep,the,implementation,tidy,and,compact,,as,it,is,quite
//,involved,to,set,up,the,stage,for,testing,Google,Test,using,Google
//,Test,itself.
//
//,Currently,,gtest_unittest,takes,~11,seconds,to,run,in,the,testing
//,daemon.,,In,the,future,,if,it,grows,too,large,and,needs,much,more
//,time,to,finish,,we,should,consider,separating,this,file,into,a
//,stand-alone,regression,test.
#include,<iostream>
#include,"gtest/gtest.h"
#include,"gtest/gtest-spi.h"
//,A,user-defined,data,type.
struct,Bool,{
explicit,Bool(int,val),:,value(val,!=,0),{}
bool,operator>(int,n),const,{,return,value,>,Bool(n).value,;,}
Bool,operator+(const,Bool&,rhs),const,{,return,Bool(value,+,rhs.value),;,}
bool,operator==(const,Bool&,rhs),const,{,return,value,==,rhs.value,;,}
bool,value,;
},;
//,Enables,Bool,to,be,used,in,assertions.
std::ostream&,operator<<(std::ostream&,os,,const,Bool&,x),{
return,os,<<,(x.value,?,"true",:,"false"),;
}
""",%,DEFS)
def,TestsForArity(n):
"""Returns,the,tests,for,n-ary,predicate,assertions."""
#,A,map,that,defines,the,values,used,in,the,template,for,the,tests.
DEFS,=,{
'n',:,n,
'es',:,Iter(n,,'e%s',,sep=',,'),
'vs',:,Iter(n,,'v%s',,sep=',,'),
'vts',:,Iter(n,,'#v%s',,sep=',,'),
'tvs',:,Iter(n,,'T%s,v%s',,sep=',,'),
'int_vs',:,Iter(n,,'int,v%s',,sep=',,'),
'Bool_vs',:,Iter(n,,'Bool,v%s',,sep=',,'),
'types',:,Iter(n,,'typename,T%s',,sep=',,'),
'v_sum',:,Iter(n,,'v%s',,sep=',+,'),
'arity',:,Arity(n),
'Arity',:,Title(Arity(n)),
}
tests,=,(
"""//,Sample,functions/functors,for,testing,%(arity)s,predicate,assertions.
//,A,%(arity)s,predicate,function.
template,<%(types)s>
bool,PredFunction%(n)s(%(tvs)s),{
return,%(v_sum)s,>,0,;
}
//,The,following,two,functions,are,needed,to,circumvent,a,bug,in
//,gcc,2.95.3,,which,sometimes,has,problem,with,the,above,template
//,function.
bool,PredFunction%(n)sInt(%(int_vs)s),{
return,%(v_sum)s,>,0,;
}
bool,PredFunction%(n)sBool(%(Bool_vs)s),{
return,%(v_sum)s,>,0,;
}
""",%,DEFS)
tests,+=,"""
//,A,%(arity)s,predicate,functor.
struct,PredFunctor%(n)s,{
template,<%(types)s>
bool,operator()(""",%,DEFS
tests,+=,Iter(n,,'const,T%s&,v%s',,sep=""",
""")
tests,+=,"""),{
return,%(v_sum)s,>,0,;
}
},;
""",%,DEFS
tests,+=,"""
//,A,%(arity)s,predicate-formatter,function.
template,<%(types)s>
testing::AssertionResult,PredFormatFunction%(n)s(""",%,DEFS
tests,+=,Iter(n,,'const,char*,e%s',,sep=""",
""")
tests,+=,Iter(n,,""",
const,T%s&,v%s""")
tests,+=,"""),{
if,(PredFunction%(n)s(%(vs)s))
return,testing::AssertionSuccess(),;
return,testing::AssertionFailure()
<<,""",%,DEFS
tests,+=,Iter(n,,'e%s',,sep=',<<,",+,",<<,')
tests,+=,"""
<<,",is,expected,to,be,positive,,but,evaluates,to,"
<<,%(v_sum)s,<<,".",;
}
""",%,DEFS
tests,+=,"""
//,A,%(arity)s,predicate-formatter,functor.
struct,PredFormatFunctor%(n)s,{
template,<%(types)s>
testing::AssertionResult,operator()(""",%,DEFS
tests,+=,Iter(n,,'const,char*,e%s',,sep=""",
""")
tests,+=,Iter(n,,""",
const,T%s&,v%s""")
tests,+=,"""),const,{
return,PredFormatFunction%(n)s(%(es)s,,%(vs)s),;
}
},;
""",%,DEFS
tests,+=,"""
//,Tests,for,{EXPECT|ASSERT}_PRED_FORMAT%(n)s.
class,Predicate%(n)sTest,:,public,testing::Test,{
protected:
virtual,void,SetUp(),{
expected_to_finish_,=,true,;
finished_,=,false,;""",%,DEFS
tests,+=,"""
""",+,Iter(n,,'n%s_,=,'),+,"""0,;
}
"""
tests,+=,"""
virtual,void,TearDown(),{
//,Verifies,that,each,of,the,predicate's,arguments,was,evaluated
//,exactly,once."""
tests,+=,''.join(["""
EXPECT_EQ(1,,n%s_),<<
"The,predicate,assertion,didn't,evaluate,argument,%s,"
"exactly,once.",;""",%,(i,,i,+,1),for,i,in,OneTo(n)])
tests,+=,"""
//,Verifies,that,the,control,flow,in,the,test,function,is,expected.
if,(expected_to_finish_,&&,!finished_),{
FAIL(),<<,"The,predicate,assertion,unexpactedly,aborted,the,test.",;
},else,if,(!expected_to_finish_,&&,finished_),{
FAIL(),<<,"The,failed,predicate,assertion,didn't,abort,the,test,"
"as,expected.",;
}
}
//,true,iff,the,test,function,is,expected,to,run,to,finish.
static,bool,expected_to_finish_,;
//,true,iff,the,test,function,did,run,to,finish.
static,bool,finished_,;
""",%,DEFS
tests,+=,Iter(n,,"""
static,int,n%s_,;""")
tests,+=,"""
},;
bool,Predicate%(n)sTest::expected_to_finish_,;
bool,Predicate%(n)sTest::finished_,;
""",%,DEFS
tests,+=,Iter(n,,"""int,Predicate%%(n)sTest::n%s_,;
"""),%,DEFS
tests,+=,"""
typedef,Predicate%(n)sTest,EXPECT_PRED_FORMAT%(n)sTest,;
typedef,Predicate%(n)sTest,ASSERT_PRED_FORMAT%(n)sTest,;
typedef,Predicate%(n)sTest,EXPECT_PRED%(n)sTest,;
typedef,Predicate%(n)sTest,ASSERT_PRED%(n)sTest,;
""",%,DEFS
def,GenTest(use_format,,use_assert,,expect_failure,
use_functor,,use_user_type):
"""Returns,the,test,for,a,predicate,assertion,macro.
Args:
use_format:,,,,,true,iff,the,assertion,is,a,*_PRED_FORMAT*.
use_assert:,,,,,true,iff,the,assertion,is,a,ASSERT_*.
expect_failure:,true,iff,the,assertion,is,expected,to,fail.
use_functor:,,,,true,iff,the,first,argument,of,the,assertion,is
a,functor,(as,opposed,to,a,function)
use_user_type:,,true,iff,the,predicate,functor/function,takes
argument(s),of,a,user-defined,type.
Example:
GenTest(1,,0,,0,,1,,0),returns,a,test,that,tests,the,behavior
of,a,successful,EXPECT_PRED_FORMATn(),that,takes,a,functor
whose,arguments,have,built-in,types."""
if,use_assert:
assrt,=,'ASSERT',,#,'assert',is,reserved,,so,we,cannot,use
#,that,identifier,here.
else:
assrt,=,'EXPECT'
assertion,=,assrt,+,'_PRED'
if,use_format:
pred_format,=,'PredFormat'
assertion,+=,'_FORMAT'
else:
pred_format,=,'Pred'
assertion,+=,'%(n)s',%,DEFS
if,use_functor:
pred_format_type,=,'functor'
pred_format,+=,'Functor%(n)s()'
else:
pred_format_type,=,'function'
pred_format,+=,'Function%(n)s'
if,not,use_format:
if,use_user_type:
pred_format,+=,'Bool'
else:
pred_format,+=,'Int'
test_name,=,pred_format_type.title()
if,use_user_type:
arg_type,=,'user-defined,type,(Bool)'
test_name,+=,'OnUserType'
if,expect_failure:
arg,=,'Bool(n%s_++)'
else:
arg,=,'Bool(++n%s_)'
else:
arg_type,=,'built-in,type,(int)'
test_name,+=,'OnBuiltInType'
if,expect_failure:
arg,=,'n%s_++'
else:
arg,=,'++n%s_'
if,expect_failure:
successful_or_failed,=,'failed'
expected_or_not,=,'expected.'
test_name,+=,,'Failure'
else:
successful_or_failed,=,'successful'
expected_or_not,=,'UNEXPECTED!'
test_name,+=,,'Success'
#,A,map,that,defines,the,values,used,in,the,test,template.
defs,=,DEFS.copy()
defs.update({
'assert',:,assrt,
'assertion',:,assertion,
'test_name',:,test_name,
'pf_type',:,pred_format_type,
'pf',:,pred_format,
'arg_type',:,arg_type,
'arg',:,arg,
'successful',:,successful_or_failed,
'expected',:,expected_or_not,
})
test,=,"""
//,Tests,a,%(successful)s,%(assertion)s,where,the
//,predicate-formatter,is,a,%(pf_type)s,on,a,%(arg_type)s.
TEST_F(%(assertion)sTest,,%(test_name)s),{""",%,defs
indent,=,(len(assertion),+,3)*','
extra_indent,=,''
if,expect_failure:
extra_indent,=,',,'
if,use_assert:
test,+=,"""
expected_to_finish_,=,false,;
EXPECT_FATAL_FAILURE({,,//,NOLINT"""
else:
test,+=,"""
EXPECT_NONFATAL_FAILURE({,,//,NOLINT"""
test,+=,'\n',+,extra_indent,+,""",,%(assertion)s(%(pf)s""",%,defs
test,=,test,%,defs
test,+=,Iter(n,,',\n',+,indent,+,extra_indent,+,'%(arg)s',%,defs)
test,+=,'),;\n',+,extra_indent,+,',,finished_,=,true,;\n'
if,expect_failure:
test,+=,',,},,""),;\n'
test,+=,'}\n'
return,test
#,Generates,tests,for,all,2**6,=,64,combinations.
tests,+=,''.join([GenTest(use_format,,use_assert,,expect_failure,
use_functor,,use_user_type)
for,use_format,in,[0,,1]
for,use_assert,in,[0,,1]
for,expect_failure,in,[0,,1]
for,use_functor,in,[0,,1]
for,use_user_type,in,[0,,1]
])
return,tests
def,UnitTestPostamble():
"""Returns,the,postamble,for,the,tests."""
return,''
def,GenerateUnitTest(n):
"""Returns,the,tests,for,up-to,n-ary,predicate,assertions."""
GenerateFile(UNIT_TEST,
UnitTestPreamble()
+,''.join([TestsForArity(i),for,i,in,OneTo(n)])
+,UnitTestPostamble())
def,_Main():
"""The,entry,point,of,the,script.,,Generates,the,header,file,and,its
unit,test."""
if,len(sys.argv),!=,2:
print,__doc__
print,'Author:,',+,__author__
sys.exit(1)
n,=,int(sys.argv[1])
GenerateHeader(n)
GenerateUnitTest(n)
if,__name__,==,'__main__':
_Main()
#!/usr/bin/env,python
#
#,Copyright,2008,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""pump,v0.2.0,-,Pretty,Useful,for,Meta,Programming.
A,tool,for,preprocessor,meta,programming.,,Useful,for,generating
repetitive,boilerplate,code.,,Especially,useful,for,writing,C++
classes,,functions,,macros,,and,templates,that,need,to,work,with
various,number,of,arguments.
USAGE:
pump.py,SOURCE_FILE
EXAMPLES:
pump.py,foo.cc.pump
Converts,foo.cc.pump,to,foo.cc.
GRAMMAR:
CODE,::=,ATOMIC_CODE*
ATOMIC_CODE,::=,$var,ID,=,EXPRESSION
|,$var,ID,=,[[,CODE,]]
|,$range,ID,EXPRESSION..EXPRESSION
|,$for,ID,SEPARATOR,[[,CODE,]]
|,$($)
|,$ID
|,$(EXPRESSION)
|,$if,EXPRESSION,[[,CODE,]],ELSE_BRANCH
|,[[,CODE,]]
|,RAW_CODE
SEPARATOR,::=,RAW_CODE,|,EMPTY
ELSE_BRANCH,::=,$else,[[,CODE,]]
|,$elif,EXPRESSION,[[,CODE,]],ELSE_BRANCH
|,EMPTY
EXPRESSION,has,Python,syntax.
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,re
import,sys
TOKEN_TABLE,=,[
(re.compile(r'\$var\s+'),,'$var'),
(re.compile(r'\$elif\s+'),,'$elif'),
(re.compile(r'\$else\s+'),,'$else'),
(re.compile(r'\$for\s+'),,'$for'),
(re.compile(r'\$if\s+'),,'$if'),
(re.compile(r'\$range\s+'),,'$range'),
(re.compile(r'\$[_A-Za-z]\w*'),,'$id'),
(re.compile(r'\$\(\$\)'),,'$($)'),
(re.compile(r'\$'),,'$'),
(re.compile(r'\[\[\n?'),,'[['),
(re.compile(r'\]\]\n?'),,']]'),
]
class,Cursor:
"""Represents,a,position,(line,and,column),in,a,text,file."""
def,__init__(self,,line=-1,,column=-1):
self.line,=,line
self.column,=,column
def,__eq__(self,,rhs):
return,self.line,==,rhs.line,and,self.column,==,rhs.column
def,__ne__(self,,rhs):
return,not,self,==,rhs
def,__lt__(self,,rhs):
return,self.line,<,rhs.line,or,(
self.line,==,rhs.line,and,self.column,<,rhs.column)
def,__le__(self,,rhs):
return,self,<,rhs,or,self,==,rhs
def,__gt__(self,,rhs):
return,rhs,<,self
def,__ge__(self,,rhs):
return,rhs,<=,self
def,__str__(self):
if,self,==,Eof():
return,'EOF'
else:
return,'%s(%s)',%,(self.line,+,1,,self.column)
def,__add__(self,,offset):
return,Cursor(self.line,,self.column,+,offset)
def,__sub__(self,,offset):
return,Cursor(self.line,,self.column,-,offset)
def,Clone(self):
"""Returns,a,copy,of,self."""
return,Cursor(self.line,,self.column)
#,Special,cursor,to,indicate,the,end-of-file.
def,Eof():
"""Returns,the,special,cursor,to,denote,the,end-of-file."""
return,Cursor(-1,,-1)
class,Token:
"""Represents,a,token,in,a,Pump,source,file."""
def,__init__(self,,start=None,,end=None,,value=None,,token_type=None):
if,start,is,None:
self.start,=,Eof()
else:
self.start,=,start
if,end,is,None:
self.end,=,Eof()
else:
self.end,=,end
self.value,=,value
self.token_type,=,token_type
def,__str__(self):
return,'Token,@%s:,\'%s\',type=%s',%,(
self.start,,self.value,,self.token_type)
def,Clone(self):
"""Returns,a,copy,of,self."""
return,Token(self.start.Clone(),,self.end.Clone(),,self.value,
self.token_type)
def,StartsWith(lines,,pos,,string):
"""Returns,True,iff,the,given,position,in,lines,starts,with,'string'."""
return,lines[pos.line][pos.column:].startswith(string)
def,FindFirstInLine(line,,token_table):
best_match_start,=,-1
for,(regex,,token_type),in,token_table:
m,=,regex.search(line)
if,m:
#,We,found,regex,in,lines
if,best_match_start,<,0,or,m.start(),<,best_match_start:
best_match_start,=,m.start()
best_match_length,=,m.end(),-,m.start()
best_match_token_type,=,token_type
if,best_match_start,<,0:
return,None
return,(best_match_start,,best_match_length,,best_match_token_type)
def,FindFirst(lines,,token_table,,cursor):
"""Finds,the,first,occurrence,of,any,string,in,strings,in,lines."""
start,=,cursor.Clone()
cur_line_number,=,cursor.line
for,line,in,lines[start.line:]:
if,cur_line_number,==,start.line:
line,=,line[start.column:]
m,=,FindFirstInLine(line,,token_table)
if,m:
#,We,found,a,regex,in,line.
(start_column,,length,,token_type),=,m
if,cur_line_number,==,start.line:
start_column,+=,start.column
found_start,=,Cursor(cur_line_number,,start_column)
found_end,=,found_start,+,length
return,MakeToken(lines,,found_start,,found_end,,token_type)
cur_line_number,+=,1
#,We,failed,to,find,str,in,lines
return,None
def,SubString(lines,,start,,end):
"""Returns,a,substring,in,lines."""
if,end,==,Eof():
end,=,Cursor(len(lines),-,1,,len(lines[-1]))
if,start,>=,end:
return,''
if,start.line,==,end.line:
return,lines[start.line][start.column:end.column]
result_lines,=,([lines[start.line][start.column:]],+
lines[start.line,+,1:end.line],+
[lines[end.line][:end.column]])
return,''.join(result_lines)
def,StripMetaComments(str):
"""Strip,meta,comments,from,each,line,in,the,given,string."""
#,First,,completely,remove,lines,containing,nothing,but,a,meta
#,comment,,including,the,trailing,\n.
str,=,re.sub(r'^\s*\$\$.*\n',,'',,str)
#,Then,,remove,meta,comments,from,contentful,lines.
return,re.sub(r'\s*\$\$.*',,'',,str)
def,MakeToken(lines,,start,,end,,token_type):
"""Creates,a,new,instance,of,Token."""
return,Token(start,,end,,SubString(lines,,start,,end),,token_type)
def,ParseToken(lines,,pos,,regex,,token_type):
line,=,lines[pos.line][pos.column:]
m,=,regex.search(line)
if,m,and,not,m.start():
return,MakeToken(lines,,pos,,pos,+,m.end(),,token_type)
else:
print,'ERROR:,%s,expected,at,%s.',%,(token_type,,pos)
sys.exit(1)
ID_REGEX,=,re.compile(r'[_A-Za-z]\w*')
EQ_REGEX,=,re.compile(r'=')
REST_OF_LINE_REGEX,=,re.compile(r'.*?(?=$|\$\$)')
OPTIONAL_WHITE_SPACES_REGEX,=,re.compile(r'\s*')
WHITE_SPACE_REGEX,=,re.compile(r'\s')
DOT_DOT_REGEX,=,re.compile(r'\.\.')
def,Skip(lines,,pos,,regex):
line,=,lines[pos.line][pos.column:]
m,=,re.search(regex,,line)
if,m,and,not,m.start():
return,pos,+,m.end()
else:
return,pos
def,SkipUntil(lines,,pos,,regex,,token_type):
line,=,lines[pos.line][pos.column:]
m,=,re.search(regex,,line)
if,m:
return,pos,+,m.start()
else:
print,('ERROR:,%s,expected,on,line,%s,after,column,%s.',%
(token_type,,pos.line,+,1,,pos.column))
sys.exit(1)
def,ParseExpTokenInParens(lines,,pos):
def,ParseInParens(pos):
pos,=,Skip(lines,,pos,,OPTIONAL_WHITE_SPACES_REGEX)
pos,=,Skip(lines,,pos,,r'\(')
pos,=,Parse(pos)
pos,=,Skip(lines,,pos,,r'\)')
return,pos
def,Parse(pos):
pos,=,SkipUntil(lines,,pos,,r'\(|\)',,')')
if,SubString(lines,,pos,,pos,+,1),==,'(':
pos,=,Parse(pos,+,1)
pos,=,Skip(lines,,pos,,r'\)')
return,Parse(pos)
else:
return,pos
start,=,pos.Clone()
pos,=,ParseInParens(pos)
return,MakeToken(lines,,start,,pos,,'exp')
def,RStripNewLineFromToken(token):
if,token.value.endswith('\n'):
return,Token(token.start,,token.end,,token.value[:-1],,token.token_type)
else:
return,token
def,TokenizeLines(lines,,pos):
while,True:
found,=,FindFirst(lines,,TOKEN_TABLE,,pos)
if,not,found:
yield,MakeToken(lines,,pos,,Eof(),,'code')
return
if,found.start,==,pos:
prev_token,=,None
prev_token_rstripped,=,None
else:
prev_token,=,MakeToken(lines,,pos,,found.start,,'code')
prev_token_rstripped,=,RStripNewLineFromToken(prev_token)
if,found.token_type,==,'$var':
if,prev_token_rstripped:
yield,prev_token_rstripped
yield,found
id_token,=,ParseToken(lines,,found.end,,ID_REGEX,,'id')
yield,id_token
pos,=,Skip(lines,,id_token.end,,OPTIONAL_WHITE_SPACES_REGEX)
eq_token,=,ParseToken(lines,,pos,,EQ_REGEX,,'=')
yield,eq_token
pos,=,Skip(lines,,eq_token.end,,r'\s*')
if,SubString(lines,,pos,,pos,+,2),!=,'[[':
exp_token,=,ParseToken(lines,,pos,,REST_OF_LINE_REGEX,,'exp')
yield,exp_token
pos,=,Cursor(exp_token.end.line,+,1,,0)
elif,found.token_type,==,'$for':
if,prev_token_rstripped:
yield,prev_token_rstripped
yield,found
id_token,=,ParseToken(lines,,found.end,,ID_REGEX,,'id')
yield,id_token
pos,=,Skip(lines,,id_token.end,,WHITE_SPACE_REGEX)
elif,found.token_type,==,'$range':
if,prev_token_rstripped:
yield,prev_token_rstripped
yield,found
id_token,=,ParseToken(lines,,found.end,,ID_REGEX,,'id')
yield,id_token
pos,=,Skip(lines,,id_token.end,,OPTIONAL_WHITE_SPACES_REGEX)
dots_pos,=,SkipUntil(lines,,pos,,DOT_DOT_REGEX,,'..')
yield,MakeToken(lines,,pos,,dots_pos,,'exp')
yield,MakeToken(lines,,dots_pos,,dots_pos,+,2,,'..')
pos,=,dots_pos,+,2
new_pos,=,Cursor(pos.line,+,1,,0)
yield,MakeToken(lines,,pos,,new_pos,,'exp')
pos,=,new_pos
elif,found.token_type,==,'$':
if,prev_token:
yield,prev_token
yield,found
exp_token,=,ParseExpTokenInParens(lines,,found.end)
yield,exp_token
pos,=,exp_token.end
elif,(found.token_type,==,']]',or,found.token_type,==,'$if',or
found.token_type,==,'$elif',or,found.token_type,==,'$else'):
if,prev_token_rstripped:
yield,prev_token_rstripped
yield,found
pos,=,found.end
else:
if,prev_token:
yield,prev_token
yield,found
pos,=,found.end
def,Tokenize(s):
"""A,generator,that,yields,the,tokens,in,the,given,string."""
if,s,!=,'':
lines,=,s.splitlines(True)
for,token,in,TokenizeLines(lines,,Cursor(0,,0)):
yield,token
class,CodeNode:
def,__init__(self,,atomic_code_list=None):
self.atomic_code,=,atomic_code_list
class,VarNode:
def,__init__(self,,identifier=None,,atomic_code=None):
self.identifier,=,identifier
self.atomic_code,=,atomic_code
class,RangeNode:
def,__init__(self,,identifier=None,,exp1=None,,exp2=None):
self.identifier,=,identifier
self.exp1,=,exp1
self.exp2,=,exp2
class,ForNode:
def,__init__(self,,identifier=None,,sep=None,,code=None):
self.identifier,=,identifier
self.sep,=,sep
self.code,=,code
class,ElseNode:
def,__init__(self,,else_branch=None):
self.else_branch,=,else_branch
class,IfNode:
def,__init__(self,,exp=None,,then_branch=None,,else_branch=None):
self.exp,=,exp
self.then_branch,=,then_branch
self.else_branch,=,else_branch
class,RawCodeNode:
def,__init__(self,,token=None):
self.raw_code,=,token
class,LiteralDollarNode:
def,__init__(self,,token):
self.token,=,token
class,ExpNode:
def,__init__(self,,token,,python_exp):
self.token,=,token
self.python_exp,=,python_exp
def,PopFront(a_list):
head,=,a_list[0]
a_list[:1],=,[]
return,head
def,PushFront(a_list,,elem):
a_list[:0],=,[elem]
def,PopToken(a_list,,token_type=None):
token,=,PopFront(a_list)
if,token_type,is,not,None,and,token.token_type,!=,token_type:
print,'ERROR:,%s,expected,at,%s',%,(token_type,,token.start)
print,'ERROR:,%s,found,instead',%,(token,)
sys.exit(1)
return,token
def,PeekToken(a_list):
if,not,a_list:
return,None
return,a_list[0]
def,ParseExpNode(token):
python_exp,=,re.sub(r'([_A-Za-z]\w*)',,r'self.GetValue("\1")',,token.value)
return,ExpNode(token,,python_exp)
def,ParseElseNode(tokens):
def,Pop(token_type=None):
return,PopToken(tokens,,token_type)
next,=,PeekToken(tokens)
if,not,next:
return,None
if,next.token_type,==,'$else':
Pop('$else')
Pop('[[')
code_node,=,ParseCodeNode(tokens)
Pop(']]')
return,code_node
elif,next.token_type,==,'$elif':
Pop('$elif')
exp,=,Pop('code')
Pop('[[')
code_node,=,ParseCodeNode(tokens)
Pop(']]')
inner_else_node,=,ParseElseNode(tokens)
return,CodeNode([IfNode(ParseExpNode(exp),,code_node,,inner_else_node)])
elif,not,next.value.strip():
Pop('code')
return,ParseElseNode(tokens)
else:
return,None
def,ParseAtomicCodeNode(tokens):
def,Pop(token_type=None):
return,PopToken(tokens,,token_type)
head,=,PopFront(tokens)
t,=,head.token_type
if,t,==,'code':
return,RawCodeNode(head)
elif,t,==,'$var':
id_token,=,Pop('id')
Pop('=')
next,=,PeekToken(tokens)
if,next.token_type,==,'exp':
exp_token,=,Pop()
return,VarNode(id_token,,ParseExpNode(exp_token))
Pop('[[')
code_node,=,ParseCodeNode(tokens)
Pop(']]')
return,VarNode(id_token,,code_node)
elif,t,==,'$for':
id_token,=,Pop('id')
next_token,=,PeekToken(tokens)
if,next_token.token_type,==,'code':
sep_token,=,next_token
Pop('code')
else:
sep_token,=,None
Pop('[[')
code_node,=,ParseCodeNode(tokens)
Pop(']]')
return,ForNode(id_token,,sep_token,,code_node)
elif,t,==,'$if':
exp_token,=,Pop('code')
Pop('[[')
code_node,=,ParseCodeNode(tokens)
Pop(']]')
else_node,=,ParseElseNode(tokens)
return,IfNode(ParseExpNode(exp_token),,code_node,,else_node)
elif,t,==,'$range':
id_token,=,Pop('id')
exp1_token,=,Pop('exp')
Pop('..')
exp2_token,=,Pop('exp')
return,RangeNode(id_token,,ParseExpNode(exp1_token),
ParseExpNode(exp2_token))
elif,t,==,'$id':
return,ParseExpNode(Token(head.start,+,1,,head.end,,head.value[1:],,'id'))
elif,t,==,'$($)':
return,LiteralDollarNode(head)
elif,t,==,'$':
exp_token,=,Pop('exp')
return,ParseExpNode(exp_token)
elif,t,==,'[[':
code_node,=,ParseCodeNode(tokens)
Pop(']]')
return,code_node
else:
PushFront(tokens,,head)
return,None
def,ParseCodeNode(tokens):
atomic_code_list,=,[]
while,True:
if,not,tokens:
break
atomic_code_node,=,ParseAtomicCodeNode(tokens)
if,atomic_code_node:
atomic_code_list.append(atomic_code_node)
else:
break
return,CodeNode(atomic_code_list)
def,ParseToAST(pump_src_text):
"""Convert,the,given,Pump,source,text,into,an,AST."""
tokens,=,list(Tokenize(pump_src_text))
code_node,=,ParseCodeNode(tokens)
return,code_node
class,Env:
def,__init__(self):
self.variables,=,[]
self.ranges,=,[]
def,Clone(self):
clone,=,Env()
clone.variables,=,self.variables[:]
clone.ranges,=,self.ranges[:]
return,clone
def,PushVariable(self,,var,,value):
#,If,value,looks,like,an,int,,store,it,as,an,int.
try:
int_value,=,int(value)
if,('%s',%,int_value),==,value:
value,=,int_value
except,Exception:
pass
self.variables[:0],=,[(var,,value)]
def,PopVariable(self):
self.variables[:1],=,[]
def,PushRange(self,,var,,lower,,upper):
self.ranges[:0],=,[(var,,lower,,upper)]
def,PopRange(self):
self.ranges[:1],=,[]
def,GetValue(self,,identifier):
for,(var,,value),in,self.variables:
if,identifier,==,var:
return,value
print,'ERROR:,meta,variable,%s,is,undefined.',%,(identifier,)
sys.exit(1)
def,EvalExp(self,,exp):
try:
result,=,eval(exp.python_exp)
except,Exception,,e:
print,'ERROR:,caught,exception,%s:,%s',%,(e.__class__.__name__,,e)
print,('ERROR:,failed,to,evaluate,meta,expression,%s,at,%s',%
(exp.python_exp,,exp.token.start))
sys.exit(1)
return,result
def,GetRange(self,,identifier):
for,(var,,lower,,upper),in,self.ranges:
if,identifier,==,var:
return,(lower,,upper)
print,'ERROR:,range,%s,is,undefined.',%,(identifier,)
sys.exit(1)
class,Output:
def,__init__(self):
self.string,=,''
def,GetLastLine(self):
index,=,self.string.rfind('\n')
if,index,<,0:
return,''
return,self.string[index,+,1:]
def,Append(self,,s):
self.string,+=,s
def,RunAtomicCode(env,,node,,output):
if,isinstance(node,,VarNode):
identifier,=,node.identifier.value.strip()
result,=,Output()
RunAtomicCode(env.Clone(),,node.atomic_code,,result)
value,=,result.string
env.PushVariable(identifier,,value)
elif,isinstance(node,,RangeNode):
identifier,=,node.identifier.value.strip()
lower,=,int(env.EvalExp(node.exp1))
upper,=,int(env.EvalExp(node.exp2))
env.PushRange(identifier,,lower,,upper)
elif,isinstance(node,,ForNode):
identifier,=,node.identifier.value.strip()
if,node.sep,is,None:
sep,=,''
else:
sep,=,node.sep.value
(lower,,upper),=,env.GetRange(identifier)
for,i,in,range(lower,,upper,+,1):
new_env,=,env.Clone()
new_env.PushVariable(identifier,,i)
RunCode(new_env,,node.code,,output)
if,i,!=,upper:
output.Append(sep)
elif,isinstance(node,,RawCodeNode):
output.Append(node.raw_code.value)
elif,isinstance(node,,IfNode):
cond,=,env.EvalExp(node.exp)
if,cond:
RunCode(env.Clone(),,node.then_branch,,output)
elif,node.else_branch,is,not,None:
RunCode(env.Clone(),,node.else_branch,,output)
elif,isinstance(node,,ExpNode):
value,=,env.EvalExp(node)
output.Append('%s',%,(value,))
elif,isinstance(node,,LiteralDollarNode):
output.Append('$')
elif,isinstance(node,,CodeNode):
RunCode(env.Clone(),,node,,output)
else:
print,'BAD'
print,node
sys.exit(1)
def,RunCode(env,,code_node,,output):
for,atomic_code,in,code_node.atomic_code:
RunAtomicCode(env,,atomic_code,,output)
def,IsComment(cur_line):
return,'//',in,cur_line
def,IsInPreprocessorDirevative(prev_lines,,cur_line):
if,cur_line.lstrip().startswith('#'):
return,True
return,prev_lines,!=,[],and,prev_lines[-1].endswith('\\')
def,WrapComment(line,,output):
loc,=,line.find('//')
before_comment,=,line[:loc].rstrip()
if,before_comment,==,'':
indent,=,loc
else:
output.append(before_comment)
indent,=,len(before_comment),-,len(before_comment.lstrip())
prefix,=,indent*',',+,'//,'
max_len,=,80,-,len(prefix)
comment,=,line[loc,+,2:].strip()
segs,=,[seg,for,seg,in,re.split(r'(\w+\W*)',,comment),if,seg,!=,'']
cur_line,=,''
for,seg,in,segs:
if,len((cur_line,+,seg).rstrip()),<,max_len:
cur_line,+=,seg
else:
if,cur_line.strip(),!=,'':
output.append(prefix,+,cur_line.rstrip())
cur_line,=,seg.lstrip()
if,cur_line.strip(),!=,'':
output.append(prefix,+,cur_line.strip())
def,WrapCode(line,,line_concat,,output):
indent,=,len(line),-,len(line.lstrip())
prefix,=,indent*',',,#,Prefix,of,the,current,line
max_len,=,80,-,indent,-,len(line_concat),,#,Maximum,length,of,the,current,line
new_prefix,=,prefix,+,4*',',,#,Prefix,of,a,continuation,line
new_max_len,=,max_len,-,4,,#,Maximum,length,of,a,continuation,line
#,Prefers,to,wrap,a,line,after,a,',',or,',;'.
segs,=,[seg,for,seg,in,re.split(r'([^,,;]+[,,;]?)',,line.strip()),if,seg,!=,'']
cur_line,=,'',,#,The,current,line,without,leading,spaces.
for,seg,in,segs:
#,If,the,line,is,still,too,long,,wrap,at,a,space.
while,cur_line,==,'',and,len(seg.strip()),>,max_len:
seg,=,seg.lstrip()
split_at,=,seg.rfind(',',,0,,max_len)
output.append(prefix,+,seg[:split_at].strip(),+,line_concat)
seg,=,seg[split_at,+,1:]
prefix,=,new_prefix
max_len,=,new_max_len
if,len((cur_line,+,seg).rstrip()),<,max_len:
cur_line,=,(cur_line,+,seg).lstrip()
else:
output.append(prefix,+,cur_line.rstrip(),+,line_concat)
prefix,=,new_prefix
max_len,=,new_max_len
cur_line,=,seg.lstrip()
if,cur_line.strip(),!=,'':
output.append(prefix,+,cur_line.strip())
def,WrapPreprocessorDirevative(line,,output):
WrapCode(line,,',\\',,output)
def,WrapPlainCode(line,,output):
WrapCode(line,,'',,output)
def,IsHeaderGuardOrInclude(line):
return,(re.match(r'^#(ifndef|define|endif\s*//)\s*[\w_]+\s*$',,line),or
re.match(r'^#include\s',,line))
def,WrapLongLine(line,,output):
line,=,line.rstrip()
if,len(line),<=,80:
output.append(line)
elif,IsComment(line):
if,IsHeaderGuardOrInclude(line):
#,The,style,guide,made,an,exception,to,allow,long,header,guard,lines
#,and,includes.
output.append(line)
else:
WrapComment(line,,output)
elif,IsInPreprocessorDirevative(output,,line):
if,IsHeaderGuardOrInclude(line):
#,The,style,guide,made,an,exception,to,allow,long,header,guard,lines
#,and,includes.
output.append(line)
else:
WrapPreprocessorDirevative(line,,output)
else:
WrapPlainCode(line,,output)
def,BeautifyCode(string):
lines,=,string.splitlines()
output,=,[]
for,line,in,lines:
WrapLongLine(line,,output)
output2,=,[line.rstrip(),for,line,in,output]
return,'\n'.join(output2),+,'\n'
def,ConvertFromPumpSource(src_text):
"""Return,the,text,generated,from,the,given,Pump,source,text."""
ast,=,ParseToAST(StripMetaComments(src_text))
output,=,Output()
RunCode(Env(),,ast,,output)
return,BeautifyCode(output.string)
def,main(argv):
if,len(argv),==,1:
print,__doc__
sys.exit(1)
file_path,=,argv[-1]
output_str,=,ConvertFromPumpSource(file(file_path,,'r').read())
if,file_path.endswith('.pump'):
output_file_path,=,file_path[:-5]
else:
output_file_path,=,'-'
if,output_file_path,==,'-':
print,output_str,
else:
output_file,=,file(output_file_path,,'w')
output_file.write('//,This,file,was,GENERATED,by,command:\n')
output_file.write('//,,,,,%s,%s\n',%
(os.path.basename(__file__),,os.path.basename(file_path)))
output_file.write('//,DO,NOT,EDIT,BY,HAND!!!\n\n')
output_file.write(output_str)
output_file.close()
if,__name__,==,'__main__':
main(sys.argv)
#!/usr/bin/env,python
#
#,Copyright,2006,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Unit,test,for,Google,Test's,break-on-failure,mode.
A,user,can,ask,Google,Test,to,seg-fault,when,an,assertion,fails,,using
either,the,GTEST_BREAK_ON_FAILURE,environment,variable,or,the
--gtest_break_on_failure,flag.,,This,script,tests,such,functionality
by,invoking,gtest_break_on_failure_unittest_,(a,program,written,with
Google,Test),with,different,environments,and,command,line,flags.
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,gtest_test_utils
import,os
import,sys
#,Constants.
IS_WINDOWS,=,os.name,==,'nt'
#,The,environment,variable,for,enabling/disabling,the,break-on-failure,mode.
BREAK_ON_FAILURE_ENV_VAR,=,'GTEST_BREAK_ON_FAILURE'
#,The,command,line,flag,for,enabling/disabling,the,break-on-failure,mode.
BREAK_ON_FAILURE_FLAG,=,'gtest_break_on_failure'
#,The,environment,variable,for,enabling/disabling,the,throw-on-failure,mode.
THROW_ON_FAILURE_ENV_VAR,=,'GTEST_THROW_ON_FAILURE'
#,The,environment,variable,for,enabling/disabling,the,catch-exceptions,mode.
CATCH_EXCEPTIONS_ENV_VAR,=,'GTEST_CATCH_EXCEPTIONS'
#,Path,to,the,gtest_break_on_failure_unittest_,program.
EXE_PATH,=,gtest_test_utils.GetTestExecutablePath(
'gtest_break_on_failure_unittest_')
#,Utilities.
environ,=,os.environ.copy()
def,SetEnvVar(env_var,,value):
"""Sets,an,environment,variable,to,a,given,value,;,unsets,it,when,the
given,value,is,None.
"""
if,value,is,not,None:
environ[env_var],=,value
elif,env_var,in,environ:
del,environ[env_var]
def,Run(command):
"""Runs,a,command,;,returns,1,if,it,was,killed,by,a,signal,,or,0,otherwise."""
p,=,gtest_test_utils.Subprocess(command,,env=environ)
if,p.terminated_by_signal:
return,1
else:
return,0
#,The,tests.
class,GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):
"""Tests,using,the,GTEST_BREAK_ON_FAILURE,environment,variable,or
the,--gtest_break_on_failure,flag,to,turn,assertion,failures,into
segmentation,faults.
"""
def,RunAndVerify(self,,env_var_value,,flag_value,,expect_seg_fault):
"""Runs,gtest_break_on_failure_unittest_,and,verifies,that,it,does
(or,does,not),have,a,seg-fault.
Args:
env_var_value:,,,,value,of,the,GTEST_BREAK_ON_FAILURE,environment
variable,;,None,if,the,variable,should,be,unset.
flag_value:,,,,,,,value,of,the,--gtest_break_on_failure,flag,;
None,if,the,flag,should,not,be,present.
expect_seg_fault:,1,if,the,program,is,expected,to,generate,a,seg-fault,;
0,otherwise.
"""
SetEnvVar(BREAK_ON_FAILURE_ENV_VAR,,env_var_value)
if,env_var_value,is,None:
env_var_value_msg,=,',is,not,set'
else:
env_var_value_msg,=,'=',+,env_var_value
if,flag_value,is,None:
flag,=,''
elif,flag_value,==,'0':
flag,=,'--%s=0',%,BREAK_ON_FAILURE_FLAG
else:
flag,=,'--%s',%,BREAK_ON_FAILURE_FLAG
command,=,[EXE_PATH]
if,flag:
command.append(flag)
if,expect_seg_fault:
should_or_not,=,'should'
else:
should_or_not,=,'should,not'
has_seg_fault,=,Run(command)
SetEnvVar(BREAK_ON_FAILURE_ENV_VAR,,None)
msg,=,('when,%s%s,,an,assertion,failure,in,"%s",%s,cause,a,seg-fault.',%
(BREAK_ON_FAILURE_ENV_VAR,,env_var_value_msg,,','.join(command),
should_or_not))
self.assert_(has_seg_fault,==,expect_seg_fault,,msg)
def,testDefaultBehavior(self):
"""Tests,the,behavior,of,the,default,mode."""
self.RunAndVerify(env_var_value=None,
flag_value=None,
expect_seg_fault=0)
def,testEnvVar(self):
"""Tests,using,the,GTEST_BREAK_ON_FAILURE,environment,variable."""
self.RunAndVerify(env_var_value='0',
flag_value=None,
expect_seg_fault=0)
self.RunAndVerify(env_var_value='1',
flag_value=None,
expect_seg_fault=1)
def,testFlag(self):
"""Tests,using,the,--gtest_break_on_failure,flag."""
self.RunAndVerify(env_var_value=None,
flag_value='0',
expect_seg_fault=0)
self.RunAndVerify(env_var_value=None,
flag_value='1',
expect_seg_fault=1)
def,testFlagOverridesEnvVar(self):
"""Tests,that,the,flag,overrides,the,environment,variable."""
self.RunAndVerify(env_var_value='0',
flag_value='0',
expect_seg_fault=0)
self.RunAndVerify(env_var_value='0',
flag_value='1',
expect_seg_fault=1)
self.RunAndVerify(env_var_value='1',
flag_value='0',
expect_seg_fault=0)
self.RunAndVerify(env_var_value='1',
flag_value='1',
expect_seg_fault=1)
def,testBreakOnFailureOverridesThrowOnFailure(self):
"""Tests,that,gtest_break_on_failure,overrides,gtest_throw_on_failure."""
SetEnvVar(THROW_ON_FAILURE_ENV_VAR,,'1')
try:
self.RunAndVerify(env_var_value=None,
flag_value='1',
expect_seg_fault=1)
finally:
SetEnvVar(THROW_ON_FAILURE_ENV_VAR,,None)
if,IS_WINDOWS:
def,testCatchExceptionsDoesNotInterfere(self):
"""Tests,that,gtest_catch_exceptions,doesn't,interfere."""
SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR,,'1')
try:
self.RunAndVerify(env_var_value='1',
flag_value='1',
expect_seg_fault=1)
finally:
SetEnvVar(CATCH_EXCEPTIONS_ENV_VAR,,None)
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2010,Google,Inc.,,All,Rights,Reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Tests,Google,Test's,exception,catching,behavior.
This,script,invokes,gtest_catch_exceptions_test_,and
gtest_catch_exceptions_ex_test_,(programs,written,with
Google,Test),and,verifies,their,output.
"""
__author__,=,'vladl@google.com,(Vlad,Losev)'
import,os
import,gtest_test_utils
#,Constants.
FLAG_PREFIX,=,'--gtest_'
LIST_TESTS_FLAG,=,FLAG_PREFIX,+,'list_tests'
NO_CATCH_EXCEPTIONS_FLAG,=,FLAG_PREFIX,+,'catch_exceptions=0'
FILTER_FLAG,=,FLAG_PREFIX,+,'filter'
#,Path,to,the,gtest_catch_exceptions_ex_test_,binary,,compiled,with
#,exceptions,enabled.
EX_EXE_PATH,=,gtest_test_utils.GetTestExecutablePath(
'gtest_catch_exceptions_ex_test_')
#,Path,to,the,gtest_catch_exceptions_test_,binary,,compiled,with
#,exceptions,disabled.
EXE_PATH,=,gtest_test_utils.GetTestExecutablePath(
'gtest_catch_exceptions_no_ex_test_')
TEST_LIST,=,gtest_test_utils.Subprocess([EXE_PATH,,LIST_TESTS_FLAG]).output
SUPPORTS_SEH_EXCEPTIONS,=,'ThrowsSehException',in,TEST_LIST
if,SUPPORTS_SEH_EXCEPTIONS:
BINARY_OUTPUT,=,gtest_test_utils.Subprocess([EXE_PATH]).output
EX_BINARY_OUTPUT,=,gtest_test_utils.Subprocess([EX_EXE_PATH]).output
#,The,tests.
if,SUPPORTS_SEH_EXCEPTIONS:
#,pylint:disable-msg=C6302
class,CatchSehExceptionsTest(gtest_test_utils.TestCase):
"""Tests,exception-catching,behavior."""
def,TestSehExceptions(self,,test_output):
self.assert_('SEH,exception,with,code,0x2a,thrown,'
'in,the,test,fixture\'s,constructor'
in,test_output)
self.assert_('SEH,exception,with,code,0x2a,thrown,'
'in,the,test,fixture\'s,destructor'
in,test_output)
self.assert_('SEH,exception,with,code,0x2a,thrown,in,SetUpTestCase()'
in,test_output)
self.assert_('SEH,exception,with,code,0x2a,thrown,in,TearDownTestCase()'
in,test_output)
self.assert_('SEH,exception,with,code,0x2a,thrown,in,SetUp()'
in,test_output)
self.assert_('SEH,exception,with,code,0x2a,thrown,in,TearDown()'
in,test_output)
self.assert_('SEH,exception,with,code,0x2a,thrown,in,the,test,body'
in,test_output)
def,testCatchesSehExceptionsWithCxxExceptionsEnabled(self):
self.TestSehExceptions(EX_BINARY_OUTPUT)
def,testCatchesSehExceptionsWithCxxExceptionsDisabled(self):
self.TestSehExceptions(BINARY_OUTPUT)
class,CatchCxxExceptionsTest(gtest_test_utils.TestCase):
"""Tests,C++,exception-catching,behavior.
Tests,in,this,test,case,verify,that:
*,C++,exceptions,are,caught,and,logged,as,C++,(not,SEH),exceptions
*,Exception,thrown,affect,the,remainder,of,the,test,work,flow,in,the
expected,manner.
"""
def,testCatchesCxxExceptionsInFixtureConstructor(self):
self.assert_('C++,exception,with,description,'
'"Standard,C++,exception",thrown,'
'in,the,test,fixture\'s,constructor'
in,EX_BINARY_OUTPUT)
self.assert_('unexpected',not,in,EX_BINARY_OUTPUT,
'This,failure,belongs,in,this,test,only,if,'
'"CxxExceptionInConstructorTest",(no,quotes),'
'appears,on,the,same,line,as,words,"called,unexpectedly"')
def,testCatchesCxxExceptionsInFixtureDestructor(self):
self.assert_('C++,exception,with,description,'
'"Standard,C++,exception",thrown,'
'in,the,test,fixture\'s,destructor'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInDestructorTest::TearDownTestCase(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
def,testCatchesCxxExceptionsInSetUpTestCase(self):
self.assert_('C++,exception,with,description,"Standard,C++,exception"'
',thrown,in,SetUpTestCase()'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInConstructorTest::TearDownTestCase(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTestCaseTest,constructor,'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTestCaseTest,destructor,'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTestCaseTest::SetUp(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTestCaseTest::TearDown(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTestCaseTest,test,body,'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
def,testCatchesCxxExceptionsInTearDownTestCase(self):
self.assert_('C++,exception,with,description,"Standard,C++,exception"'
',thrown,in,TearDownTestCase()'
in,EX_BINARY_OUTPUT)
def,testCatchesCxxExceptionsInSetUp(self):
self.assert_('C++,exception,with,description,"Standard,C++,exception"'
',thrown,in,SetUp()'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTest::TearDownTestCase(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTest,destructor,'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInSetUpTest::TearDown(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('unexpected',not,in,EX_BINARY_OUTPUT,
'This,failure,belongs,in,this,test,only,if,'
'"CxxExceptionInSetUpTest",(no,quotes),'
'appears,on,the,same,line,as,words,"called,unexpectedly"')
def,testCatchesCxxExceptionsInTearDown(self):
self.assert_('C++,exception,with,description,"Standard,C++,exception"'
',thrown,in,TearDown()'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInTearDownTest::TearDownTestCase(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInTearDownTest,destructor,'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
def,testCatchesCxxExceptionsInTestBody(self):
self.assert_('C++,exception,with,description,"Standard,C++,exception"'
',thrown,in,the,test,body'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInTestBodyTest::TearDownTestCase(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInTestBodyTest,destructor,'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
self.assert_('CxxExceptionInTestBodyTest::TearDown(),'
'called,as,expected.'
in,EX_BINARY_OUTPUT)
def,testCatchesNonStdCxxExceptions(self):
self.assert_('Unknown,C++,exception,thrown,in,the,test,body'
in,EX_BINARY_OUTPUT)
def,testUnhandledCxxExceptionsAbortTheProgram(self):
#,Filters,out,SEH,exception,tests,on,Windows.,Unhandled,SEH,exceptions
#,cause,tests,to,show,pop-up,windows,there.
FITLER_OUT_SEH_TESTS_FLAG,=,FILTER_FLAG,+,'=-*Seh*'
#,By,default,,Google,Test,doesn't,catch,the,exceptions.
uncaught_exceptions_ex_binary_output,=,gtest_test_utils.Subprocess(
[EX_EXE_PATH,
NO_CATCH_EXCEPTIONS_FLAG,
FITLER_OUT_SEH_TESTS_FLAG]).output
self.assert_('Unhandled,C++,exception,terminating,the,program'
in,uncaught_exceptions_ex_binary_output)
self.assert_('unexpected',not,in,uncaught_exceptions_ex_binary_output)
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2008,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Verifies,that,Google,Test,correctly,determines,whether,to,use,colors."""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,gtest_test_utils
IS_WINDOWS,=,os.name,=,'nt'
COLOR_ENV_VAR,=,'GTEST_COLOR'
COLOR_FLAG,=,'gtest_color'
COMMAND,=,gtest_test_utils.GetTestExecutablePath('gtest_color_test_')
def,SetEnvVar(env_var,,value):
"""Sets,the,env,variable,to,'value',;,unsets,it,when,'value',is,None."""
if,value,is,not,None:
os.environ[env_var],=,value
elif,env_var,in,os.environ:
del,os.environ[env_var]
def,UsesColor(term,,color_env_var,,color_flag):
"""Runs,gtest_color_test_,and,returns,its,exit,code."""
SetEnvVar('TERM',,term)
SetEnvVar(COLOR_ENV_VAR,,color_env_var)
if,color_flag,is,None:
args,=,[]
else:
args,=,['--%s=%s',%,(COLOR_FLAG,,color_flag)]
p,=,gtest_test_utils.Subprocess([COMMAND],+,args)
return,not,p.exited,or,p.exit_code
class,GTestColorTest(gtest_test_utils.TestCase):
def,testNoEnvVarNoFlag(self):
"""Tests,the,case,when,there's,neither,GTEST_COLOR,nor,--gtest_color."""
if,not,IS_WINDOWS:
self.assert_(not,UsesColor('dumb',,None,,None))
self.assert_(not,UsesColor('emacs',,None,,None))
self.assert_(not,UsesColor('xterm-mono',,None,,None))
self.assert_(not,UsesColor('unknown',,None,,None))
self.assert_(not,UsesColor(None,,None,,None))
self.assert_(UsesColor('linux',,None,,None))
self.assert_(UsesColor('cygwin',,None,,None))
self.assert_(UsesColor('xterm',,None,,None))
self.assert_(UsesColor('xterm-color',,None,,None))
self.assert_(UsesColor('xterm-256color',,None,,None))
def,testFlagOnly(self):
"""Tests,the,case,when,there's,--gtest_color,but,not,GTEST_COLOR."""
self.assert_(not,UsesColor('dumb',,None,,'no'))
self.assert_(not,UsesColor('xterm-color',,None,,'no'))
if,not,IS_WINDOWS:
self.assert_(not,UsesColor('emacs',,None,,'auto'))
self.assert_(UsesColor('xterm',,None,,'auto'))
self.assert_(UsesColor('dumb',,None,,'yes'))
self.assert_(UsesColor('xterm',,None,,'yes'))
def,testEnvVarOnly(self):
"""Tests,the,case,when,there's,GTEST_COLOR,but,not,--gtest_color."""
self.assert_(not,UsesColor('dumb',,'no',,None))
self.assert_(not,UsesColor('xterm-color',,'no',,None))
if,not,IS_WINDOWS:
self.assert_(not,UsesColor('dumb',,'auto',,None))
self.assert_(UsesColor('xterm-color',,'auto',,None))
self.assert_(UsesColor('dumb',,'yes',,None))
self.assert_(UsesColor('xterm-color',,'yes',,None))
def,testEnvVarAndFlag(self):
"""Tests,the,case,when,there,are,both,GTEST_COLOR,and,--gtest_color."""
self.assert_(not,UsesColor('xterm-color',,'no',,'no'))
self.assert_(UsesColor('dumb',,'no',,'yes'))
self.assert_(UsesColor('xterm-color',,'no',,'auto'))
def,testAliasesOfYesAndNo(self):
"""Tests,using,aliases,in,specifying,--gtest_color."""
self.assert_(UsesColor('dumb',,None,,'true'))
self.assert_(UsesColor('dumb',,None,,'YES'))
self.assert_(UsesColor('dumb',,None,,'T'))
self.assert_(UsesColor('dumb',,None,,'1'))
self.assert_(not,UsesColor('xterm',,None,,'f'))
self.assert_(not,UsesColor('xterm',,None,,'false'))
self.assert_(not,UsesColor('xterm',,None,,'0'))
self.assert_(not,UsesColor('xterm',,None,,'unknown'))
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2008,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Verifies,that,Google,Test,correctly,parses,environment,variables."""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,gtest_test_utils
IS_WINDOWS,=,os.name,==,'nt'
IS_LINUX,=,os.name,==,'posix',and,os.uname()[0],==,'Linux'
COMMAND,=,gtest_test_utils.GetTestExecutablePath('gtest_env_var_test_')
environ,=,os.environ.copy()
def,AssertEq(expected,,actual):
if,expected,!=,actual:
print,'Expected:,%s',%,(expected,)
print,',,Actual:,%s',%,(actual,)
raise,AssertionError
def,SetEnvVar(env_var,,value):
"""Sets,the,env,variable,to,'value',;,unsets,it,when,'value',is,None."""
if,value,is,not,None:
environ[env_var],=,value
elif,env_var,in,environ:
del,environ[env_var]
def,GetFlag(flag):
"""Runs,gtest_env_var_test_,and,returns,its,output."""
args,=,[COMMAND]
if,flag,is,not,None:
args,+=,[flag]
return,gtest_test_utils.Subprocess(args,,env=environ).output
def,TestFlag(flag,,test_val,,default_val):
"""Verifies,that,the,given,flag,is,affected,by,the,corresponding,env,var."""
env_var,=,'GTEST_',+,flag.upper()
SetEnvVar(env_var,,test_val)
AssertEq(test_val,,GetFlag(flag))
SetEnvVar(env_var,,None)
AssertEq(default_val,,GetFlag(flag))
class,GTestEnvVarTest(gtest_test_utils.TestCase):
def,testEnvVarAffectsFlag(self):
"""Tests,that,environment,variable,should,affect,the,corresponding,flag."""
TestFlag('break_on_failure',,'1',,'0')
TestFlag('color',,'yes',,'auto')
TestFlag('filter',,'FooTest.Bar',,'*')
TestFlag('output',,'xml:tmp/foo.xml',,'')
TestFlag('print_time',,'0',,'1')
TestFlag('repeat',,'999',,'1')
TestFlag('throw_on_failure',,'1',,'0')
TestFlag('death_test_style',,'threadsafe',,'fast')
TestFlag('catch_exceptions',,'0',,'1')
if,IS_LINUX:
TestFlag('death_test_use_fork',,'1',,'0')
TestFlag('stack_trace_depth',,'0',,'100')
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2005,Google,Inc.,All,Rights,Reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Unit,test,for,Google,Test,test,filters.
A,user,can,specify,which,test(s),in,a,Google,Test,program,to,run,via,either
the,GTEST_FILTER,environment,variable,or,the,--gtest_filter,flag.
This,script,tests,such,functionality,by,invoking
gtest_filter_unittest_,(a,program,written,with,Google,Test),with,different
environments,and,command,line,flags.
Note,that,test,sharding,may,also,influence,which,tests,are,filtered.,Therefore,
we,test,that,here,also.
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,re
import,sets
import,sys
import,gtest_test_utils
#,Constants.
#,Checks,if,this,platform,can,pass,empty,environment,variables,to,child
#,processes.,,We,set,an,env,variable,to,an,empty,string,and,invoke,a,python
#,script,in,a,subprocess,to,print,whether,the,variable,is,STILL,in
#,os.environ.,,We,then,use,'eval',to,parse,the,child's,output,so,that,an
#,exception,is,thrown,if,the,input,is,anything,other,than,'True',nor,'False'.
os.environ['EMPTY_VAR'],=,''
child,=,gtest_test_utils.Subprocess(
[sys.executable,,'-c',,'import,os,;,print,\'EMPTY_VAR\',in,os.environ'])
CAN_PASS_EMPTY_ENV,=,eval(child.output)
#,Check,if,this,platform,can,unset,environment,variables,in,child,processes.
#,We,set,an,env,variable,to,a,non-empty,string,,unset,it,,and,invoke
#,a,python,script,in,a,subprocess,to,print,whether,the,variable
#,is,NO,LONGER,in,os.environ.
#,We,use,'eval',to,parse,the,child's,output,so,that,an,exception
#,is,thrown,if,the,input,is,neither,'True',nor,'False'.
os.environ['UNSET_VAR'],=,'X'
del,os.environ['UNSET_VAR']
child,=,gtest_test_utils.Subprocess(
[sys.executable,,'-c',,'import,os,;,print,\'UNSET_VAR\',not,in,os.environ'])
CAN_UNSET_ENV,=,eval(child.output)
#,Checks,if,we,should,test,with,an,empty,filter.,This,doesn't
#,make,sense,on,platforms,that,cannot,pass,empty,env,variables,(Win32)
#,and,on,platforms,that,cannot,unset,variables,(since,we,cannot,tell
#,the,difference,between,"",and,NULL,--,Borland,and,Solaris,<,5.10)
CAN_TEST_EMPTY_FILTER,=,(CAN_PASS_EMPTY_ENV,and,CAN_UNSET_ENV)
#,The,environment,variable,for,specifying,the,test,filters.
FILTER_ENV_VAR,=,'GTEST_FILTER'
#,The,environment,variables,for,test,sharding.
TOTAL_SHARDS_ENV_VAR,=,'GTEST_TOTAL_SHARDS'
SHARD_INDEX_ENV_VAR,=,'GTEST_SHARD_INDEX'
SHARD_STATUS_FILE_ENV_VAR,=,'GTEST_SHARD_STATUS_FILE'
#,The,command,line,flag,for,specifying,the,test,filters.
FILTER_FLAG,=,'gtest_filter'
#,The,command,line,flag,for,including,disabled,tests.
ALSO_RUN_DISABED_TESTS_FLAG,=,'gtest_also_run_disabled_tests'
#,Command,to,run,the,gtest_filter_unittest_,program.
COMMAND,=,gtest_test_utils.GetTestExecutablePath('gtest_filter_unittest_')
#,Regex,for,determining,whether,parameterized,tests,are,enabled,in,the,binary.
PARAM_TEST_REGEX,=,re.compile(r'/ParamTest')
#,Regex,for,parsing,test,case,names,from,Google,Test's,output.
TEST_CASE_REGEX,=,re.compile(r'^\[\-+\],\d+,tests?,from,(\w+(/\w+)?)')
#,Regex,for,parsing,test,names,from,Google,Test's,output.
TEST_REGEX,=,re.compile(r'^\[\s*RUN\s*\].*\.(\w+(/\w+)?)')
#,The,command,line,flag,to,tell,Google,Test,to,output,the,list,of,tests,it
#,will,run.
LIST_TESTS_FLAG,=,'--gtest_list_tests'
#,Indicates,whether,Google,Test,supports,death,tests.
SUPPORTS_DEATH_TESTS,=,'HasDeathTest',in,gtest_test_utils.Subprocess(
[COMMAND,,LIST_TESTS_FLAG]).output
#,Full,names,of,all,tests,in,gtest_filter_unittests_.
PARAM_TESTS,=,[
'SeqP/ParamTest.TestX/0',
'SeqP/ParamTest.TestX/1',
'SeqP/ParamTest.TestY/0',
'SeqP/ParamTest.TestY/1',
'SeqQ/ParamTest.TestX/0',
'SeqQ/ParamTest.TestX/1',
'SeqQ/ParamTest.TestY/0',
'SeqQ/ParamTest.TestY/1',
]
DISABLED_TESTS,=,[
'BarTest.DISABLED_TestFour',
'BarTest.DISABLED_TestFive',
'BazTest.DISABLED_TestC',
'DISABLED_FoobarTest.Test1',
'DISABLED_FoobarTest.DISABLED_Test2',
'DISABLED_FoobarbazTest.TestA',
]
if,SUPPORTS_DEATH_TESTS:
DEATH_TESTS,=,[
'HasDeathTest.Test1',
'HasDeathTest.Test2',
]
else:
DEATH_TESTS,=,[]
#,All,the,non-disabled,tests.
ACTIVE_TESTS,=,[
'FooTest.Abc',
'FooTest.Xyz',
'BarTest.TestOne',
'BarTest.TestTwo',
'BarTest.TestThree',
'BazTest.TestOne',
'BazTest.TestA',
'BazTest.TestB',
],+,DEATH_TESTS,+,PARAM_TESTS
param_tests_present,=,None
#,Utilities.
environ,=,os.environ.copy()
def,SetEnvVar(env_var,,value):
"""Sets,the,env,variable,to,'value',;,unsets,it,when,'value',is,None."""
if,value,is,not,None:
environ[env_var],=,value
elif,env_var,in,environ:
del,environ[env_var]
def,RunAndReturnOutput(args,=,None):
"""Runs,the,test,program,and,returns,its,output."""
return,gtest_test_utils.Subprocess([COMMAND],+,(args,or,[]),
env=environ).output
def,RunAndExtractTestList(args,=,None):
"""Runs,the,test,program,and,returns,its,exit,code,and,a,list,of,tests,run."""
p,=,gtest_test_utils.Subprocess([COMMAND],+,(args,or,[]),,env=environ)
tests_run,=,[]
test_case,=,''
test,=,''
for,line,in,p.output.split('\n'):
match,=,TEST_CASE_REGEX.match(line)
if,match,is,not,None:
test_case,=,match.group(1)
else:
match,=,TEST_REGEX.match(line)
if,match,is,not,None:
test,=,match.group(1)
tests_run.append(test_case,+,'.',+,test)
return,(tests_run,,p.exit_code)
def,InvokeWithModifiedEnv(extra_env,,function,,*args,,**kwargs):
"""Runs,the,given,function,and,arguments,in,a,modified,environment."""
try:
original_env,=,environ.copy()
environ.update(extra_env)
return,function(*args,,**kwargs)
finally:
environ.clear()
environ.update(original_env)
def,RunWithSharding(total_shards,,shard_index,,command):
"""Runs,a,test,program,shard,and,returns,exit,code,and,a,list,of,tests,run."""
extra_env,=,{SHARD_INDEX_ENV_VAR:,str(shard_index),
TOTAL_SHARDS_ENV_VAR:,str(total_shards)}
return,InvokeWithModifiedEnv(extra_env,,RunAndExtractTestList,,command)
#,The,unit,test.
class,GTestFilterUnitTest(gtest_test_utils.TestCase):
"""Tests,the,env,variable,or,the,command,line,flag,to,filter,tests."""
#,Utilities.
def,AssertSetEqual(self,,lhs,,rhs):
"""Asserts,that,two,sets,are,equal."""
for,elem,in,lhs:
self.assert_(elem,in,rhs,,'%s,in,%s',%,(elem,,rhs))
for,elem,in,rhs:
self.assert_(elem,in,lhs,,'%s,in,%s',%,(elem,,lhs))
def,AssertPartitionIsValid(self,,set_var,,list_of_sets):
"""Asserts,that,list_of_sets,is,a,valid,partition,of,set_var."""
full_partition,=,[]
for,slice_var,in,list_of_sets:
full_partition.extend(slice_var)
self.assertEqual(len(set_var),,len(full_partition))
self.assertEqual(sets.Set(set_var),,sets.Set(full_partition))
def,AdjustForParameterizedTests(self,,tests_to_run):
"""Adjust,tests_to_run,in,case,value,parameterized,tests,are,disabled."""
global,param_tests_present
if,not,param_tests_present:
return,list(sets.Set(tests_to_run),-,sets.Set(PARAM_TESTS))
else:
return,tests_to_run
def,RunAndVerify(self,,gtest_filter,,tests_to_run):
"""Checks,that,the,binary,runs,correct,set,of,tests,for,a,given,filter."""
tests_to_run,=,self.AdjustForParameterizedTests(tests_to_run)
#,First,,tests,using,the,environment,variable.
#,Windows,removes,empty,variables,from,the,environment,when,passing,it
#,to,a,new,process.,,This,means,it,is,impossible,to,pass,an,empty,filter
#,into,a,process,using,the,environment,variable.,,However,,we,can,still
#,test,the,case,when,the,variable,is,not,supplied,(i.e.,,gtest_filter,is
#,None).
#,pylint:,disable-msg=C6403
if,CAN_TEST_EMPTY_FILTER,or,gtest_filter,!=,'':
SetEnvVar(FILTER_ENV_VAR,,gtest_filter)
tests_run,=,RunAndExtractTestList()[0]
SetEnvVar(FILTER_ENV_VAR,,None)
self.AssertSetEqual(tests_run,,tests_to_run)
#,pylint:,enable-msg=C6403
#,Next,,tests,using,the,command,line,flag.
if,gtest_filter,is,None:
args,=,[]
else:
args,=,['--%s=%s',%,(FILTER_FLAG,,gtest_filter)]
tests_run,=,RunAndExtractTestList(args)[0]
self.AssertSetEqual(tests_run,,tests_to_run)
def,RunAndVerifyWithSharding(self,,gtest_filter,,total_shards,,tests_to_run,
args=None,,check_exit_0=False):
"""Checks,that,binary,runs,correct,tests,for,the,given,filter,and,shard.
Runs,all,shards,of,gtest_filter_unittest_,with,the,given,filter,,and
verifies,that,the,right,set,of,tests,were,run.,The,union,of,tests,run
on,each,shard,should,be,identical,to,tests_to_run,,without,duplicates.
Args:
gtest_filter:,A,filter,to,apply,to,the,tests.
total_shards:,A,total,number,of,shards,to,split,test,run,into.
tests_to_run:,A,set,of,tests,expected,to,run.
args,,,:,,,,,,Arguments,to,pass,to,the,to,the,test,binary.
check_exit_0:,When,set,to,a,true,value,,make,sure,that,all,shards
return,0.
"""
tests_to_run,=,self.AdjustForParameterizedTests(tests_to_run)
#,Windows,removes,empty,variables,from,the,environment,when,passing,it
#,to,a,new,process.,,This,means,it,is,impossible,to,pass,an,empty,filter
#,into,a,process,using,the,environment,variable.,,However,,we,can,still
#,test,the,case,when,the,variable,is,not,supplied,(i.e.,,gtest_filter,is
#,None).
#,pylint:,disable-msg=C6403
if,CAN_TEST_EMPTY_FILTER,or,gtest_filter,!=,'':
SetEnvVar(FILTER_ENV_VAR,,gtest_filter)
partition,=,[]
for,i,in,range(0,,total_shards):
(tests_run,,exit_code),=,RunWithSharding(total_shards,,i,,args)
if,check_exit_0:
self.assertEqual(0,,exit_code)
partition.append(tests_run)
self.AssertPartitionIsValid(tests_to_run,,partition)
SetEnvVar(FILTER_ENV_VAR,,None)
#,pylint:,enable-msg=C6403
def,RunAndVerifyAllowingDisabled(self,,gtest_filter,,tests_to_run):
"""Checks,that,the,binary,runs,correct,set,of,tests,for,the,given,filter.
Runs,gtest_filter_unittest_,with,the,given,filter,,and,enables
disabled,tests.,Verifies,that,the,right,set,of,tests,were,run.
Args:
gtest_filter:,A,filter,to,apply,to,the,tests.
tests_to_run:,A,set,of,tests,expected,to,run.
"""
tests_to_run,=,self.AdjustForParameterizedTests(tests_to_run)
#,Construct,the,command,line.
args,=,['--%s',%,ALSO_RUN_DISABED_TESTS_FLAG]
if,gtest_filter,is,not,None:
args.append('--%s=%s',%,(FILTER_FLAG,,gtest_filter))
tests_run,=,RunAndExtractTestList(args)[0]
self.AssertSetEqual(tests_run,,tests_to_run)
def,setUp(self):
"""Sets,up,test,case.
Determines,whether,value-parameterized,tests,are,enabled,in,the,binary,and
sets,the,flags,accordingly.
"""
global,param_tests_present
if,param_tests_present,is,None:
param_tests_present,=,PARAM_TEST_REGEX.search(
RunAndReturnOutput()),is,not,None
def,testDefaultBehavior(self):
"""Tests,the,behavior,of,not,specifying,the,filter."""
self.RunAndVerify(None,,ACTIVE_TESTS)
def,testDefaultBehaviorWithShards(self):
"""Tests,the,behavior,without,the,filter,,with,sharding,enabled."""
self.RunAndVerifyWithSharding(None,,1,,ACTIVE_TESTS)
self.RunAndVerifyWithSharding(None,,2,,ACTIVE_TESTS)
self.RunAndVerifyWithSharding(None,,len(ACTIVE_TESTS),-,1,,ACTIVE_TESTS)
self.RunAndVerifyWithSharding(None,,len(ACTIVE_TESTS),,ACTIVE_TESTS)
self.RunAndVerifyWithSharding(None,,len(ACTIVE_TESTS),+,1,,ACTIVE_TESTS)
def,testEmptyFilter(self):
"""Tests,an,empty,filter."""
self.RunAndVerify('',,[])
self.RunAndVerifyWithSharding('',,1,,[])
self.RunAndVerifyWithSharding('',,2,,[])
def,testBadFilter(self):
"""Tests,a,filter,that,matches,nothing."""
self.RunAndVerify('BadFilter',,[])
self.RunAndVerifyAllowingDisabled('BadFilter',,[])
def,testFullName(self):
"""Tests,filtering,by,full,name."""
self.RunAndVerify('FooTest.Xyz',,['FooTest.Xyz'])
self.RunAndVerifyAllowingDisabled('FooTest.Xyz',,['FooTest.Xyz'])
self.RunAndVerifyWithSharding('FooTest.Xyz',,5,,['FooTest.Xyz'])
def,testUniversalFilters(self):
"""Tests,filters,that,match,everything."""
self.RunAndVerify('*',,ACTIVE_TESTS)
self.RunAndVerify('*.*',,ACTIVE_TESTS)
self.RunAndVerifyWithSharding('*.*',,len(ACTIVE_TESTS),-,3,,ACTIVE_TESTS)
self.RunAndVerifyAllowingDisabled('*',,ACTIVE_TESTS,+,DISABLED_TESTS)
self.RunAndVerifyAllowingDisabled('*.*',,ACTIVE_TESTS,+,DISABLED_TESTS)
def,testFilterByTestCase(self):
"""Tests,filtering,by,test,case,name."""
self.RunAndVerify('FooTest.*',,['FooTest.Abc',,'FooTest.Xyz'])
BAZ_TESTS,=,['BazTest.TestOne',,'BazTest.TestA',,'BazTest.TestB']
self.RunAndVerify('BazTest.*',,BAZ_TESTS)
self.RunAndVerifyAllowingDisabled('BazTest.*',
BAZ_TESTS,+,['BazTest.DISABLED_TestC'])
def,testFilterByTest(self):
"""Tests,filtering,by,test,name."""
self.RunAndVerify('*.TestOne',,['BarTest.TestOne',,'BazTest.TestOne'])
def,testFilterDisabledTests(self):
"""Select,only,the,disabled,tests,to,run."""
self.RunAndVerify('DISABLED_FoobarTest.Test1',,[])
self.RunAndVerifyAllowingDisabled('DISABLED_FoobarTest.Test1',
['DISABLED_FoobarTest.Test1'])
self.RunAndVerify('*DISABLED_*',,[])
self.RunAndVerifyAllowingDisabled('*DISABLED_*',,DISABLED_TESTS)
self.RunAndVerify('*.DISABLED_*',,[])
self.RunAndVerifyAllowingDisabled('*.DISABLED_*',,[
'BarTest.DISABLED_TestFour',
'BarTest.DISABLED_TestFive',
'BazTest.DISABLED_TestC',
'DISABLED_FoobarTest.DISABLED_Test2',
])
self.RunAndVerify('DISABLED_*',,[])
self.RunAndVerifyAllowingDisabled('DISABLED_*',,[
'DISABLED_FoobarTest.Test1',
'DISABLED_FoobarTest.DISABLED_Test2',
'DISABLED_FoobarbazTest.TestA',
])
def,testWildcardInTestCaseName(self):
"""Tests,using,wildcard,in,the,test,case,name."""
self.RunAndVerify('*a*.*',,[
'BarTest.TestOne',
'BarTest.TestTwo',
'BarTest.TestThree',
'BazTest.TestOne',
'BazTest.TestA',
'BazTest.TestB',,],+,DEATH_TESTS,+,PARAM_TESTS)
def,testWildcardInTestName(self):
"""Tests,using,wildcard,in,the,test,name."""
self.RunAndVerify('*.*A*',,['FooTest.Abc',,'BazTest.TestA'])
def,testFilterWithoutDot(self):
"""Tests,a,filter,that,has,no,'.',in,it."""
self.RunAndVerify('*z*',,[
'FooTest.Xyz',
'BazTest.TestOne',
'BazTest.TestA',
'BazTest.TestB',
])
def,testTwoPatterns(self):
"""Tests,filters,that,consist,of,two,patterns."""
self.RunAndVerify('Foo*.*:*A*',,[
'FooTest.Abc',
'FooTest.Xyz',
'BazTest.TestA',
])
#,An,empty,pattern,+,a,non-empty,one
self.RunAndVerify(':*A*',,['FooTest.Abc',,'BazTest.TestA'])
def,testThreePatterns(self):
"""Tests,filters,that,consist,of,three,patterns."""
self.RunAndVerify('*oo*:*A*:*One',,[
'FooTest.Abc',
'FooTest.Xyz',
'BarTest.TestOne',
'BazTest.TestOne',
'BazTest.TestA',
])
#,The,2nd,pattern,is,empty.
self.RunAndVerify('*oo*::*One',,[
'FooTest.Abc',
'FooTest.Xyz',
'BarTest.TestOne',
'BazTest.TestOne',
])
#,The,last,2,patterns,are,empty.
self.RunAndVerify('*oo*::',,[
'FooTest.Abc',
'FooTest.Xyz',
])
def,testNegativeFilters(self):
self.RunAndVerify('*-BazTest.TestOne',,[
'FooTest.Abc',
'FooTest.Xyz',
'BarTest.TestOne',
'BarTest.TestTwo',
'BarTest.TestThree',
'BazTest.TestA',
'BazTest.TestB',
],+,DEATH_TESTS,+,PARAM_TESTS)
self.RunAndVerify('*-FooTest.Abc:BazTest.*',,[
'FooTest.Xyz',
'BarTest.TestOne',
'BarTest.TestTwo',
'BarTest.TestThree',
],+,DEATH_TESTS,+,PARAM_TESTS)
self.RunAndVerify('BarTest.*-BarTest.TestOne',,[
'BarTest.TestTwo',
'BarTest.TestThree',
])
#,Tests,without,leading,'*'.
self.RunAndVerify('-FooTest.Abc:FooTest.Xyz:BazTest.*',,[
'BarTest.TestOne',
'BarTest.TestTwo',
'BarTest.TestThree',
],+,DEATH_TESTS,+,PARAM_TESTS)
#,Value,parameterized,tests.
self.RunAndVerify('*/*',,PARAM_TESTS)
#,Value,parameterized,tests,filtering,by,the,sequence,name.
self.RunAndVerify('SeqP/*',,[
'SeqP/ParamTest.TestX/0',
'SeqP/ParamTest.TestX/1',
'SeqP/ParamTest.TestY/0',
'SeqP/ParamTest.TestY/1',
])
#,Value,parameterized,tests,filtering,by,the,test,name.
self.RunAndVerify('*/0',,[
'SeqP/ParamTest.TestX/0',
'SeqP/ParamTest.TestY/0',
'SeqQ/ParamTest.TestX/0',
'SeqQ/ParamTest.TestY/0',
])
def,testFlagOverridesEnvVar(self):
"""Tests,that,the,filter,flag,overrides,the,filtering,env.,variable."""
SetEnvVar(FILTER_ENV_VAR,,'Foo*')
args,=,['--%s=%s',%,(FILTER_FLAG,,'*One')]
tests_run,=,RunAndExtractTestList(args)[0]
SetEnvVar(FILTER_ENV_VAR,,None)
self.AssertSetEqual(tests_run,,['BarTest.TestOne',,'BazTest.TestOne'])
def,testShardStatusFileIsCreated(self):
"""Tests,that,the,shard,file,is,created,if,specified,in,the,environment."""
shard_status_file,=,os.path.join(gtest_test_utils.GetTempDir(),
'shard_status_file')
self.assert_(not,os.path.exists(shard_status_file))
extra_env,=,{SHARD_STATUS_FILE_ENV_VAR:,shard_status_file}
try:
InvokeWithModifiedEnv(extra_env,,RunAndReturnOutput)
finally:
self.assert_(os.path.exists(shard_status_file))
os.remove(shard_status_file)
def,testShardStatusFileIsCreatedWithListTests(self):
"""Tests,that,the,shard,file,is,created,with,the,"list_tests",flag."""
shard_status_file,=,os.path.join(gtest_test_utils.GetTempDir(),
'shard_status_file2')
self.assert_(not,os.path.exists(shard_status_file))
extra_env,=,{SHARD_STATUS_FILE_ENV_VAR:,shard_status_file}
try:
output,=,InvokeWithModifiedEnv(extra_env,
RunAndReturnOutput,
[LIST_TESTS_FLAG])
finally:
#,This,assertion,ensures,that,Google,Test,enumerated,the,tests,as
#,opposed,to,running,them.
self.assert_('[==========]',not,in,output,
'Unexpected,output,during,test,enumeration.\n'
'Please,ensure,that,LIST_TESTS_FLAG,is,assigned,the\n'
'correct,flag,value,for,listing,Google,Test,tests.')
self.assert_(os.path.exists(shard_status_file))
os.remove(shard_status_file)
if,SUPPORTS_DEATH_TESTS:
def,testShardingWorksWithDeathTests(self):
"""Tests,integration,with,death,tests,and,sharding."""
gtest_filter,=,'HasDeathTest.*:SeqP/*'
expected_tests,=,[
'HasDeathTest.Test1',
'HasDeathTest.Test2',
'SeqP/ParamTest.TestX/0',
'SeqP/ParamTest.TestX/1',
'SeqP/ParamTest.TestY/0',
'SeqP/ParamTest.TestY/1',
]
for,flag,in,['--gtest_death_test_style=threadsafe',
'--gtest_death_test_style=fast']:
self.RunAndVerifyWithSharding(gtest_filter,,3,,expected_tests,
check_exit_0=True,,args=[flag])
self.RunAndVerifyWithSharding(gtest_filter,,5,,expected_tests,
check_exit_0=True,,args=[flag])
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2009,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Tests,the,--help,flag,of,Google,C++,Testing,Framework.
SYNOPSIS
gtest_help_test.py,--build_dir=BUILD/DIR
#,where,BUILD/DIR,contains,the,built,gtest_help_test_,file.
gtest_help_test.py
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,re
import,gtest_test_utils
IS_LINUX,=,os.name,==,'posix',and,os.uname()[0],==,'Linux'
IS_WINDOWS,=,os.name,==,'nt'
PROGRAM_PATH,=,gtest_test_utils.GetTestExecutablePath('gtest_help_test_')
FLAG_PREFIX,=,'--gtest_'
DEATH_TEST_STYLE_FLAG,=,FLAG_PREFIX,+,'death_test_style'
STREAM_RESULT_TO_FLAG,=,FLAG_PREFIX,+,'stream_result_to'
UNKNOWN_FLAG,=,FLAG_PREFIX,+,'unknown_flag_for_testing'
LIST_TESTS_FLAG,=,FLAG_PREFIX,+,'list_tests'
INCORRECT_FLAG_VARIANTS,=,[re.sub('^--',,'-',,LIST_TESTS_FLAG),
re.sub('^--',,'/',,LIST_TESTS_FLAG),
re.sub('_',,'-',,LIST_TESTS_FLAG)]
INTERNAL_FLAG_FOR_TESTING,=,FLAG_PREFIX,+,'internal_flag_for_testing'
SUPPORTS_DEATH_TESTS,=,"DeathTest",in,gtest_test_utils.Subprocess(
[PROGRAM_PATH,,LIST_TESTS_FLAG]).output
#,The,help,message,must,match,this,regex.
HELP_REGEX,=,re.compile(
FLAG_PREFIX,+,r'list_tests.*',+
FLAG_PREFIX,+,r'filter=.*',+
FLAG_PREFIX,+,r'also_run_disabled_tests.*',+
FLAG_PREFIX,+,r'repeat=.*',+
FLAG_PREFIX,+,r'shuffle.*',+
FLAG_PREFIX,+,r'random_seed=.*',+
FLAG_PREFIX,+,r'color=.*',+
FLAG_PREFIX,+,r'print_time.*',+
FLAG_PREFIX,+,r'output=.*',+
FLAG_PREFIX,+,r'break_on_failure.*',+
FLAG_PREFIX,+,r'throw_on_failure.*',+
FLAG_PREFIX,+,r'catch_exceptions=0.*',
re.DOTALL)
def,RunWithFlag(flag):
"""Runs,gtest_help_test_,with,the,given,flag.
Returns:
the,exit,code,and,the,text,output,as,a,tuple.
Args:
flag:,the,command-line,flag,to,pass,to,gtest_help_test_,,or,None.
"""
if,flag,is,None:
command,=,[PROGRAM_PATH]
else:
command,=,[PROGRAM_PATH,,flag]
child,=,gtest_test_utils.Subprocess(command)
return,child.exit_code,,child.output
class,GTestHelpTest(gtest_test_utils.TestCase):
"""Tests,the,--help,flag,and,its,equivalent,forms."""
def,TestHelpFlag(self,,flag):
"""Verifies,correct,behavior,when,help,flag,is,specified.
The,right,message,must,be,printed,and,the,tests,must
skipped,when,the,given,flag,is,specified.
Args:
flag:,,A,flag,to,pass,to,the,binary,or,None.
"""
exit_code,,output,=,RunWithFlag(flag)
self.assertEquals(0,,exit_code)
self.assert_(HELP_REGEX.search(output),,output)
if,IS_LINUX:
self.assert_(STREAM_RESULT_TO_FLAG,in,output,,output)
else:
self.assert_(STREAM_RESULT_TO_FLAG,not,in,output,,output)
if,SUPPORTS_DEATH_TESTS,and,not,IS_WINDOWS:
self.assert_(DEATH_TEST_STYLE_FLAG,in,output,,output)
else:
self.assert_(DEATH_TEST_STYLE_FLAG,not,in,output,,output)
def,TestNonHelpFlag(self,,flag):
"""Verifies,correct,behavior,when,no,help,flag,is,specified.
Verifies,that,when,no,help,flag,is,specified,,the,tests,are,run
and,the,help,message,is,not,printed.
Args:
flag:,,A,flag,to,pass,to,the,binary,or,None.
"""
exit_code,,output,=,RunWithFlag(flag)
self.assert_(exit_code,!=,0)
self.assert_(not,HELP_REGEX.search(output),,output)
def,testPrintsHelpWithFullFlag(self):
self.TestHelpFlag('--help')
def,testPrintsHelpWithShortFlag(self):
self.TestHelpFlag('-h')
def,testPrintsHelpWithQuestionFlag(self):
self.TestHelpFlag('-?')
def,testPrintsHelpWithWindowsStyleQuestionFlag(self):
self.TestHelpFlag('/?')
def,testPrintsHelpWithUnrecognizedGoogleTestFlag(self):
self.TestHelpFlag(UNKNOWN_FLAG)
def,testPrintsHelpWithIncorrectFlagStyle(self):
for,incorrect_flag,in,INCORRECT_FLAG_VARIANTS:
self.TestHelpFlag(incorrect_flag)
def,testRunsTestsWithoutHelpFlag(self):
"""Verifies,that,when,no,help,flag,is,specified,,the,tests,are,run
and,the,help,message,is,not,printed."""
self.TestNonHelpFlag(None)
def,testRunsTestsWithGtestInternalFlag(self):
"""Verifies,that,the,tests,are,run,and,no,help,message,is,printed,when
a,flag,starting,with,Google,Test,prefix,and,'internal_',is,supplied."""
self.TestNonHelpFlag(INTERNAL_FLAG_FOR_TESTING)
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2006,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Unit,test,for,Google,Test's,--gtest_list_tests,flag.
A,user,can,ask,Google,Test,to,list,all,tests,by,specifying,the
--gtest_list_tests,flag.,,This,script,tests,such,functionality
by,invoking,gtest_list_tests_unittest_,(a,program,written,with
Google,Test),the,command,line,flags.
"""
__author__,=,'phanna@google.com,(Patrick,Hanna)'
import,gtest_test_utils
#,Constants.
#,The,command,line,flag,for,enabling/disabling,listing,all,tests.
LIST_TESTS_FLAG,=,'gtest_list_tests'
#,Path,to,the,gtest_list_tests_unittest_,program.
EXE_PATH,=,gtest_test_utils.GetTestExecutablePath('gtest_list_tests_unittest_')
#,The,expected,output,when,running,gtest_list_tests_unittest_,with
#,--gtest_list_tests
EXPECTED_OUTPUT_NO_FILTER,=,"""FooDeathTest.
Test1
Foo.
Bar1
Bar2
DISABLED_Bar3
Abc.
Xyz
Def
FooBar.
Baz
FooTest.
Test1
DISABLED_Test2
Test3
"""
#,The,expected,output,when,running,gtest_list_tests_unittest_,with
#,--gtest_list_tests,and,--gtest_filter=Foo*.
EXPECTED_OUTPUT_FILTER_FOO,=,"""FooDeathTest.
Test1
Foo.
Bar1
Bar2
DISABLED_Bar3
FooBar.
Baz
FooTest.
Test1
DISABLED_Test2
Test3
"""
#,Utilities.
def,Run(args):
"""Runs,gtest_list_tests_unittest_,and,returns,the,list,of,tests,printed."""
return,gtest_test_utils.Subprocess([EXE_PATH],+,args,
capture_stderr=False).output
#,The,unit,test.
class,GTestListTestsUnitTest(gtest_test_utils.TestCase):
"""Tests,using,the,--gtest_list_tests,flag,to,list,all,tests."""
def,RunAndVerify(self,,flag_value,,expected_output,,other_flag):
"""Runs,gtest_list_tests_unittest_,and,verifies,that,it,prints
the,correct,tests.
Args:
flag_value:,,,,,,,value,of,the,--gtest_list_tests,flag,;
None,if,the,flag,should,not,be,present.
expected_output:,,the,expected,output,after,running,command,;
other_flag:,,,,,,,a,different,flag,to,be,passed,to,command
along,with,gtest_list_tests,;
None,if,the,flag,should,not,be,present.
"""
if,flag_value,is,None:
flag,=,''
flag_expression,=,'not,set'
elif,flag_value,==,'0':
flag,=,'--%s=0',%,LIST_TESTS_FLAG
flag_expression,=,'0'
else:
flag,=,'--%s',%,LIST_TESTS_FLAG
flag_expression,=,'1'
args,=,[flag]
if,other_flag,is,not,None:
args,+=,[other_flag]
output,=,Run(args)
msg,=,('when,%s,is,%s,,the,output,of,"%s",is,"%s".',%
(LIST_TESTS_FLAG,,flag_expression,,','.join(args),,output))
if,expected_output,is,not,None:
self.assert_(output,==,expected_output,,msg)
else:
self.assert_(output,!=,EXPECTED_OUTPUT_NO_FILTER,,msg)
def,testDefaultBehavior(self):
"""Tests,the,behavior,of,the,default,mode."""
self.RunAndVerify(flag_value=None,
expected_output=None,
other_flag=None)
def,testFlag(self):
"""Tests,using,the,--gtest_list_tests,flag."""
self.RunAndVerify(flag_value='0',
expected_output=None,
other_flag=None)
self.RunAndVerify(flag_value='1',
expected_output=EXPECTED_OUTPUT_NO_FILTER,
other_flag=None)
def,testOverrideNonFilterFlags(self):
"""Tests,that,--gtest_list_tests,overrides,the,non-filter,flags."""
self.RunAndVerify(flag_value='1',
expected_output=EXPECTED_OUTPUT_NO_FILTER,
other_flag='--gtest_break_on_failure')
def,testWithFilterFlags(self):
"""Tests,that,--gtest_list_tests,takes,into,account,the
--gtest_filter,flag."""
self.RunAndVerify(flag_value='1',
expected_output=EXPECTED_OUTPUT_FILTER_FOO,
other_flag='--gtest_filter=Foo*')
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2008,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Tests,the,text,output,of,Google,C++,Testing,Framework.
SYNOPSIS
gtest_output_test.py,--build_dir=BUILD/DIR,--gengolden
#,where,BUILD/DIR,contains,the,built,gtest_output_test_,file.
gtest_output_test.py,--gengolden
gtest_output_test.py
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,re
import,sys
import,gtest_test_utils
#,The,flag,for,generating,the,golden,file
GENGOLDEN_FLAG,=,'--gengolden'
CATCH_EXCEPTIONS_ENV_VAR_NAME,=,'GTEST_CATCH_EXCEPTIONS'
IS_WINDOWS,=,os.name,==,'nt'
#,TODO(vladl@google.com):,remove,the,_lin,suffix.
GOLDEN_NAME,=,'gtest_output_test_golden_lin.txt'
PROGRAM_PATH,=,gtest_test_utils.GetTestExecutablePath('gtest_output_test_')
#,At,least,one,command,we,exercise,must,not,have,the
#,--gtest_internal_skip_environment_and_ad_hoc_tests,flag.
COMMAND_LIST_TESTS,=,({},,[PROGRAM_PATH,,'--gtest_list_tests'])
COMMAND_WITH_COLOR,=,({},,[PROGRAM_PATH,,'--gtest_color=yes'])
COMMAND_WITH_TIME,=,({},,[PROGRAM_PATH,
'--gtest_print_time',
'--gtest_internal_skip_environment_and_ad_hoc_tests',
'--gtest_filter=FatalFailureTest.*:LoggingTest.*'])
COMMAND_WITH_DISABLED,=,(
{},,[PROGRAM_PATH,
'--gtest_also_run_disabled_tests',
'--gtest_internal_skip_environment_and_ad_hoc_tests',
'--gtest_filter=*DISABLED_*'])
COMMAND_WITH_SHARDING,=,(
{'GTEST_SHARD_INDEX':,'1',,'GTEST_TOTAL_SHARDS':,'2'},
[PROGRAM_PATH,
'--gtest_internal_skip_environment_and_ad_hoc_tests',
'--gtest_filter=PassingTest.*'])
GOLDEN_PATH,=,os.path.join(gtest_test_utils.GetSourceDir(),,GOLDEN_NAME)
def,ToUnixLineEnding(s):
"""Changes,all,Windows/Mac,line,endings,in,s,to,UNIX,line,endings."""
return,s.replace('\r\n',,'\n').replace('\r',,'\n')
def,RemoveLocations(test_output):
"""Removes,all,file,location,info,from,a,Google,Test,program's,output.
Args:
test_output:,,the,output,of,a,Google,Test,program.
Returns:
output,with,all,file,location,info,(in,the,form,of
'DIRECTORY/FILE_NAME:LINE_NUMBER:,'or
'DIRECTORY\\FILE_NAME(LINE_NUMBER):,'),replaced,by
'FILE_NAME:#:,'.
"""
return,re.sub(r'.*[/\\](.+)(\:\d+|\(\d+\))\:,',,r'\1:#:,',,test_output)
def,RemoveStackTraceDetails(output):
"""Removes,all,stack,traces,from,a,Google,Test,program's,output."""
#,*?,means,"find,the,shortest,string,that,matches".
return,re.sub(r'Stack,trace:(.|\n)*?\n\n',
'Stack,trace:,(omitted)\n\n',,output)
def,RemoveStackTraces(output):
"""Removes,all,traces,of,stack,traces,from,a,Google,Test,program's,output."""
#,*?,means,"find,the,shortest,string,that,matches".
return,re.sub(r'Stack,trace:(.|\n)*?\n\n',,'',,output)
def,RemoveTime(output):
"""Removes,all,time,information,from,a,Google,Test,program's,output."""
return,re.sub(r'\(\d+,ms',,'(?,ms',,output)
def,RemoveTypeInfoDetails(test_output):
"""Removes,compiler-specific,type,info,from,Google,Test,program's,output.
Args:
test_output:,,the,output,of,a,Google,Test,program.
Returns:
output,with,type,information,normalized,to,canonical,form.
"""
#,some,compilers,output,the,name,of,type,'unsigned,int',as,'unsigned'
return,re.sub(r'unsigned,int',,'unsigned',,test_output)
def,NormalizeToCurrentPlatform(test_output):
"""Normalizes,platform,specific,output,details,for,easier,comparison."""
if,IS_WINDOWS:
#,Removes,the,color,information,that,is,not,present,on,Windows.
test_output,=,re.sub('\x1b\\[(0,;3\d)?m',,'',,test_output)
#,Changes,failure,message,headers,into,the,Windows,format.
test_output,=,re.sub(r':,Failure\n',,r':,error:,',,test_output)
#,Changes,file(line_number),to,file:line_number.
test_output,=,re.sub(r'((\w|\.)+)\((\d+)\):',,r'\1:\3:',,test_output)
return,test_output
def,RemoveTestCounts(output):
"""Removes,test,counts,from,a,Google,Test,program's,output."""
output,=,re.sub(r'\d+,tests?,,listed,below',
'?,tests,,listed,below',,output)
output,=,re.sub(r'\d+,FAILED,TESTS',
'?,FAILED,TESTS',,output)
output,=,re.sub(r'\d+,tests?,from,\d+,test,cases?',
'?,tests,from,?,test,cases',,output)
output,=,re.sub(r'\d+,tests?,from,([a-zA-Z_])',
r'?,tests,from,\1',,output)
return,re.sub(r'\d+,tests?\.',,'?,tests.',,output)
def,RemoveMatchingTests(test_output,,pattern):
"""Removes,output,of,specified,tests,from,a,Google,Test,program's,output.
This,function,strips,not,only,the,beginning,and,the,end,of,a,test,but,also
all,output,in,between.
Args:
test_output:,,,,,,,A,string,containing,the,test,output.
pattern:,,,,,,,,,,,A,regex,string,that,matches,names,of,test,cases,or
tests,to,remove.
Returns:
Contents,of,test_output,with,tests,whose,names,match,pattern,removed.
"""
test_output,=,re.sub(
r'.*\[,RUN,,,,,,\],.*%s(.|\n)*?\[(,,FAILED,,|,,,,,,,OK,)\],.*%s.*\n',%,(
pattern,,pattern),
'',
test_output)
return,re.sub(r'.*%s.*\n',%,pattern,,'',,test_output)
def,NormalizeOutput(output):
"""Normalizes,output,(the,output,of,gtest_output_test_.exe)."""
output,=,ToUnixLineEnding(output)
output,=,RemoveLocations(output)
output,=,RemoveStackTraceDetails(output)
output,=,RemoveTime(output)
return,output
def,GetShellCommandOutput(env_cmd):
"""Runs,a,command,in,a,sub-process,,and,returns,its,output,in,a,string.
Args:
env_cmd:,The,shell,command.,A,2-tuple,where,element,0,is,a,dict,of,extra
environment,variables,to,set,,and,element,1,is,a,string,with
the,command,and,any,flags.
Returns:
A,string,with,the,command's,combined,standard,and,diagnostic,output.
"""
#,Spawns,cmd,in,a,sub-process,,and,gets,its,standard,I/O,file,objects.
#,Set,and,save,the,environment,properly.
environ,=,os.environ.copy()
environ.update(env_cmd[0])
p,=,gtest_test_utils.Subprocess(env_cmd[1],,env=environ)
return,p.output
def,GetCommandOutput(env_cmd):
"""Runs,a,command,and,returns,its,output,with,all,file,location
info,stripped,off.
Args:
env_cmd:,,The,shell,command.,A,2-tuple,where,element,0,is,a,dict,of,extra
environment,variables,to,set,,and,element,1,is,a,string,with
the,command,and,any,flags.
"""
#,Disables,exception,pop-ups,on,Windows.
environ,,cmdline,=,env_cmd
environ,=,dict(environ),,#,Ensures,we,are,modifying,a,copy.
environ[CATCH_EXCEPTIONS_ENV_VAR_NAME],=,'1'
return,NormalizeOutput(GetShellCommandOutput((environ,,cmdline)))
def,GetOutputOfAllCommands():
"""Returns,concatenated,output,from,several,representative,commands."""
return,(GetCommandOutput(COMMAND_WITH_COLOR),+
GetCommandOutput(COMMAND_WITH_TIME),+
GetCommandOutput(COMMAND_WITH_DISABLED),+
GetCommandOutput(COMMAND_WITH_SHARDING))
test_list,=,GetShellCommandOutput(COMMAND_LIST_TESTS)
SUPPORTS_DEATH_TESTS,=,'DeathTest',in,test_list
SUPPORTS_TYPED_TESTS,=,'TypedTest',in,test_list
SUPPORTS_THREADS,=,'ExpectFailureWithThreadsTest',in,test_list
SUPPORTS_STACK_TRACES,=,False
CAN_GENERATE_GOLDEN_FILE,=,(SUPPORTS_DEATH_TESTS,and
SUPPORTS_TYPED_TESTS,and
SUPPORTS_THREADS)
class,GTestOutputTest(gtest_test_utils.TestCase):
def,RemoveUnsupportedTests(self,,test_output):
if,not,SUPPORTS_DEATH_TESTS:
test_output,=,RemoveMatchingTests(test_output,,'DeathTest')
if,not,SUPPORTS_TYPED_TESTS:
test_output,=,RemoveMatchingTests(test_output,,'TypedTest')
test_output,=,RemoveMatchingTests(test_output,,'TypedDeathTest')
test_output,=,RemoveMatchingTests(test_output,,'TypeParamDeathTest')
if,not,SUPPORTS_THREADS:
test_output,=,RemoveMatchingTests(test_output,
'ExpectFailureWithThreadsTest')
test_output,=,RemoveMatchingTests(test_output,
'ScopedFakeTestPartResultReporterTest')
test_output,=,RemoveMatchingTests(test_output,
'WorksConcurrently')
if,not,SUPPORTS_STACK_TRACES:
test_output,=,RemoveStackTraces(test_output)
return,test_output
def,testOutput(self):
output,=,GetOutputOfAllCommands()
golden_file,=,open(GOLDEN_PATH,,'rb')
#,A,mis-configured,source,control,system,can,cause,\r,appear,in,EOL
#,sequences,when,we,read,the,golden,file,irrespective,of,an,operating
#,system,used.,Therefore,,we,need,to,strip,those,\r's,from,newlines
#,unconditionally.
golden,=,ToUnixLineEnding(golden_file.read())
golden_file.close()
#,We,want,the,test,to,pass,regardless,of,certain,features,being
#,supported,or,not.
#,We,still,have,to,remove,type,name,specifics,in,all,cases.
normalized_actual,=,RemoveTypeInfoDetails(output)
normalized_golden,=,RemoveTypeInfoDetails(golden)
if,CAN_GENERATE_GOLDEN_FILE:
self.assertEqual(normalized_golden,,normalized_actual)
else:
normalized_actual,=,NormalizeToCurrentPlatform(
RemoveTestCounts(normalized_actual))
normalized_golden,=,NormalizeToCurrentPlatform(
RemoveTestCounts(self.RemoveUnsupportedTests(normalized_golden)))
#,This,code,is,very,handy,when,debugging,golden,file,differences:
if,os.getenv('DEBUG_GTEST_OUTPUT_TEST'):
open(os.path.join(
gtest_test_utils.GetSourceDir(),
'_gtest_output_test_normalized_actual.txt'),,'wb').write(
normalized_actual)
open(os.path.join(
gtest_test_utils.GetSourceDir(),
'_gtest_output_test_normalized_golden.txt'),,'wb').write(
normalized_golden)
self.assertEqual(normalized_golden,,normalized_actual)
if,__name__,==,'__main__':
if,sys.argv[1:],==,[GENGOLDEN_FLAG]:
if,CAN_GENERATE_GOLDEN_FILE:
output,=,GetOutputOfAllCommands()
golden_file,=,open(GOLDEN_PATH,,'wb')
golden_file.write(output)
golden_file.close()
else:
message,=,(
"""Unable,to,write,a,golden,file,when,compiled,in,an,environment
that,does,not,support,all,the,required,features,(death,tests,,typed,tests,
and,multiple,threads).,,Please,generate,the,golden,file,using,a,binary,built
with,those,features,enabled.""")
sys.stderr.write(message)
sys.exit(1)
else:
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2009,Google,Inc.,All,Rights,Reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Verifies,that,test,shuffling,works."""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,gtest_test_utils
#,Command,to,run,the,gtest_shuffle_test_,program.
COMMAND,=,gtest_test_utils.GetTestExecutablePath('gtest_shuffle_test_')
#,The,environment,variables,for,test,sharding.
TOTAL_SHARDS_ENV_VAR,=,'GTEST_TOTAL_SHARDS'
SHARD_INDEX_ENV_VAR,=,'GTEST_SHARD_INDEX'
TEST_FILTER,=,'A*.A:A*.B:C*'
ALL_TESTS,=,[]
ACTIVE_TESTS,=,[]
FILTERED_TESTS,=,[]
SHARDED_TESTS,=,[]
SHUFFLED_ALL_TESTS,=,[]
SHUFFLED_ACTIVE_TESTS,=,[]
SHUFFLED_FILTERED_TESTS,=,[]
SHUFFLED_SHARDED_TESTS,=,[]
def,AlsoRunDisabledTestsFlag():
return,'--gtest_also_run_disabled_tests'
def,FilterFlag(test_filter):
return,'--gtest_filter=%s',%,(test_filter,)
def,RepeatFlag(n):
return,'--gtest_repeat=%s',%,(n,)
def,ShuffleFlag():
return,'--gtest_shuffle'
def,RandomSeedFlag(n):
return,'--gtest_random_seed=%s',%,(n,)
def,RunAndReturnOutput(extra_env,,args):
"""Runs,the,test,program,and,returns,its,output."""
environ_copy,=,os.environ.copy()
environ_copy.update(extra_env)
return,gtest_test_utils.Subprocess([COMMAND],+,args,,env=environ_copy).output
def,GetTestsForAllIterations(extra_env,,args):
"""Runs,the,test,program,and,returns,a,list,of,test,lists.
Args:
extra_env:,a,map,from,environment,variables,to,their,values
args:,command,line,flags,to,pass,to,gtest_shuffle_test_
Returns:
A,list,where,the,i-th,element,is,the,list,of,tests,run,in,the,i-th
test,iteration.
"""
test_iterations,=,[]
for,line,in,RunAndReturnOutput(extra_env,,args).split('\n'):
if,line.startswith('----'):
tests,=,[]
test_iterations.append(tests)
elif,line.strip():
tests.append(line.strip()),,#,'TestCaseName.TestName'
return,test_iterations
def,GetTestCases(tests):
"""Returns,a,list,of,test,cases,in,the,given,full,test,names.
Args:
tests:,a,list,of,full,test,names
Returns:
A,list,of,test,cases,from,'tests',,in,their,original,order.
Consecutive,duplicates,are,removed.
"""
test_cases,=,[]
for,test,in,tests:
test_case,=,test.split('.')[0]
if,not,test_case,in,test_cases:
test_cases.append(test_case)
return,test_cases
def,CalculateTestLists():
"""Calculates,the,list,of,tests,run,under,different,flags."""
if,not,ALL_TESTS:
ALL_TESTS.extend(
GetTestsForAllIterations({},,[AlsoRunDisabledTestsFlag()])[0])
if,not,ACTIVE_TESTS:
ACTIVE_TESTS.extend(GetTestsForAllIterations({},,[])[0])
if,not,FILTERED_TESTS:
FILTERED_TESTS.extend(
GetTestsForAllIterations({},,[FilterFlag(TEST_FILTER)])[0])
if,not,SHARDED_TESTS:
SHARDED_TESTS.extend(
GetTestsForAllIterations({TOTAL_SHARDS_ENV_VAR:,'3',
SHARD_INDEX_ENV_VAR:,'1'},
[])[0])
if,not,SHUFFLED_ALL_TESTS:
SHUFFLED_ALL_TESTS.extend(GetTestsForAllIterations(
{},,[AlsoRunDisabledTestsFlag(),,ShuffleFlag(),,RandomSeedFlag(1)])[0])
if,not,SHUFFLED_ACTIVE_TESTS:
SHUFFLED_ACTIVE_TESTS.extend(GetTestsForAllIterations(
{},,[ShuffleFlag(),,RandomSeedFlag(1)])[0])
if,not,SHUFFLED_FILTERED_TESTS:
SHUFFLED_FILTERED_TESTS.extend(GetTestsForAllIterations(
{},,[ShuffleFlag(),,RandomSeedFlag(1),,FilterFlag(TEST_FILTER)])[0])
if,not,SHUFFLED_SHARDED_TESTS:
SHUFFLED_SHARDED_TESTS.extend(
GetTestsForAllIterations({TOTAL_SHARDS_ENV_VAR:,'3',
SHARD_INDEX_ENV_VAR:,'1'},
[ShuffleFlag(),,RandomSeedFlag(1)])[0])
class,GTestShuffleUnitTest(gtest_test_utils.TestCase):
"""Tests,test,shuffling."""
def,setUp(self):
CalculateTestLists()
def,testShufflePreservesNumberOfTests(self):
self.assertEqual(len(ALL_TESTS),,len(SHUFFLED_ALL_TESTS))
self.assertEqual(len(ACTIVE_TESTS),,len(SHUFFLED_ACTIVE_TESTS))
self.assertEqual(len(FILTERED_TESTS),,len(SHUFFLED_FILTERED_TESTS))
self.assertEqual(len(SHARDED_TESTS),,len(SHUFFLED_SHARDED_TESTS))
def,testShuffleChangesTestOrder(self):
self.assert_(SHUFFLED_ALL_TESTS,!=,ALL_TESTS,,SHUFFLED_ALL_TESTS)
self.assert_(SHUFFLED_ACTIVE_TESTS,!=,ACTIVE_TESTS,,SHUFFLED_ACTIVE_TESTS)
self.assert_(SHUFFLED_FILTERED_TESTS,!=,FILTERED_TESTS,
SHUFFLED_FILTERED_TESTS)
self.assert_(SHUFFLED_SHARDED_TESTS,!=,SHARDED_TESTS,
SHUFFLED_SHARDED_TESTS)
def,testShuffleChangesTestCaseOrder(self):
self.assert_(GetTestCases(SHUFFLED_ALL_TESTS),!=,GetTestCases(ALL_TESTS),
GetTestCases(SHUFFLED_ALL_TESTS))
self.assert_(
GetTestCases(SHUFFLED_ACTIVE_TESTS),!=,GetTestCases(ACTIVE_TESTS),
GetTestCases(SHUFFLED_ACTIVE_TESTS))
self.assert_(
GetTestCases(SHUFFLED_FILTERED_TESTS),!=,GetTestCases(FILTERED_TESTS),
GetTestCases(SHUFFLED_FILTERED_TESTS))
self.assert_(
GetTestCases(SHUFFLED_SHARDED_TESTS),!=,GetTestCases(SHARDED_TESTS),
GetTestCases(SHUFFLED_SHARDED_TESTS))
def,testShuffleDoesNotRepeatTest(self):
for,test,in,SHUFFLED_ALL_TESTS:
self.assertEqual(1,,SHUFFLED_ALL_TESTS.count(test),
'%s,appears,more,than,once',%,(test,))
for,test,in,SHUFFLED_ACTIVE_TESTS:
self.assertEqual(1,,SHUFFLED_ACTIVE_TESTS.count(test),
'%s,appears,more,than,once',%,(test,))
for,test,in,SHUFFLED_FILTERED_TESTS:
self.assertEqual(1,,SHUFFLED_FILTERED_TESTS.count(test),
'%s,appears,more,than,once',%,(test,))
for,test,in,SHUFFLED_SHARDED_TESTS:
self.assertEqual(1,,SHUFFLED_SHARDED_TESTS.count(test),
'%s,appears,more,than,once',%,(test,))
def,testShuffleDoesNotCreateNewTest(self):
for,test,in,SHUFFLED_ALL_TESTS:
self.assert_(test,in,ALL_TESTS,,'%s,is,an,invalid,test',%,(test,))
for,test,in,SHUFFLED_ACTIVE_TESTS:
self.assert_(test,in,ACTIVE_TESTS,,'%s,is,an,invalid,test',%,(test,))
for,test,in,SHUFFLED_FILTERED_TESTS:
self.assert_(test,in,FILTERED_TESTS,,'%s,is,an,invalid,test',%,(test,))
for,test,in,SHUFFLED_SHARDED_TESTS:
self.assert_(test,in,SHARDED_TESTS,,'%s,is,an,invalid,test',%,(test,))
def,testShuffleIncludesAllTests(self):
for,test,in,ALL_TESTS:
self.assert_(test,in,SHUFFLED_ALL_TESTS,,'%s,is,missing',%,(test,))
for,test,in,ACTIVE_TESTS:
self.assert_(test,in,SHUFFLED_ACTIVE_TESTS,,'%s,is,missing',%,(test,))
for,test,in,FILTERED_TESTS:
self.assert_(test,in,SHUFFLED_FILTERED_TESTS,,'%s,is,missing',%,(test,))
for,test,in,SHARDED_TESTS:
self.assert_(test,in,SHUFFLED_SHARDED_TESTS,,'%s,is,missing',%,(test,))
def,testShuffleLeavesDeathTestsAtFront(self):
non_death_test_found,=,False
for,test,in,SHUFFLED_ACTIVE_TESTS:
if,'DeathTest.',in,test:
self.assert_(not,non_death_test_found,
'%s,appears,after,a,non-death,test',%,(test,))
else:
non_death_test_found,=,True
def,_VerifyTestCasesDoNotInterleave(self,,tests):
test_cases,=,[]
for,test,in,tests:
[test_case,,_],=,test.split('.')
if,test_cases,and,test_cases[-1],!=,test_case:
test_cases.append(test_case)
self.assertEqual(1,,test_cases.count(test_case),
'Test,case,%s,is,not,grouped,together,in,%s',%
(test_case,,tests))
def,testShuffleDoesNotInterleaveTestCases(self):
self._VerifyTestCasesDoNotInterleave(SHUFFLED_ALL_TESTS)
self._VerifyTestCasesDoNotInterleave(SHUFFLED_ACTIVE_TESTS)
self._VerifyTestCasesDoNotInterleave(SHUFFLED_FILTERED_TESTS)
self._VerifyTestCasesDoNotInterleave(SHUFFLED_SHARDED_TESTS)
def,testShuffleRestoresOrderAfterEachIteration(self):
#,Get,the,test,lists,in,all,3,iterations,,using,random,seed,1,,2,
#,and,3,respectively.,,Google,Test,picks,a,different,seed,in,each
#,iteration,,and,this,test,depends,on,the,current,implementation
#,picking,successive,numbers.,,This,dependency,is,not,ideal,,but
#,makes,the,test,much,easier,to,write.
[tests_in_iteration1,,tests_in_iteration2,,tests_in_iteration3],=,(
GetTestsForAllIterations(
{},,[ShuffleFlag(),,RandomSeedFlag(1),,RepeatFlag(3)]))
#,Make,sure,running,the,tests,with,random,seed,1,gets,the,same
#,order,as,in,iteration,1,above.
[tests_with_seed1],=,GetTestsForAllIterations(
{},,[ShuffleFlag(),,RandomSeedFlag(1)])
self.assertEqual(tests_in_iteration1,,tests_with_seed1)
#,Make,sure,running,the,tests,with,random,seed,2,gets,the,same
#,order,as,in,iteration,2,above.,,Success,means,that,Google,Test
#,correctly,restores,the,test,order,before,re-shuffling,at,the
#,beginning,of,iteration,2.
[tests_with_seed2],=,GetTestsForAllIterations(
{},,[ShuffleFlag(),,RandomSeedFlag(2)])
self.assertEqual(tests_in_iteration2,,tests_with_seed2)
#,Make,sure,running,the,tests,with,random,seed,3,gets,the,same
#,order,as,in,iteration,3,above.,,Success,means,that,Google,Test
#,correctly,restores,the,test,order,before,re-shuffling,at,the
#,beginning,of,iteration,3.
[tests_with_seed3],=,GetTestsForAllIterations(
{},,[ShuffleFlag(),,RandomSeedFlag(3)])
self.assertEqual(tests_in_iteration3,,tests_with_seed3)
def,testShuffleGeneratesNewOrderInEachIteration(self):
[tests_in_iteration1,,tests_in_iteration2,,tests_in_iteration3],=,(
GetTestsForAllIterations(
{},,[ShuffleFlag(),,RandomSeedFlag(1),,RepeatFlag(3)]))
self.assert_(tests_in_iteration1,!=,tests_in_iteration2,
tests_in_iteration1)
self.assert_(tests_in_iteration1,!=,tests_in_iteration3,
tests_in_iteration1)
self.assert_(tests_in_iteration2,!=,tests_in_iteration3,
tests_in_iteration2)
def,testShuffleShardedTestsPreservesPartition(self):
#,If,we,run,M,tests,on,N,shards,,the,same,M,tests,should,be,run,in
#,total,,regardless,of,the,random,seeds,used,by,the,shards.
[tests1],=,GetTestsForAllIterations({TOTAL_SHARDS_ENV_VAR:,'3',
SHARD_INDEX_ENV_VAR:,'0'},
[ShuffleFlag(),,RandomSeedFlag(1)])
[tests2],=,GetTestsForAllIterations({TOTAL_SHARDS_ENV_VAR:,'3',
SHARD_INDEX_ENV_VAR:,'1'},
[ShuffleFlag(),,RandomSeedFlag(20)])
[tests3],=,GetTestsForAllIterations({TOTAL_SHARDS_ENV_VAR:,'3',
SHARD_INDEX_ENV_VAR:,'2'},
[ShuffleFlag(),,RandomSeedFlag(25)])
sorted_sharded_tests,=,tests1,+,tests2,+,tests3
sorted_sharded_tests.sort()
sorted_active_tests,=,[]
sorted_active_tests.extend(ACTIVE_TESTS)
sorted_active_tests.sort()
self.assertEqual(sorted_active_tests,,sorted_sharded_tests)
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2006,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Unit,test,utilities,for,Google,C++,Testing,Framework."""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,atexit
import,os
import,shutil
import,sys
import,tempfile
import,unittest
_test_module,=,unittest
#,Suppresses,the,'Import,not,at,the,top,of,the,file',lint,complaint.
#,pylint:,disable-msg=C6204
try:
import,subprocess
_SUBPROCESS_MODULE_AVAILABLE,=,True
except:
import,popen2
_SUBPROCESS_MODULE_AVAILABLE,=,False
#,pylint:,enable-msg=C6204
GTEST_OUTPUT_VAR_NAME,=,'GTEST_OUTPUT'
IS_WINDOWS,=,os.name,==,'nt'
IS_CYGWIN,=,os.name,==,'posix',and,'CYGWIN',in,os.uname()[0]
#,Here,we,expose,a,class,from,a,particular,module,,depending,on,the
#,environment.,The,comment,suppresses,the,'Invalid,variable,name',lint
#,complaint.
TestCase,=,_test_module.TestCase,,#,pylint:,disable-msg=C6409
#,Initially,maps,a,flag,to,its,default,value.,After
#,_ParseAndStripGTestFlags(),is,called,,maps,a,flag,to,its,actual,value.
_flag_map,=,{'source_dir':,os.path.dirname(sys.argv[0]),
'build_dir':,os.path.dirname(sys.argv[0])}
_gtest_flags_are_parsed,=,False
def,_ParseAndStripGTestFlags(argv):
"""Parses,and,strips,Google,Test,flags,from,argv.,,This,is,idempotent."""
#,Suppresses,the,lint,complaint,about,a,global,variable,since,we,need,it
#,here,to,maintain,module-wide,state.
global,_gtest_flags_are_parsed,,#,pylint:,disable-msg=W0603
if,_gtest_flags_are_parsed:
return
_gtest_flags_are_parsed,=,True
for,flag,in,_flag_map:
#,The,environment,variable,overrides,the,default,value.
if,flag.upper(),in,os.environ:
_flag_map[flag],=,os.environ[flag.upper()]
#,The,command,line,flag,overrides,the,environment,variable.
i,=,1,,#,Skips,the,program,name.
while,i,<,len(argv):
prefix,=,'--',+,flag,+,'='
if,argv[i].startswith(prefix):
_flag_map[flag],=,argv[i][len(prefix):]
del,argv[i]
break
else:
#,We,don't,increment,i,in,case,we,just,found,a,--gtest_*,flag
#,and,removed,it,from,argv.
i,+=,1
def,GetFlag(flag):
"""Returns,the,value,of,the,given,flag."""
#,In,case,GetFlag(),is,called,before,Main(),,we,always,call
#,_ParseAndStripGTestFlags(),here,to,make,sure,the,--gtest_*,flags
#,are,parsed.
_ParseAndStripGTestFlags(sys.argv)
return,_flag_map[flag]
def,GetSourceDir():
"""Returns,the,absolute,path,of,the,directory,where,the,.py,files,are."""
return,os.path.abspath(GetFlag('source_dir'))
def,GetBuildDir():
"""Returns,the,absolute,path,of,the,directory,where,the,test,binaries,are."""
return,os.path.abspath(GetFlag('build_dir'))
_temp_dir,=,None
def,_RemoveTempDir():
if,_temp_dir:
shutil.rmtree(_temp_dir,,ignore_errors=True)
atexit.register(_RemoveTempDir)
def,GetTempDir():
"""Returns,a,directory,for,temporary,files."""
global,_temp_dir
if,not,_temp_dir:
_temp_dir,=,tempfile.mkdtemp()
return,_temp_dir
def,GetTestExecutablePath(executable_name,,build_dir=None):
"""Returns,the,absolute,path,of,the,test,binary,given,its,name.
The,function,will,print,a,message,and,abort,the,program,if,the,resulting,file
doesn't,exist.
Args:
executable_name:,name,of,the,test,binary,that,the,test,script,runs.
build_dir:,,,,,,,directory,where,to,look,for,executables,,by,default
the,result,of,GetBuildDir().
Returns:
The,absolute,path,of,the,test,binary.
"""
path,=,os.path.abspath(os.path.join(build_dir,or,GetBuildDir(),
executable_name))
if,(IS_WINDOWS,or,IS_CYGWIN),and,not,path.endswith('.exe'):
path,+=,'.exe'
if,not,os.path.exists(path):
message,=,(
'Unable,to,find,the,test,binary.,Please,make,sure,to,provide,path\n'
'to,the,binary,via,the,--build_dir,flag,or,the,BUILD_DIR\n'
'environment,variable.')
print,>>,sys.stderr,,message
sys.exit(1)
return,path
def,GetExitStatus(exit_code):
"""Returns,the,argument,to,exit(),,or,-1,if,exit(),wasn't,called.
Args:
exit_code:,the,result,value,of,os.system(command).
"""
if,os.name,==,'nt':
#,On,Windows,,os.WEXITSTATUS(),doesn't,work,and,os.system(),returns
#,the,argument,to,exit(),directly.
return,exit_code
else:
#,On,Unix,,os.WEXITSTATUS(),must,be,used,to,extract,the,exit,status
#,from,the,result,of,os.system().
if,os.WIFEXITED(exit_code):
return,os.WEXITSTATUS(exit_code)
else:
return,-1
class,Subprocess:
def,__init__(self,,command,,working_dir=None,,capture_stderr=True,,env=None):
"""Changes,into,a,specified,directory,,if,provided,,and,executes,a,command.
Restores,the,old,directory,afterwards.
Args:
command:,,,,,,,,The,command,to,run,,in,the,form,of,sys.argv.
working_dir:,,,,The,directory,to,change,into.
capture_stderr:,Determines,whether,to,capture,stderr,in,the,output,member
or,to,discard,it.
env:,,,,,,,,,,,,Dictionary,with,environment,to,pass,to,the,subprocess.
Returns:
An,object,that,represents,outcome,of,the,executed,process.,It,has,the
following,attributes:
terminated_by_signal,,,True,iff,the,child,process,has,been,terminated
by,a,signal.
signal,,,,,,,,,,,,,,,,,Sygnal,that,terminated,the,child,process.
exited,,,,,,,,,,,,,,,,,True,iff,the,child,process,exited,normally.
exit_code,,,,,,,,,,,,,,The,code,with,which,the,child,process,exited.
output,,,,,,,,,,,,,,,,,Child,process's,stdout,and,stderr,output
combined,in,a,string.
"""
#,The,subprocess,module,is,the,preferrable,way,of,running,programs
#,since,it,is,available,and,behaves,consistently,on,all,platforms,
#,including,Windows.,But,it,is,only,available,starting,in,python,2.4.
#,In,earlier,python,versions,,we,revert,to,the,popen2,module,,which,is
#,available,in,python,2.0,and,later,but,doesn't,provide,required
#,functionality,(Popen4),under,Windows.,This,allows,us,to,support,Mac
#,OS,X,10.4,Tiger,,which,has,python,2.3,installed.
if,_SUBPROCESS_MODULE_AVAILABLE:
if,capture_stderr:
stderr,=,subprocess.STDOUT
else:
stderr,=,subprocess.PIPE
p,=,subprocess.Popen(command,
stdout=subprocess.PIPE,,stderr=stderr,
cwd=working_dir,,universal_newlines=True,,env=env)
#,communicate,returns,a,tuple,with,the,file,obect,for,the,child's
#,output.
self.output,=,p.communicate()[0]
self._return_code,=,p.returncode
else:
old_dir,=,os.getcwd()
def,_ReplaceEnvDict(dest,,src):
#,Changes,made,by,os.environ.clear,are,not,inheritable,by,child
#,processes,until,Python,2.6.,To,produce,inheritable,changes,we,have
#,to,delete,environment,items,with,the,del,statement.
for,key,in,dest:
del,dest[key]
dest.update(src)
#,When,'env',is,not,None,,backup,the,environment,variables,and,replace
#,them,with,the,passed,'env'.,When,'env',is,None,,we,simply,use,the
#,current,'os.environ',for,compatibility,with,the,subprocess.Popen
#,semantics,used,above.
if,env,is,not,None:
old_environ,=,os.environ.copy()
_ReplaceEnvDict(os.environ,,env)
try:
if,working_dir,is,not,None:
os.chdir(working_dir)
if,capture_stderr:
p,=,popen2.Popen4(command)
else:
p,=,popen2.Popen3(command)
p.tochild.close()
self.output,=,p.fromchild.read()
ret_code,=,p.wait()
finally:
os.chdir(old_dir)
#,Restore,the,old,environment,variables
#,if,they,were,replaced.
if,env,is,not,None:
_ReplaceEnvDict(os.environ,,old_environ)
#,Converts,ret_code,to,match,the,semantics,of
#,subprocess.Popen.returncode.
if,os.WIFSIGNALED(ret_code):
self._return_code,=,-os.WTERMSIG(ret_code)
else:,,#,os.WIFEXITED(ret_code),should,return,True,here.
self._return_code,=,os.WEXITSTATUS(ret_code)
if,self._return_code,<,0:
self.terminated_by_signal,=,True
self.exited,=,False
self.signal,=,-self._return_code
else:
self.terminated_by_signal,=,False
self.exited,=,True
self.exit_code,=,self._return_code
def,Main():
"""Runs,the,unit,test."""
#,We,must,call,_ParseAndStripGTestFlags(),before,calling
#,unittest.main().,,Otherwise,the,latter,will,be,confused,by,the
#,--gtest_*,flags.
_ParseAndStripGTestFlags(sys.argv)
#,The,tested,binaries,should,not,be,writing,XML,output,files,unless,the
#,script,explicitly,instructs,them,to.
#,TODO(vladl@google.com):,Move,this,into,Subprocess,when,we,implement
#,passing,environment,into,it,as,a,parameter.
if,GTEST_OUTPUT_VAR_NAME,in,os.environ:
del,os.environ[GTEST_OUTPUT_VAR_NAME]
_test_module.main()
#!/usr/bin/env,python
#
#,Copyright,2009,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Tests,Google,Test's,throw-on-failure,mode,with,exceptions,disabled.
This,script,invokes,gtest_throw_on_failure_test_,(a,program,written,with
Google,Test),with,different,environments,and,command,line,flags.
"""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,os
import,gtest_test_utils
#,Constants.
#,The,command,line,flag,for,enabling/disabling,the,throw-on-failure,mode.
THROW_ON_FAILURE,=,'gtest_throw_on_failure'
#,Path,to,the,gtest_throw_on_failure_test_,program,,compiled,with
#,exceptions,disabled.
EXE_PATH,=,gtest_test_utils.GetTestExecutablePath(
'gtest_throw_on_failure_test_')
#,Utilities.
def,SetEnvVar(env_var,,value):
"""Sets,an,environment,variable,to,a,given,value,;,unsets,it,when,the
given,value,is,None.
"""
env_var,=,env_var.upper()
if,value,is,not,None:
os.environ[env_var],=,value
elif,env_var,in,os.environ:
del,os.environ[env_var]
def,Run(command):
"""Runs,a,command,;,returns,True/False,if,its,exit,code,is/isn't,0."""
print,'Running,"%s".,.,.',%,','.join(command)
p,=,gtest_test_utils.Subprocess(command)
return,p.exited,and,p.exit_code,==,0
#,The,tests.,,TODO(wan@google.com):,refactor,the,class,to,share,common
#,logic,with,code,in,gtest_break_on_failure_unittest.py.
class,ThrowOnFailureTest(gtest_test_utils.TestCase):
"""Tests,the,throw-on-failure,mode."""
def,RunAndVerify(self,,env_var_value,,flag_value,,should_fail):
"""Runs,gtest_throw_on_failure_test_,and,verifies,that,it,does
(or,does,not),exit,with,a,non-zero,code.
Args:
env_var_value:,,,,value,of,the,GTEST_BREAK_ON_FAILURE,environment
variable,;,None,if,the,variable,should,be,unset.
flag_value:,,,,,,,value,of,the,--gtest_break_on_failure,flag,;
None,if,the,flag,should,not,be,present.
should_fail:,,,,,,True,iff,the,program,is,expected,to,fail.
"""
SetEnvVar(THROW_ON_FAILURE,,env_var_value)
if,env_var_value,is,None:
env_var_value_msg,=,',is,not,set'
else:
env_var_value_msg,=,'=',+,env_var_value
if,flag_value,is,None:
flag,=,''
elif,flag_value,==,'0':
flag,=,'--%s=0',%,THROW_ON_FAILURE
else:
flag,=,'--%s',%,THROW_ON_FAILURE
command,=,[EXE_PATH]
if,flag:
command.append(flag)
if,should_fail:
should_or_not,=,'should'
else:
should_or_not,=,'should,not'
failed,=,not,Run(command)
SetEnvVar(THROW_ON_FAILURE,,None)
msg,=,('when,%s%s,,an,assertion,failure,in,"%s",%s,cause,a,non-zero,'
'exit,code.',%
(THROW_ON_FAILURE,,env_var_value_msg,,','.join(command),
should_or_not))
self.assert_(failed,==,should_fail,,msg)
def,testDefaultBehavior(self):
"""Tests,the,behavior,of,the,default,mode."""
self.RunAndVerify(env_var_value=None,,flag_value=None,,should_fail=False)
def,testThrowOnFailureEnvVar(self):
"""Tests,using,the,GTEST_THROW_ON_FAILURE,environment,variable."""
self.RunAndVerify(env_var_value='0',
flag_value=None,
should_fail=False)
self.RunAndVerify(env_var_value='1',
flag_value=None,
should_fail=True)
def,testThrowOnFailureFlag(self):
"""Tests,using,the,--gtest_throw_on_failure,flag."""
self.RunAndVerify(env_var_value=None,
flag_value='0',
should_fail=False)
self.RunAndVerify(env_var_value=None,
flag_value='1',
should_fail=True)
def,testThrowOnFailureFlagOverridesEnvVar(self):
"""Tests,that,--gtest_throw_on_failure,overrides,GTEST_THROW_ON_FAILURE."""
self.RunAndVerify(env_var_value='0',
flag_value='0',
should_fail=False)
self.RunAndVerify(env_var_value='0',
flag_value='1',
should_fail=True)
self.RunAndVerify(env_var_value='1',
flag_value='0',
should_fail=False)
self.RunAndVerify(env_var_value='1',
flag_value='1',
should_fail=True)
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2008,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Verifies,that,Google,Test,warns,the,user,when,not,initialized,properly."""
__author__,=,'wan@google.com,(Zhanyong,Wan)'
import,gtest_test_utils
COMMAND,=,gtest_test_utils.GetTestExecutablePath('gtest_uninitialized_test_')
def,Assert(condition):
if,not,condition:
raise,AssertionError
def,AssertEq(expected,,actual):
if,expected,!=,actual:
print,'Expected:,%s',%,(expected,)
print,',,Actual:,%s',%,(actual,)
raise,AssertionError
def,TestExitCodeAndOutput(command):
"""Runs,the,given,command,and,verifies,its,exit,code,and,output."""
#,Verifies,that,'command',exits,with,code,1.
p,=,gtest_test_utils.Subprocess(command)
Assert(p.exited)
AssertEq(1,,p.exit_code)
Assert('InitGoogleTest',in,p.output)
class,GTestUninitializedTest(gtest_test_utils.TestCase):
def,testExitCodeAndOutput(self):
TestExitCodeAndOutput(COMMAND)
if,__name__,==,'__main__':
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2008,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""Unit,test,for,the,gtest_xml_output,module."""
__author__,=,"keith.ray@gmail.com,(Keith,Ray)"
import,os
from,xml.dom,import,minidom,,Node
import,gtest_test_utils
import,gtest_xml_test_utils
GTEST_OUTPUT_SUBDIR,=,"xml_outfiles"
GTEST_OUTPUT_1_TEST,=,"gtest_xml_outfile1_test_"
GTEST_OUTPUT_2_TEST,=,"gtest_xml_outfile2_test_"
EXPECTED_XML_1,=,"""<?xml,version="1.0",encoding="UTF-8"?>
<testsuites,tests="1",failures="0",disabled="0",errors="0",time="*",name="AllTests">
<testsuite,name="PropertyOne",tests="1",failures="0",disabled="0",errors="0",time="*">
<testcase,name="TestSomeProperties",status="run",time="*",classname="PropertyOne",SetUpProp="1",TestSomeProperty="1",TearDownProp="1",/>
</testsuite>
</testsuites>
"""
EXPECTED_XML_2,=,"""<?xml,version="1.0",encoding="UTF-8"?>
<testsuites,tests="1",failures="0",disabled="0",errors="0",time="*",name="AllTests">
<testsuite,name="PropertyTwo",tests="1",failures="0",disabled="0",errors="0",time="*">
<testcase,name="TestSomeProperties",status="run",time="*",classname="PropertyTwo",SetUpProp="2",TestSomeProperty="2",TearDownProp="2",/>
</testsuite>
</testsuites>
"""
class,GTestXMLOutFilesTest(gtest_xml_test_utils.GTestXMLTestCase):
"""Unit,test,for,Google,Test's,XML,output,functionality."""
def,setUp(self):
#,We,want,the,trailing,'/',that,the,last,"",provides,in,os.path.join,,for
#,telling,Google,Test,to,create,an,output,directory,instead,of,a,single,file
#,for,xml,output.
self.output_dir_,=,os.path.join(gtest_test_utils.GetTempDir(),
GTEST_OUTPUT_SUBDIR,,"")
self.DeleteFilesAndDir()
def,tearDown(self):
self.DeleteFilesAndDir()
def,DeleteFilesAndDir(self):
try:
os.remove(os.path.join(self.output_dir_,,GTEST_OUTPUT_1_TEST,+,".xml"))
except,os.error:
pass
try:
os.remove(os.path.join(self.output_dir_,,GTEST_OUTPUT_2_TEST,+,".xml"))
except,os.error:
pass
try:
os.rmdir(self.output_dir_)
except,os.error:
pass
def,testOutfile1(self):
self._TestOutFile(GTEST_OUTPUT_1_TEST,,EXPECTED_XML_1)
def,testOutfile2(self):
self._TestOutFile(GTEST_OUTPUT_2_TEST,,EXPECTED_XML_2)
def,_TestOutFile(self,,test_name,,expected_xml):
gtest_prog_path,=,gtest_test_utils.GetTestExecutablePath(test_name)
command,=,[gtest_prog_path,,"--gtest_output=xml:%s",%,self.output_dir_]
p,=,gtest_test_utils.Subprocess(command,
working_dir=gtest_test_utils.GetTempDir())
self.assert_(p.exited)
self.assertEquals(0,,p.exit_code)
#,TODO(wan@google.com):,libtool,causes,the,built,test,binary,to,be
#,,,named,lt-gtest_xml_outfiles_test_,instead,of
#,,,gtest_xml_outfiles_test_.,,To,account,for,this,possibillity,,we
#,,,allow,both,names,in,the,following,code.,,We,should,remove,this
#,,,hack,when,Chandler,Carruth's,libtool,replacement,tool,is,ready.
output_file_name1,=,test_name,+,".xml"
output_file1,=,os.path.join(self.output_dir_,,output_file_name1)
output_file_name2,=,'lt-',+,output_file_name1
output_file2,=,os.path.join(self.output_dir_,,output_file_name2)
self.assert_(os.path.isfile(output_file1),or,os.path.isfile(output_file2),
output_file1)
expected,=,minidom.parseString(expected_xml)
if,os.path.isfile(output_file1):
actual,=,minidom.parse(output_file1)
else:
actual,=,minidom.parse(output_file2)
self.NormalizeXml(actual.documentElement)
self.AssertEquivalentNodes(expected.documentElement,
actual.documentElement)
expected.unlink()
actual.unlink()
if,__name__,==,"__main__":
os.environ["GTEST_STACK_TRACE_DEPTH"],=,"0"
gtest_test_utils.Main()
#!/usr/bin/env,python
#
#,Copyright,2006,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
import,re
from,xml.dom,import,minidom,,Node
import,gtest_test_utils
GTEST_OUTPUT_FLAG,,,,,,,,,=,"--gtest_output"
GTEST_DEFAULT_OUTPUT_FILE,=,"test_detail.xml"
class,GTestXMLTestCase(gtest_test_utils.TestCase):
"""
Base,class,for,tests,of,Google,Test's,XML,output,functionality.
"""
def,AssertEquivalentNodes(self,,expected_node,,actual_node):
"""
Asserts,that,actual_node,(a,DOM,node,object),is,equivalent,to
expected_node,(another,DOM,node,object),,in,that,either,both,of
them,are,CDATA,nodes,and,have,the,same,value,,or,both,are,DOM
elements,and,actual_node,meets,all,of,the,following,conditions:
*,,It,has,the,same,tag,name,as,expected_node.
*,,It,has,the,same,set,of,attributes,as,expected_node,,each,with
the,same,value,as,the,corresponding,attribute,of,expected_node.
Exceptions,are,any,attribute,named,"time",,which,needs,only,be
convertible,to,a,floating-point,number,and,any,attribute,named
"type_param",which,only,has,to,be,non-empty.
*,,It,has,an,equivalent,set,of,child,nodes,(including,elements,and
CDATA,sections),as,expected_node.,,Note,that,we,ignore,the
order,of,the,children,as,they,are,not,guaranteed,to,be,in,any
particular,order.
"""
if,expected_node.nodeType,==,Node.CDATA_SECTION_NODE:
self.assertEquals(Node.CDATA_SECTION_NODE,,actual_node.nodeType)
self.assertEquals(expected_node.nodeValue,,actual_node.nodeValue)
return
self.assertEquals(Node.ELEMENT_NODE,,actual_node.nodeType)
self.assertEquals(Node.ELEMENT_NODE,,expected_node.nodeType)
self.assertEquals(expected_node.tagName,,actual_node.tagName)
expected_attributes,=,expected_node.attributes
actual_attributes,,,=,actual_node,,.attributes
self.assertEquals(
expected_attributes.length,,actual_attributes.length,
"attribute,numbers,differ,in,element,",+,actual_node.tagName)
for,i,in,range(expected_attributes.length):
expected_attr,=,expected_attributes.item(i)
actual_attr,,,=,actual_attributes.get(expected_attr.name)
self.assert_(
actual_attr,is,not,None,
"expected,attribute,%s,not,found,in,element,%s",%
(expected_attr.name,,actual_node.tagName))
self.assertEquals(expected_attr.value,,actual_attr.value,
",values,of,attribute,%s,in,element,%s,differ",%
(expected_attr.name,,actual_node.tagName))
expected_children,=,self._GetChildren(expected_node)
actual_children,=,self._GetChildren(actual_node)
self.assertEquals(
len(expected_children),,len(actual_children),
"number,of,child,elements,differ,in,element,",+,actual_node.tagName)
for,child_id,,child,in,expected_children.iteritems():
self.assert_(child_id,in,actual_children,
'<%s>,is,not,in,<%s>,(in,element,%s)',%
(child_id,,actual_children,,actual_node.tagName))
self.AssertEquivalentNodes(child,,actual_children[child_id])
identifying_attribute,=,{
"testsuites":,"name",
"testsuite":,"name",
"testcase":,,"name",
"failure":,,,"message",
}
def,_GetChildren(self,,element):
"""
Fetches,all,of,the,child,nodes,of,element,,a,DOM,Element,object.
Returns,them,as,the,values,of,a,dictionary,keyed,by,the,IDs,of,the
children.,,For,<testsuites>,,<testsuite>,and,<testcase>,elements,,the,ID
is,the,value,of,their,"name",attribute,;,for,<failure>,elements,,it,is
the,value,of,the,"message",attribute,;,CDATA,sections,and,non-whitespace
text,nodes,are,concatenated,into,a,single,CDATA,section,with,ID
"detail".,,An,exception,is,raised,if,any,element,other,than,the,above
four,is,encountered,,if,two,child,elements,with,the,same,identifying
attributes,are,encountered,,or,if,any,other,type,of,node,is,encountered.
"""
children,=,{}
for,child,in,element.childNodes:
if,child.nodeType,==,Node.ELEMENT_NODE:
self.assert_(child.tagName,in,self.identifying_attribute,
"Encountered,unknown,element,<%s>",%,child.tagName)
childID,=,child.getAttribute(self.identifying_attribute[child.tagName])
self.assert_(childID,not,in,children)
children[childID],=,child
elif,child.nodeType,in,[Node.TEXT_NODE,,Node.CDATA_SECTION_NODE]:
if,"detail",not,in,children:
if,(child.nodeType,==,Node.CDATA_SECTION_NODE,or
not,child.nodeValue.isspace()):
children["detail"],=,child.ownerDocument.createCDATASection(
child.nodeValue)
else:
children["detail"].nodeValue,+=,child.nodeValue
else:
self.fail("Encountered,unexpected,node,type,%d",%,child.nodeType)
return,children
def,NormalizeXml(self,,element):
"""
Normalizes,Google,Test's,XML,output,to,eliminate,references,to,transient
information,that,may,change,from,run,to,run.
*,,The,"time",attribute,of,<testsuites>,,<testsuite>,and,<testcase>
elements,is,replaced,with,a,single,asterisk,,if,it,contains
only,digit,characters.
*,,The,"type_param",attribute,of,<testcase>,elements,is,replaced,with,a
single,asterisk,(if,it,sn,non-empty),as,it,is,the,type,name,returned
by,the,compiler,and,is,platform,dependent.
*,,The,line,number,reported,in,the,first,line,of,the,"message"
attribute,of,<failure>,elements,is,replaced,with,a,single,asterisk.
*,,The,directory,names,in,file,paths,are,removed.
*,,The,stack,traces,are,removed.
"""
if,element.tagName,in,("testsuites",,"testsuite",,"testcase"):
time,=,element.getAttributeNode("time")
time.value,=,re.sub(r"^\d+(\.\d+)?$",,"*",,time.value)
type_param,=,element.getAttributeNode("type_param")
if,type_param,and,type_param.value:
type_param.value,=,"*"
elif,element.tagName,==,"failure":
for,child,in,element.childNodes:
if,child.nodeType,==,Node.CDATA_SECTION_NODE:
#,Removes,the,source,line,number.
cdata,=,re.sub(r"^.*[/\\](.*:)\d+\n",,"\\1*\n",,child.nodeValue)
#,Removes,the,actual,stack,trace.
child.nodeValue,=,re.sub(r"\nStack,trace:\n(.|\n)*",
"",,cdata)
for,child,in,element.childNodes:
if,child.nodeType,==,Node.ELEMENT_NODE:
self.NormalizeXml(child)
#!/usr/bin/env,python
#
#,Copyright,2008,,Google,Inc.
#,All,rights,reserved.
#
#,Redistribution,and,use,in,source,and,binary,forms,,with,or,without
#,modification,,are,permitted,provided,that,the,following,conditions,are
#,met:
#
#,,,,,*,Redistributions,of,source,code,must,retain,the,above,copyright
#,notice,,this,list,of,conditions,and,the,following,disclaimer.
#,,,,,*,Redistributions,in,binary,form,must,reproduce,the,above
#,copyright,notice,,this,list,of,conditions,and,the,following,disclaimer
#,in,the,documentation,and/or,other,materials,provided,with,the
#,distribution.
#,,,,,*,Neither,the,name,of,Google,Inc.,nor,the,names,of,its
#,contributors,may,be,used,to,endorse,or,promote,products,derived,from
#,this,software,without,specific,prior,written,permission.
#
#,THIS,SOFTWARE,IS,PROVIDED,BY,THE,COPYRIGHT,HOLDERS,AND,CONTRIBUTORS
#,"AS,IS",AND,ANY,EXPRESS,OR,IMPLIED,WARRANTIES,,INCLUDING,,BUT,NOT
#,LIMITED,TO,,THE,IMPLIED,WARRANTIES,OF,MERCHANTABILITY,AND,FITNESS,FOR
#,A,PARTICULAR,PURPOSE,ARE,DISCLAIMED.,IN,NO,EVENT,SHALL,THE,COPYRIGHT
#,OWNER,OR,CONTRIBUTORS,BE,LIABLE,FOR,ANY,DIRECT,,INDIRECT,,INCIDENTAL,
#,SPECIAL,,EXEMPLARY,,OR,CONSEQUENTIAL,DAMAGES,(INCLUDING,,BUT,NOT
#,LIMITED,TO,,PROCUREMENT,OF,SUBSTITUTE,GOODS,OR,SERVICES,;,LOSS,OF,USE,
#,DATA,,OR,PROFITS,;,OR,BUSINESS,INTERRUPTION),HOWEVER,CAUSED,AND,ON,ANY
#,THEORY,OF,LIABILITY,,WHETHER,IN,CONTRACT,,STRICT,LIABILITY,,OR,TORT
#,(INCLUDING,NEGLIGENCE,OR,OTHERWISE),ARISING,IN,ANY,WAY,OUT,OF,THE,USE
#,OF,THIS,SOFTWARE,,EVEN,IF,ADVISED,OF,THE,POSSIBILITY,OF,SUCH,DAMAGE.
"""A,script,to,prepare,version,informtion,for,use,the,gtest,Info.plist,file.
This,script,extracts,the,version,information,from,the,configure.ac,file,and
uses,it,to,generate,a,header,file,containing,the,same,information.,The
#defines,in,this,header,file,will,be,included,in,during,the,generation,of
the,Info.plist,of,the,framework,,giving,the,correct,value,to,the,version
shown,in,the,Finder.
This,script,makes,the,following,assumptions,(these,are,faults,of,the,script,
not,problems,with,the,Autoconf):
1.,The,AC_INIT,macro,will,be,contained,within,the,first,1024,characters
of,configure.ac
2.,The,version,string,will,be,3,integers,separated,by,periods,and,will,be
surrounded,by,squre,brackets,,"[",and,"]",(e.g.,[1.0.1]).,The,first
segment,represents,the,major,version,,the,second,represents,the,minor
version,and,the,third,represents,the,fix,version.
3.,No,")",character,exists,between,the,opening,"(",and,closing,")",of
AC_INIT,,including,in,comments,and,character,strings.
"""
import,sys
import,re
#,Read,the,command,line,argument,(the,output,directory,for,Version.h)
if,(len(sys.argv),<,3):
print,"Usage:,versiongenerate.py,input_dir,output_dir"
sys.exit(1)
else:
input_dir,=,sys.argv[1]
output_dir,=,sys.argv[2]
#,Read,the,first,1024,characters,of,the,configure.ac,file
config_file,=,open("%s/configure.ac",%,input_dir,,'r')
buffer_size,=,1024
opening_string,=,config_file.read(buffer_size)
config_file.close()
#,Extract,the,version,string,from,the,AC_INIT,macro
#,,,The,following,init_expression,means:
#,,,,,Extract,three,integers,separated,by,periods,and,surrounded,by,squre
#,,,,,brackets(e.g.,"[1.0.1]"),between,"AC_INIT(",and,")".,Do,not,be,greedy
#,,,,,(*?,is,the,non-greedy,flag),since,that,would,pull,in,everything,between
#,,,,,the,first,"(",and,the,last,")",in,the,file.
version_expression,=,re.compile(r"AC_INIT\(.*?\[(\d+)\.(\d+)\.(\d+)\].*?\)",
re.DOTALL)
version_values,=,version_expression.search(opening_string)
major_version,=,version_values.group(1)
minor_version,=,version_values.group(2)
fix_version,=,version_values.group(3)
#,Write,the,version,information,to,a,header,file,to,be,included,in,the
#,Info.plist,file.
file_data,=,"""//
//,DO,NOT,MODIFY,THIS,FILE,(but,you,can,delete,it)
//
//,This,file,is,autogenerated,by,the,versiongenerate.py,script.,This,script
//,is,executed,in,a,"Run,Script",build,phase,when,creating,gtest.framework.,This
//,header,file,is,not,used,during,compilation,of,C-source.,Rather,,it,simply
//,defines,some,version,strings,for,substitution,in,the,Info.plist.,Because,of
//,this,,we,are,not,not,restricted,to,C-syntax,nor,are,we,using,include,guards.
//
#define,GTEST_VERSIONINFO_SHORT,%s.%s
#define,GTEST_VERSIONINFO_LONG,%s.%s.%s
""",%,(major_version,,minor_version,,major_version,,minor_version,,fix_version)
version_file,=,open("%s/Version.h",%,output_dir,,'w')
version_file.write(file_data)
version_file.close()
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,vi:,set,ts=2,sw=2,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os
import,sys
#,helper,-,calculate,the,transitive,closure
#,of,a,dictionary,of,sets,-,in,the,result,
#,(y,in,d[x],and,z,in,d[y]),implies,z,in,d[x],
#,note:,we,allow,reflexivity,but,don't,ensure,it.
def,closure(d):
def,close(k):
vals,=,set(d[k],if,k,in,d.keys(),else,[])
for,v,in,vals.copy():
if,v,!=,k:
vals,|=,close(v)
return,vals
return,dict(zip(d.keys(),,[close(k),for,k,in,d.keys()]))
#,-----------------------------------------------------
#
#,Type
#,NOTE:,not,full-powered,,just,modeling,the,current,necessities.
#
#,nullability,enum
NULL_ALLOWED,=,0,,,,,,#,our,value,set,includes,null,,and,we,allow,it
NULL_PROHIBITED,=,1,,,#,our,value,set,includes,null,,but,we,prohibit,it
NULL_ABSENT,=,2,,,,,,,#,our,value,set,does,not,include,null,
#,enum,used,in,CG
nullable_names,=,[
"kTypeNullable",,"kTypeNotNull",,"ERROR"
]
class,Type:
def,__init__(self,,name,,valuetype,,
basename,=,None,,nullable,=,NULL_ALLOWED,,cgoverride,=,None):
self.name,=,name
self.valuetype,=,valuetype
self.basename,=,basename,if,basename,is,not,None,else,name
self.nullable,=,nullable
self.cgoverride,=,cgoverride
#,print,'name,=,%s,,basename,=,%s,,self.name,=,%s,,self.basename,=,%s',%,(name,,basename,,self.name,,self.basename)
def,hasNull(self):
return,self.nullable,==,NULL_ALLOWED
def,ensureNotNullable(self):
return,self,if,not(self.hasNull()),else,getType(self.name,+,'~')
def,isSubOf(self,,other):
#,?,is,a,sub,of,nothing,(really,,we,should,probably,throw)
if,self.basename,==,'?':,
return,False
#,T,is,a,subtype,of,Top
if,other.basename,==,'Top':
return,True
#,Bot,is,a,subtype,of,T
if,self.basename,==,'Bot':
return,True
#,T,is,a,subtype,of,itself,,if,we,(at,least),satisfy,other's,constraints.
if,self.basename,==,other.basename:
#,reality,check,-,nullability,modifiers,are,illegal,on,null-absent,types
if,(self.nullable,==,NULL_ABSENT,or,other.nullable,==,NULL_ABSENT),\
and,self.nullable,!=,other.nullable:
raise,ParseError(
"type,specification,error:,null-absent,mismatch,when,comparing,%s,and,%s",
%,(self.dump(),,other.dump()))
return,self.nullable,>=,other.nullable
#,T,is,a,subtype,of,S,if,T.basename,in,subtypes[S.basename],
#,if,we,(at,least),satisfy,S's,additional,constraints.
if,other.basename,in,subtypes,and,self.basename,in,subtypes[other.basename]:
return,self.nullable,>=,other.nullable
#,nope
return,False
#,are,we,the,effect,type?
def,isEffect(self):
return,self.basename,==,'Effect'
#,format,the,expression,used,to,denote,this,type,in,generated,code
def,cgType(self):
if,self.cgoverride,is,not,None:
return,self.cgoverride[self.nullable],if,type(self.cgoverride),==,dict,else,self.cgoverride
if,self.nullable,==,NULL_ABSENT:
return,'lattice_.%s_type',%,self.name.lower()
else:
return,'lattice_.%s_type[%s]',%,(self.basename.lower(),,nullable_names[self.nullable])
#,format,the,expression,denoting,the,lattice,traits,object,
#,for,our,type.,VERY,fragile,,should,be,moved,or,parameterized
def,cgTraits(self):
#,TODO,nullability
return,'tb.traitsConst(lattice_.%s_traits)',%,self.name.lower()
#,'lattice_.%s_traits',%,(self.name.lower(),,self.nullable.real))
def,dump(self):
return,self.name
#,(AS),value,types
#
array_type,=,,,,,,,,Type('Array',,True)
atom_type,=,,,,,,,,,Type('Atom',,True)
boolean_type,=,,,,,,Type('Boolean',,True,,nullable,=,NULL_ABSENT)
class_type,=,,,,,,,,Type('Class',,True)
function_type,=,,,,,Type('Function',,True)
int_type,=,,,,,,,,,,Type('Int',,True,,nullable,=,NULL_ABSENT)
number_type,=,,,,,,,Type('Number',,True,,nullable,=,NULL_ABSENT,,cgoverride,=,'lattice_.double_type')
object_type,=,,,,,,,Type('Object',,True)
scriptobject_type,=,Type('ScriptObject',,True)
string_type,=,,,,,,,Type('String',,True)
ns_type,=,,,,,,,,,,,Type('Namespace',,True)
uint_type,=,,,,,,,,,Type('Uint',,True,,nullable,=,NULL_ABSENT)
vectorint_type,=,,,,Type('VectorInt',,True)
vectoruint_type,=,,,Type('VectorUInt',,True)
vectordouble_type,=,Type('VectorDouble',,True)
#,value,type,subgroups,for,subtype,testing
data_types,=,[array_type,,atom_type,,boolean_type,,class_type,
function_type,,int_type,,number_type,,object_type,
scriptobject_type,,string_type,,ns_type,,uint_type,
vectorint_type,,vectoruint_type,,vectordouble_type]
#,VM,(value),types
#
effect_type,=,Type('Effect',,False,,cgoverride,=,'EFFECT')
method_type,=,Type('Method',,False,,cgoverride,=,'lattice_.method_type')
name_type,=,,,Type('Name',,False,,cgoverride,=,'NAME')
ord_type,=,,,,Type('Ord',,False,,cgoverride,=,'ORDINAL')
state_type,=,,Type('State',,False,,cgoverride,=,'STATE')
traits_type,=,Type('Traits',,False,,cgoverride,=,'TRAITS')
env_type,=,,,,Type('Env',,False,,cgoverride,=,'ENV')
vm_types,=,[effect_type,,method_type,,name_type,,
ord_type,,state_type,,traits_type,,env_type]
#,synthetic,types,,used,only,in,HM,compiler
#
top_type,=,Type('Top',,False,,cgoverride,=,'TOP')
bottom_type,=,,Type('Bot',,False,,cgoverride,=,'BOT')
topdata_type,=,Type('TopData',,False,,cgoverride,=,'TOPDATA')
synthetic_types,=,[top_type,,bottom_type,,topdata_type]
#,type,wildcard,,used,only,in,CG,for,inference
#
infer_type,=,Type('?',,False)
#,every,type,,excluding,type,variables,and,wildcards
all_types,=,data_types,+,vm_types,+,synthetic_types
#,nontrivial,part,of,the,subtype,relation,,used,by,Type.isSubOf().
#,omitted:,all,<,Top,,Bot,<,all,,T,<,T,,done,in,code.
#
#,note:,we,use,names,rather,than,type,objects,themselves,only
#,to,ease,the,logistics,of,comparing,types,modulo,qualifiers
#,like,nullability,-,each,type,object,has,a,basename,,its,name
#,stripped,of,qualifiers,,rather,than,a,reference,to,a,base,type
#,object.
#
#,TODO,explain,subtyping,to,Atom,(model,looseness)
#,in,detail,,once,refactoring,is,done
#
subtypes,=,closure({
'TopData':,[t.name,for,t,in,data_types],
'Atom':,[t.name,for,t,in,data_types],
'Number':,['Int',,'Uint'],
'ScriptObject':,['Array',,'Class',,'Function']
})
#,print,'HEY,subtypes,=,\n%s',%,'\n'.join(
#,,,["%s:,[%s]",%,(k,,','.join(v,for,v,in,subtypes[k])),for,k,in,subtypes.keys()])
#,name,->,type
types,=,dict([(t.name,,t),for,t,in,
data_types,+,vm_types,+,synthetic_types,+,[infer_type]])
#,gets,a,type,based,on,name,plus,suffixes:
#,-,name~,means,non-nullable,
#
def,getType(s):
if,s,in,types:
return,types[s]
#,not,found,,try,noticing,modifiers,-
#,if,built,successfully,,register,and,return
name,=,basename,=,s
nullable,=,True
#,TODO,other,suffixes,make,this,a,loop
if,s.endswith('~'):
basename,=,s[:len(s)-1]
nullable,=,NULL_PROHIBITED
#,if,base,type,is,known,,build/reg,derived,type
if,basename,in,types:
baset,=,types[basename]
t,=,types[s],=,Type(name,,baset.valuetype,,basename,,nullable,,baset.cgoverride)
return,t
#,fail
raise,ParseError("unknown,type,'%s'",%,s)
#,-----------------------------------------------------
#
#,Type,propagation
#,rather,than,modeling,full,dependent,types,,we,model
#,some,simple,implications,with,per-instruction,handlers.
#,These,are,called,from,Call.calcTypes().
#
#,coerce,uses,arg,1,(a,Traits),as,the,type,of,result,1
#,TODO,wrap,result,in,traits,type,,elim,valueAsType?
#
def,calctypes_propagate_fromtraits1(call):
instr,=,call.base
if,(len(call.args),<,2,or,call.args[1].type(),!=,traits_type,
or,len(instr.rettypes),<,2):
raise,ParseError("invalid,instruction,%s,passed,to,calctypes_propagate_fromtraits0",
	,,%,instr.name)
return,[instr.rettypes[0],,call.args[1]]
#,several,instructions,propagate,the,guarantee,of,non-
#,nullity,from,arg,0,to,result,0
#
def,calctypes_propagate_nonnull0(call):
instr,=,call.base
if,len(call.args),<,1,or,len(instr.rettypes),<,1:
raise,ParseError("invalid,instruction,%s,passed,to,calctypes_propagate_nonnull0",
	,,%,instr.name)
rettypes,=,instr.rettypes
if,not(call.args[0].type().hasNull()):
rettypes[0],=,rettypes[0].ensureNotNullable()
return,rettypes
#,propagate,argument,type,1,to,result,1,,but,with,
#,the,non-null,constraint,guaranteed.,
#,TODO:,this,is,basically,a,poor,man's,
#
#,,,,(...,T<:Bar,...,->,...,T~,...)
#
#,and,should,ultimately,be,replaced,by,it.
#
def,calctypes_propagate_argtype1(call):
instr,=,call.base
if,len(call.args),<,2,or,len(instr.rettypes),<,2:
raise,ParseError("invalid,instruction,%s,passed,to,calctypes_propagate_argtype1",
	,,%,instr.name)
rettypes,=,instr.rettypes
rettypes[1],=,call.args[1].type().ensureNotNullable()
return,rettypes
#,map,instrs,to,calctype,handlers
#
calctypes_handlers,=,{
"coerce":,calctypes_propagate_fromtraits1,
"string2atom":,calctypes_propagate_nonnull0,
"scriptobject2atom":,calctypes_propagate_nonnull0,
"ns2atom":,calctypes_propagate_nonnull0,
"cknullobject":,calctypes_propagate_argtype1
}
#,-----------------------------------------------------
#
#,Shape,,RepInfo
#
#,vararg,enum
#,these,do,double,duty,as,a),designators,of,variability,
#,b),positions,in,the,shape,tuple.
#
EFFECT_IN,=,0,,,#,number,of,effect,inputs
DATA_IN,=,1,,,,,#,number,of,data,inputs
EFFECT_OUT,=,2,,#,number,of,effect,outputs
DATA_OUT,=,3,,,,#,number,of,data,outputs
NONE,=,4,,,,,,,,#,all,inputs,and,outputs,fixed
VARKIND,=,4,,,,,#,shape[4],holds,varkind
#,note,that,effect-in,and,effect-out,args,cannot,be,variable.
#
vararg_names,=,[
"ERROR",,"kVarIn",,"ERROR",,"kVarOut",,"kVarNone"
]
#,bare,tuple,so,we,can,use,==
def,shape(neffectin,,ndatain,,neffectout,,ndataout,,varkind):
return,neffectin,,ndatain,,neffectout,,ndataout,,varkind
#,last,tuple,item,gives,Varargs,enum,value,,also,tuple,pos
def,varargs(shape):
return,shape[VARKIND]
class,RepInfo:
def,__init__(self,,name,,shape,,gen,=,False):
self.name,,self.shape,=,name,,shape
self.gen,=,gen,,#,if,true,we,gen,builder,,pred,(TODO,rep,class)
def,enum(self):
return,self.name.upper(),+,"_SHAPE"
def,isvar(self):
return,self.isvarin(),or,self.isvarout()
def,isvarin(self):
return,self.shape[VARKIND],==,EFFECT_IN,or,self.shape[VARKIND],==,DATA_IN
def,isvarout(self):
return,self.shape[VARKIND],==,EFFECT_OUT,or,self.shape[VARKIND],==,DATA_OUT
narystmt0,=,RepInfo("NaryStmt0",,shape(1,,0,,1,,1,,DATA_IN))
narystmt1,=,RepInfo("NaryStmt1",,shape(1,,1,,1,,1,,DATA_IN))
narystmt2,=,RepInfo("NaryStmt2",,shape(1,,2,,1,,1,,DATA_IN))
narystmt3,=,RepInfo("NaryStmt3",,shape(1,,3,,1,,1,,DATA_IN))
narystmt4,=,RepInfo("NaryStmt4",,shape(1,,4,,1,,1,,DATA_IN))
callstmt2,=,RepInfo("CallStmt2",,shape(1,,2,,1,,1,,DATA_IN))
callstmt3,=,RepInfo("CallStmt3",,shape(1,,3,,1,,1,,DATA_IN))
callstmt4,=,RepInfo("CallStmt4",,shape(1,,4,,1,,1,,DATA_IN))
unaryexpr,=,RepInfo("UnaryExpr",,shape(0,,1,,0,,1,,NONE),,gen,=,True)
unarystmt,=,RepInfo("UnaryStmt",,shape(1,,1,,1,,1,,NONE),,gen,=,True)
binaryexpr,=,RepInfo("BinaryExpr",,shape(0,,2,,0,,1,,NONE),,gen,=,True)
binarystmt,=,RepInfo("BinaryStmt",,shape(1,,2,,1,,1,,NONE),,gen,=,True)
hasnext2stmt,=,RepInfo("Hasnext2Stmt",,shape(1,,2,,1,,3,,NONE))
voidstmt,=,RepInfo("VoidStmt",,shape(1,,0,,1,,0,,NONE))
constantexpr,=,RepInfo("ConstantExpr",,shape(0,,0,,0,,1,,NONE))
debuginstr,=,RepInfo("DebugInstr",,shape(1,,1,,1,,0,,NONE))
#,this,list,is,used,to,populate,reps,,a,map,of,shapes,to,reps
#,used,to,choose,representations,for,instrs.,Not,all,shapes
#,defined,above,are,on,this,list,,because,some,are,used,on
#,an,override,basis,only,,as,specified,in,instr_rep_overrides
#,and,shape_rep_overrides,,below.
#
replist,=,[
narystmt0,
narystmt1,
callstmt2,
callstmt3,
callstmt4,
unaryexpr,
unarystmt,
binaryexpr,
binarystmt,
hasnext2stmt,
voidstmt,
constantexpr,
debuginstr
]
#,shape,->,rep,,used,to,pick,reps,for,instrs
#,based,on,instr,shape,(subject,to,overrides,
#,see,below)
#
reps,=,dict([(rep.shape,,rep),for,rep,in,replist])
#,NOTE:,these,reps,are,only,used,in,IR5,shape,overrides
#,(see,instr_rep_overrides).,They,are,*not*,selectable
#,via,reps(),by,ordinary,instructions.
#
startinstr,=,RepInfo("StartInstr",,shape(0,,0,,1,,0,,DATA_OUT))
catchblockinstr,=,RepInfo("CatchBlockInstr",,shape(0,,0,,1,,0,,DATA_OUT))
stopinstr,=,RepInfo("StopInstr",,shape(1,,0,,0,,0,,DATA_IN))
#,some,instrs,are,made,to,use,a,non-default,rep,
#,irrespective,of,the,instr,shape.
#,if,an,instr,name,is,a,key,in,this,map,,CG,will,
#,use,the,specified,rep,,rather,than,trying,to
#,find,a,match,for,the,instr's,shape,in,reps
#
instr_rep_overrides,=,{
#,these,overrides,allow,a,custom,C++,class,to,
#,store,extra,information.
#
"safepoint":,RepInfo("SafepointInstr",,shape(1,,0,,2,,0,,DATA_IN)),
"setlocal":,RepInfo("SetlocalInstr",,shape(0,,2,,0,,1,,NONE)),
#,DEOPT:,I,think,I,need,this,because,deopt_safepoint,has
#,extra,fields,for,vpc,,scopep,,sp,,etc.
"deopt_safepoint":,RepInfo("DeoptSafepointInstr",,shape(1,,0,,1,,0,,DATA_IN)),
"deopt_finish":,RepInfo("DeoptFinishInstr",,shape(1,,0,,1,,0,,NONE)),
"deopt_finishcall":,RepInfo("DeoptFinishCallInstr",,shape(1,,1,,1,,0,,NONE)),
"debugline":,debuginstr,
"debugfile":,debuginstr,
#,we,select,IR5,(block,delimiter),reps,exclusively,by
#,override.,this,lets,us,keep,the,IR5,reps,out,of,the
#,standard,reps,dictionary,,which,ensures,that,ordinary,
#,instructions,with,compatible,shapes,never,inadvertently,
#,select,IR5,reps,,which,have,special,semantics.
#,
"goto":,RepInfo("GotoInstr",,shape(0,,0,,0,,0,,DATA_IN)),
"label":,RepInfo("LabelInstr",,shape(0,,0,,0,,0,,DATA_OUT)),
"if":,RepInfo("IfInstr",,shape(0,,1,,0,,0,,DATA_IN)),
"switch":,RepInfo("SwitchInstr",,shape(0,,1,,0,,0,,DATA_IN)),
"arm":,RepInfo("ArmInstr",,shape(0,,0,,0,,0,,DATA_OUT)),
"return":,stopinstr,
"throw":,stopinstr,
"start":,startinstr,
"template":,startinstr,
"catchblock":,RepInfo("CatchBlockInstr",,shape(0,,0,,0,,0,,DATA_OUT)),
#
#,fixed-arg,instructions,for,which,we,want,to,use,a
#,specific,vararg,rep,that,provides,VM,call,semantics.
#
"newfunction":,narystmt1,
"newclass":,narystmt2,
"abc_findproperty":,narystmt3,
"abc_findpropertyx":,narystmt4,
"abc_findpropertyns":,narystmt4,
"abc_findpropertynsx":,narystmt4,
"abc_findpropstrict":,narystmt3,
"abc_findpropstrictx":,narystmt4,
"abc_findpropstrictns":,narystmt4,
"abc_findpropstrictnsx":,narystmt4,
"findprop2getouter":,narystmt1,
"findprop2finddef":,narystmt1,
"abc_getsuper":,callstmt2,
"abc_getsuperx":,callstmt3,
"abc_getsuperns":,callstmt3,
"abc_getsupernsx":,callstmt4,
"abc_getdescendants":,callstmt2,
"abc_getdescendantsx":,callstmt3,
"abc_getdescendantsns":,callstmt3,
"abc_getdescendantsnsx":,callstmt4,
"abc_getprop":,callstmt2,
"abc_getprop_slot":,callstmt2,
"abc_getpropx":,callstmt3,
"getpropx_u":,callstmt3,
"getpropx_i":,callstmt3,
"getpropx_d":,callstmt3,
"getpropx_au":,callstmt3,
"getpropx_ai":,callstmt3,
"getpropx_ad":,callstmt3,
"getpropx_viu":,callstmt3,
"getpropx_vii":,callstmt3,
"getpropx_vid":,callstmt3,
"getpropx_vuu":,callstmt3,
"getpropx_vui":,callstmt3,
"getpropx_vud":,callstmt3,
"getpropx_vdu":,callstmt3,
"getpropx_vdi":,callstmt3,
"getpropx_vdd":,callstmt3,
"abc_getpropns":,callstmt3,
"abc_getpropnsx":,callstmt4,
"abc_getslot":,callstmt2,
"getslot":,callstmt2,
"abc_deleteprop":,callstmt2,
"abc_deletepropx":,callstmt3,
"abc_deletepropns":,callstmt3,
"abc_deletepropnsx":,callstmt4,
}
#,to,keep,things,simple,,the,shape-to-rep,logic,
#,does,*not*,attempt,to,match,fixed-arg,shapes,
#,with,compatible,vararg,reps,,if,no,matching,
#,fixed-arg,rep,is,found,in,reps.,instead,,we,
#,just,give,those,mappings,here,,explicitly.
#,
shape_rep_overrides,=,{
#,route,get/set,ternaries,and,above,to,callstmts
shape(1,,3,,1,,1,,NONE):,callstmt2,
shape(1,,4,,1,,1,,NONE):,callstmt3,
shape(1,,5,,1,,1,,NONE):,callstmt4
}
#,look,through,shape,table,and,overrides,to,get,the,rep,for,a,given,def
#,if,add,flag,is,true,,new,shapes,are,added,to,the,global,replist,table.
#,codegen,treats,the,replist,as,canon,,so,we,don't,add,the,shapes,of
#,subtemplates,(like,internal,if,arms,and,label,defs),that,don't,require
#,explicit,factory,etc.,support.
#,
def,getRep(d,,add,=,False):
if,d.name,in,instr_rep_overrides:
return,instr_rep_overrides[d.name]
elif,d.shape,in,shape_rep_overrides:
return,shape_rep_overrides[d.shape]
else:
#,NOTE:,make,it,if,it's,not,there,,if,add,flag,is,set
if,not(d.shape,in,reps.keys()):
shapeinfo,=,RepInfo("Shape_%s",%,'_'.join(map(str,,d.shape)),,d.shape)
if,add:
replist.append(shapeinfo)
reps[d.shape],=,shapeinfo
return,reps[d.shape]
#,-----------------------------------------------------
#
#,ParseError
#
#,global,current,item,for,error,reporting
curitem,=,None
def,setCurItem(item):
global,curitem
prev,=,curitem
curitem,=,item
return,prev
def,getCurItem():
return,curitem
def,dumpItem(item):
return,item.dump(),if,hasattr(item,,'dump'),else,str(item)
#,ParseError,uses,curitem,in,message
class,ParseError(Exception):
def,__init__(self,,errmsg):
self.errmsg,=,errmsg
self.item,=,getCurItem()
def,message(self):
return,'%s\n,,in,%s',%,(self.errmsg,,dumpItem(self.item))
#,recognize,real,sexprs,among,comments,,etc.
def,isValid(sexpr):
return,type(sexpr),==,list,and,len(sexpr),>,0,and,type(sexpr[0]),==,str
#,-----------------------------------------------------
#,
#,Prototype,and,Template
#
#,split,(partypes,->,rettypes),sig,into,pair
def,splitSig(sig):
insig,,outsig,=,[],,[]
arrow,=,False
for,s,in,sig:
if,s,==,'->':
if,arrow:
raise,ParseError("arrow,appears,more,than,once,in,sig")
arrow,=,True
elif,arrow:
outsig.append(s)
else:
insig.append(s)
#if,len(outsig),==,0:
#raise,ParseError("signature,missing,return,type(s)")
return,insig,,outsig
#,indexes,where,list,items,pass,pred
def,where(pred,,li):
return,filter(pred,,range(0,,len(li)))
#,return,sublist,built,from,elements,at,given,indexes
def,sublist(li,,ixs):
res,=,[]
for,i,in,range(0,,len(ixs)):
res.append(li[ixs[i]])
return,res
#,number,of,list,items,that,pass,pred
def,count(pred,,li):
return,len(filter(pred,,li))
#,occurences,of,effect_type,in,type,list
def,effectCount(types):
return,types.count(effect_type)
#,occurences,of,data,(non-effect),types,in,type,list
def,dataCount(types):
return,len(types),-,effectCount(types)
#,position,of,nth,data,type,in,type,list
def,nthData(types,,n):
data,=,where(lambda,i:,not(types[i].isEffect()),,types)
return,data[n],if,n,<,len(data),else,-1
#,return,(resolved,type,list,,is-variadic)
def,parseSig(sig):
varin,=,False
types,=,[]
for,s,in,sig:
if,varin:
raise,ParseError("signature,%s,is,variadic,before,final,entry",%,sig)
if,s.startswith('['),and,s.endswith(']'):
varin,=,True
s,=,s[1:len(s),-,1]
types.append(getType(s))
return,types,,varin
#,InstrDef,>,Prototype,>,Template
#
class,InstrDef:
def,__init__(self,,name):
self.name,=,name
def,hrname(self):
return,"HR_%s",%,self.name
#
#,Prototype,has,signatures,but,no,body.
#
class,Prototype(InstrDef):
#,ctor,parses,and,optionally,checks,sigs.
#,protos,check,immediately,,tems,check,post-inference
def,__init__(self,,name,,argsig,,retsig,,check,=,True):
InstrDef.__init__(self,,name)
(self.partypes,,self.isvarin),=,parseSig(argsig)
(self.rettypes,,self.isvarout),=,parseSig(retsig)
if,check:
self.checkSigs()
#,overridden,to,return,true,in,Template
def,isTemplate(self):,
return,False
#,number,of,params
def,numParams(self):
return,len(self.partypes)
#,number,of,results
def,numResults(self):
return,len(self.rettypes)
#,check,signature,constraints,,set,shape
def,checkSigs(self):
#,variadic,param,xor,result
if,self.isvarin,and,self.isvarout:
raise,ParseError("args,and,results,cannot,both,be,variadic")
#,?,types,only,in,templates,,,,,,
if,not,self.isTemplate,and,(
self.rettypes.count(infer_type),>,0,or,
self.partypes.count(infer_type),>,0):
raise,ParseError("prototype,signatures,cannot,be,inferred")
#,set,shape
if,self.isvarin:
last,=,self.partypes[len(self.partypes),-,1]
self.varargs,=,EFFECT_IN,if,last.isEffect(),else,DATA_IN
elif,self.isvarout:
last,=,self.rettypes[len(self.rettypes),-,1]
self.varargs,=,EFFECT_OUT,if,last.isEffect(),else,DATA_OUT
else:
self.varargs,=,NONE
shapeinfo,=,[
effectCount(self.partypes),,dataCount(self.partypes),
effectCount(self.rettypes),,dataCount(self.rettypes)]
if,self.varargs,!=,NONE:
shapeinfo[self.varargs],-=,1
self.shape,=,shape(shapeinfo[EFFECT_IN],,shapeinfo[DATA_IN],
shapeinfo[EFFECT_OUT],,shapeinfo[DATA_OUT],
self.varargs)
#,self.rep,=,getRep(self,,self.numParents(),==,0)
#,linear,instructions,can,be,used,as,subexpressions.,linear,is:
#,-,at,most,one,effect,in,,
#,-,same,number,of,effect,in,and,out,,
#,-,exactly,one,data,out.
def,isLinear(self):
fixedeffectin,=,not(self.isvarin,and,self.partypes[len(self.partypes),-,1].isEffect())
neffectin,=,effectCount(self.partypes)
fixedout,=,not,self.isvarout
neffectout,=,effectCount(self.rettypes)
ndataout,=,dataCount(self.rettypes)
return,(fixedeffectin,and,fixedout,and
neffectin,<=,1,and,neffectout,==,neffectin,and,
ndataout,==,1)
#,pure,instructions,do,not,interact,with,effects
def,isPure(self):
return,effectCount(self.partypes),+,effectCount(self.rettypes),==,0
#,return,our,nesting,level
def,numParents(self):
return,0
def,dump(self):
argsig,=,',,'.join([t.dump(),for,t,in,self.partypes])
if,self.numParams(),!=,1:,argsig,=,'(',+,argsig,+,')'
retsig,=,',,'.join([t.dump(),for,t,in,self.rettypes])
if,self.numResults(),!=,1:,retsig,=,'(',+,retsig,+,')'
return,'%s:,%s,->,%s',%,(self.name,,argsig,,retsig)
def,dumpSig(self):
return,self.dump()
#
#,Template,adds,body,(list,of,statements),and,state,mgmt,
#
class,Template(Prototype):
#,ctor,sets,initial,sig,(to-infer,types,for,explicit,params,
#,plus,new,effect,input),,and,sets,up,state.
def,__init__(self,,name,,parnames,,body,,parent,=,None):
Prototype.__init__(self,,name,,['Effect'],+,(['?'],*,len(parnames)),,[],,False)
self.effectid,,self.dataid,,self.instrid,=,-1,,-1,,-1
self.parent,=,parent
self.ambeffects,=,[]
self.defAmbientEffect(self.genLocalName(effect_type))
self.parnames,=,[self.ambeffects[0]],+,parnames
self.locals,=,{}
self.body,=,body
self.labels,=,{}
self.done,=,False
def,isTemplate(self):
return,True
#,called,when,an,instr,produces,ambient,effect,(as,unbound,result)
def,defAmbientEffect(self,,varname):
self.ambeffects.append(varname)
return,varname
#,called,when,an,instr,consumes,ambient,effect,(as,implicit,arg)
def,useAmbientEffect(self):
if,not(self.hasAmbientEffect()):
raise,ParseError("no,ambient,effect,var,available")
return,self.ambeffects.pop()
#,True,if,ambient,effect,is,currently,available
def,hasAmbientEffect(self):
return,len(self.ambeffects),>,0
#,check,name,for,collisions,with,local,bindings.
#,as,with,generated,names,,we,insist,on,template-wide
#,uniqueness.
#
def,checkLocalName(self,,name):
if,self.parent,is,not,None:
self.parent.checkLocalName(name)
if,name,in,self.parnames:
raise,ParseError("local,name,%s,clashes,with,param,name",%,name)
if,name,in,self.locals:
raise,ParseError("local,%s,already,defined")
#,generate,new,local,variable,name,,based,on,a,key.
#,key,can,a,Type,,an,AST,node,representing,a,dependent-type-carrying
#,value,,or,a,string.
#
#,TODO:,if,we,refactor,type-carrying,values,so,that,they're,types,
#,this,code,will,get,cleaner.
#
#,note:,we,use,the,top-level,template's,suffix,generator,,so,that
#,all,variable,names,are,unique,template-wide.,this,may,not,always
#,be,necessary,for,CG,,but,collisions,in,certain,situations,are
#,hard,to,avoid,,even,with,block,scoping,in,generated,code.
#
def,genLocalName(self,,key):
if,self.parent,is,not,None:
return,self.parent.genLocalName(key)
#,at,top,level,,generate,unique,ids
if,type(key),==,str:
#,for,string,keys,,use,instrid
self.instrid,+=,1
return,'%s%i',%,(key,,self.instrid)
else:
#,may,be,Type,or,AST,node
if,key.isEffect():
self.effectid,+=,1
return,'effect%i',%,self.effectid
else:
self.dataid,+=,1
return,'data%i',%,self.dataid
#,given,a,local,or,param,name,,build,a,reference,node,or,throw
#,note,qualified,lookup:,incoming,name,is,unqualified,,but,may
#,refer,to,a,local,def,in,a,nested,template.
def,makeRef(self,,name):
if,name,in,self.parnames:
return,ParamRef(name,,self)
elif,name,in,self.locals:
return,LocalRef(name,,self)
elif,self.parent,is,not,None:
return,self.parent.makeRef(name)
else:
raise,ParseError("no,binding,for,name,'%s'",%,name)
#,add,an,effect,pass-through,to,a,pure,template
def,addEffect(self):
if,not(self.isPure()):
raise,ParseError("addEffect(),on,impure,template,'%s'",%,self.name)
effparam,=,self.genLocalName(effect_type)
self.parnames.insert(0,,effparam)
self.partypes.insert(0,,effect_type)
self.rettypes.insert(0,,effect_type)
retstmt,=,self.body[len(self.body),-,1]
if,(retstmt.kind,!=,'LocalDefs',or,
retstmt.expr.kind,!=,'Call',or
retstmt.expr.base.name,!=,'return'):
raise,ParseError("internal,error:,missing,return,stmt,in,pure,template,'%s'",%,self.name)
retstmt.expr.args.insert(0,,self.makeRef(effparam))
#,helper,-,dump,signature,items
def,dumpSigItems(self):
argsig,=,'(',+,',,'.join([n,+,':',+,t.dump(),for,n,t,in,zip(self.parnames,,self.partypes)]),+,')'
retsig,=,',,'.join([t.dump(),for,t,in,self.rettypes])
if,self.numResults(),!=,1:,retsig,=,'(',+,retsig,+,')'
return,argsig,,retsig
#,return,our,nesting,level
def,numParents(self):
return,0,if,self.parent,is,None,else,1,+,self.parent.numParents()
def,hasGoto(self):
return,any([stmt.hasGoto(),for,stmt,in,self.body])
#,true,if,all,paths,out,of,the,template,are,gotos,to,labels
#,defined,in,parent,templates
def,allPathsEscape(self):
return,all([e.isEscapingGoto(self),for,e,in,self.finalExprs()])
#,return,the,set,of,final,statements,in,this,template.
#,these,are,the,last,executable,statements,(i.e.,,prior
#,to,return),on,every,path,out,of,the,template.
def,finalExprs(self):
last,=,self.body[len(self.body),-,2]
expr,=,last.expr
if,expr.base.name,==,'if':
return,expr.iftrue.finalExprs(),+,expr.iffalse.finalExprs()
else:
return,[expr]
def,dump(self):
indent,=,2,*,self.numParents()
argsig,,retsig,=,self.dumpSigItems()
spaces,=,',',*,indent
labeldumps,=,''.join(['\n,,',+,spaces,+,label.dump()
for,label,in,self.labels.values()])
bodydump,=,'\n,,'.join([spaces,+,dumpItem(instr),for,instr,in,self.body])
return,'%s:,%s,->,%s\n,,%s%s',%,(self.name,,argsig,,retsig,,bodydump,,labeldumps)
def,dumpSig(self):
return,'%s:,%s,->,%s',%,((self.name,),+,self.dumpSigItems())
#,create,a,Template,or,Prototype,from,an,sexpr
def,toDef(sexpr):
setCurItem(sexpr)
if,len(sexpr),==,2:
argsig,,retsig,=,splitSig(sexpr[1])
return,Prototype(sexpr[0],,argsig,,retsig)
else:
return,Template(sexpr[0],,sexpr[1],,sexpr[2:])
#,helper,-,dump,a,list
def,dumpList(li):
if,len(li),==,1:,
return,''.join([e.dump(),for,e,in,li])
return,'(%s)',%,',,'.join([e.dump(),for,e,in,li])
#,-----------------------------------------------------
#
#,AST,nodes
#
#,Call,describes,an,instr,invocation.,Calls,always,deliver,
#,a,composite,result,,and,only,appear,on,RHS,of,binding,
#,statements,(LocalDefs),,not,as,subexpressions.
#,
class,Call:
kind,=,'Call'
def,__init__(self,,base,,args):
self.base,,self.args,=,base,,args
self.types_,=,self.calcTypes()
#,list,of,result,types,,,,
def,types(self):
return,self.types_
#,calculate,result,types,for,this,call,site.
#,base,case,simply,copies,the,result,types,of,the,
#,called,instr,(self.base),,but,if,there,is,a,registered
#,type,propagation,function,,we,call,that,instead
#
def,calcTypes(self):
if,self.base.name,in,calctypes_handlers.keys():
return,calctypes_handlers[self.base.name](self)
else:
return,self.base.rettypes
	,,
#,true,if,we,pass,through,at,most,one,effect,value,
#,and,generate,exactly,one,data,value
def,isLinear(self):
return,self.base.isLinear()
def,hasGoto(self):
return,False
#,true,if,this
def,isEscapingGoto(self,,tem):
return,False
#,helper,-,dump,list,of,types,to,list,of,strings
def,dumpTypes(self):
return,dumpList(self.types())
def,dump(self):
return,'%s(%s)',%,(self.base.name,,',,'.join([a.dump(),for,a,in,self.args]))
#,Goto,is,syntactically,almost,identical,to,a,Call,
#,but,semantics,are,fairly,different
#
class,Goto(Call):
def,__init__(self,,base,,args):
Call.__init__(self,,base,,args)
def,target(self):
return,self.base
def,hasGoto(self):
return,True
#,true,if,this,goto,jumps,to,a,label,outside,the,given,template
def,isEscapingGoto(self,,tem):
return,self.base.parent,!=,tem
def,dump(self):
return,'goto,%s(%s)',%,(self.base.name,,',,'.join([a.dump(),for,a,in,self.args]))
#,IfCall(condexpr,,iftrue,,iffalse)
#
class,IfCall:
kind,=,'Call'
def,__init__(self,,ifbase,,condexpr,,iftrue,,iffalse):
self.condexpr,=,condexpr
self.base,,self.args,=,ifbase,,[]
self.iftrue,,self.iffalse,=,iftrue,,iffalse
self.types_,=,self.calcTypes()
self.pure,=,not(self.types()[0].isEffect())
#,list,of,result,types
def,types(self):
return,self.types_
#,calculate,result,types,for,this,if.,
#
def,calcTypes(self):
truetypes,=,self.iftrue.rettypes
falsetypes,=,self.iffalse.rettypes
if,len(truetypes),!=,len(falsetypes):
#,no,obvious,better,place,to,do,this:,check,if,the,mismatch
#,is,due,to,purity,on,one,side,but,not,the,other,,and,fix,up
nt,,nf,=,len(truetypes),,len(falsetypes)
if,nt,==,nf,-,1,and,self.iftrue.isPure(),and,not(self.iffalse.isPure()):
self.iftrue.addEffect()
elif,nf,==,nt,-,1,and,self.iffalse.isPure(),and,not(self.iftrue.isPure()):
self.iffalse.addEffect()
else:
raise,ParseError("true,and,false,arms,return,different,shapes:,%s,,%s",%
(dumpList(truetypes),,dumpList(falsetypes)))
rettypes,=,[]
pos,=,0
