import,Leap,,sys,,math,,,,,,,,,,,,,,
import,socket
import,time
from,thread,import,*
class,bcolors:
	STRANGE,=,'\033[90m'
	HEADER,=,'\033[95m'
	OKBLUE,=,'\033[94m'
	OKGREEN,=,'\033[92m'
	WARNING,=,'\033[93m'
	FAIL,=,'\033[91m'
	ENDC,=,'\033[0m'
	def,disable(self):
		self.STRANGE,=,''
		self.HEADER,=,''
		self.OKBLUE,=,''
		self.OKGREEN,=,''
		self.WARNING,=,''
		self.FAIL,=,''
		self.ENDC,=,''
def,setUpSocketServer():
	#,Create,a,Leap,listener,and,assign,it,to,a,controller,to,receive,events
	listener,=,LeapListener()
	controller,=,Leap.Controller(listener)
	lastInfo,=,''
	lastFrameID,=,''
	global,frameID
	global,jsonStore
	global,flashSocketState
	flashSocketState,=,False
	
	HOST,=,''
	PORT,=,8888
	
	s=socket.socket(socket.AF_INET,,socket.SOCK_STREAM)
	s.setsockopt(socket.SOL_SOCKET,,socket.SO_REUSEADDR,,1)
	
	print,bcolors.OKBLUE,+,'Socket,Created...'+,bcolors.ENDC
	
	try:
		s.bind((HOST,,PORT))
	except,socket.error,,,msg:
		print,'Bind,Failed.,Error,Code,:,',+,str(msg[0]),+,',Message,',+,msg[1]
		sys.exit()
	
	print,bcolors.OKBLUE,+,'Socket,BIND,Complete...'+,bcolors.ENDC
	
	s.listen(10)
	print,bcolors.OKBLUE,+,'Socket,Now,Listening...'+,bcolors.ENDC
		
		#now,keep,talking,with,the,client
	while,1:
		#wait,to,accept,a,connection,-,blocking,call
		conn,,addr,=,s.accept()
				
		print,'Connected,with,client,at:,',+,addr[0],+,':',+,str(addr[1])
		
		telemetryInfo,=,''
		frameID,=,''
		lastFrameID,=,''
		jsonStore,=,''
		
		print,'Beginning,broadcast...'
		
		start_new_thread(clientThread,,(conn,))
		#Before,we,start,pushing,out,info,wait,a,bit,to,avoid,any,potential,issues
		time.sleep(1),;
		
		
		while,1:
				
				telemetryInfo=''
				if,(frameID,!=,lastFrameID,and,lastInfo,!=,jsonStore,and,flashSocketState,==,True):
					telemetryInfo,=,jsonStore
				
					if(telemetryInfo,!=,"",and,telemetryInfo,is,not,None):
						try:
							conn.sendall(telemetryInfo+"\n")
						except,socket.error,,,msg:
							print,,bcolors.FAIL,+,'Socket,Error,-,Code:,',+,str(msg[0]),+,',Message,',+,msg[1]+,bcolors.ENDC
							conn,,addr,=,s.accept()
							print,'Connected,with,client,at:,',+,addr[0],+,':',+,str(addr[1])
							print,'Restarting,broadcast...'
							start_new_thread(clientThread,,(conn,))
						
				lastInfo,=,telemetryInfo
				lastFrameID,=,frameID
				#This,sleep,can,be,adjusted,up,or,down-,future,iterations,of,the,Leap,SDK
				#Have,indicated,more,control,over,Frame,update,rate,,etc.
				time.sleep(0.02)
	s.close()
	
#Handle,incoming,connection,data,on,a,thread,for,control,commands,since,we,primarily,are,pushing,out,data
def,clientThread(conn):
global,flashSocketState
#Sending,message,to,connected,client
print,'Connected!'
conn.send('CONNECTED')
flashSocketState,=,True
#Infinite,loop,so,that,function,does,not,terminate,and,thread,does,not,end.
#Not,totally,neccessary,,but,may,add,some,control,functions,in,here,from,client
while,True:
time.sleep(0.1)
#Receiving,from,client
data,=,conn.recv(1024)
reply,=,data,;
print,'RECEIVED,COMMAND:,'+reply
if,not,data:
break
if,(reply=="ACTIVATING",or,reply=="DEACTIVATING"):
			reply,=,'OK'
			conn.sendall(reply)	
			if(reply=="ACTIVATING"):
				flashSocketState=True
			if(reply=="DEACTIVATING"):
				flashSocketState=False	
				
#came,out,of,loop
conn.close()
class,LeapListener(Leap.Listener):
	def,onInit(self,,controller):
		print,bcolors.STRANGE,+,"LEAP,Initialized"+,bcolors.ENDC
	def,onConnect(self,,controller):
		print,bcolors.OKGREEN,+,"LEAP,Connected"+,bcolors.ENDC
		print,bcolors.WARNING,+,'CTRL-C,TO,STOP'+,bcolors.ENDC
	def,onDisconnect(self,,controller):
		print,bcolors.FAIL,+,"LEAP,Disconnected"+,bcolors.ENDC
	def,onFrame(self,,controller):
		global,frameID
		global,jsonStore
		jsonStore,=,''	
		frame,=,controller.frame()
		hands,=,frame.hands()
		numHands,=,len(hands)
		handCnt,=,0
		frameID,=,frame.id()
		
		#BEGIN,jsonData
		jsonData,=,''
		jsonData,=,,'{,"frame":{,'
		jsonData,+=,'"id":'+str(frame.id())+','
		jsonData,+=,'"timestamp":'+str(frame.timestamp())+','
		
		#BEGIN,HANDS
		if,numHands,>=,1:
		,
			jsonData,+=,'"hands":,'
			#,Get,the,hands,-,need,to,loop,over,all,hands,
			#,Currently,just,the,1st,hand,-,REVISIT!
			#for,hand,in,hands:
			handCnt+=1
			hand,=,hands[0]
			normal,=,hand.normal()		,,
	,,
			jsonData,+=,'{"id":'+str(hand.id())+','
			jsonData,+=,'"normal":{'
			if,normal,is,not,None:
				jsonData,+=,'"x":'+str(normal.x)+','
				jsonData,+=,'"y":'+str(normal.y)+','
				jsonData,+=,'"z":'+str(normal.z)
			jsonData,+=,'},'
	,,
			#BEGIN,FINGERS
			jsonData,+=,generateFingerData(hand,,handCnt,,numHands)
			#END,FINGERS
			
			#BEGIN,PALM
			jsonData,+=,generatePalmData(hand,,handCnt,,numHands)
			#END,PALM	
		,
			jsonData,+=,'}},,"state":"frame",}'
		,,,
			jsonStore,=,jsonData
		
		else:
			jsonData,+=,'"hands":,null,},,"state":"frame",}'
			jsonStore,=,jsonData
	
def,generateFingerData(hand,,handCnt,,numHands):
	
	fingers,=,hand.fingers()
	numFingers,=,len(fingers)
	fingerCnt,=,0
	if,numFingers,>=,1:
		fingerData,=,'"fingers":[,'
		pos,=,Leap.Vector(0,,0,,0)
		dir,=,Leap.Vector(0,,0,,0)
		
		for,finger,in,fingers:
			tip,=,finger.tip()
			id,=,finger.id()
			width,=,finger.width()
			pos.x,=,tip.position.x
			pos.y,=,tip.position.y
			pos.z,=,tip.position.z
			velocity,=,finger.velocity()
	,,
			fingerData,+=,'{,"id":'+str(id)+','
			fingerData,+=,'"isTool":,"'+str(finger.isTool())+'",'
			fingerData,+=,'"length":'+str(finger.length())+','
			fingerData,+=,'"tip":,{'
			fingerData,+=,'"direction":{'
			fingerData,+=,'"x":'+str(tip.direction.x)+','
			fingerData,+=,'"y":'+str(tip.direction.y)+','
			fingerData,+=,'"z":'+str(tip.direction.z)
			fingerData,+=,'},,"position":{'
			fingerData,+=,'"x":'+str(tip.position.x)+','
			fingerData,+=,'"y":'+str(tip.position.y)+','
			fingerData,+=,'"z":'+str(tip.position.z)+'},'
			fingerData,+=,'},,"velocity":{'
			fingerData,+=,'"x":'+str(velocity.x)+','
			fingerData,+=,'"y":'+str(velocity.y)+','
			fingerData,+=,'"z":'+str(velocity.z)+'},'
			fingerData,+=,'"width":'+str(width)+'}'
			,,
			fingerCnt+=1
			if,(fingerCnt,!=,numFingers):
				fingerData,+=','
		fingerData,,+=,'],',	
			,
	else:
		fingerData,,=,'"fingers":,null,'
	
	,	
	return,fingerData
def,generatePalmData(hand,,handCnt,,numHands):
		
	palmRay,=,hand.palm()
	velocity,=,hand.velocity()
	ball,=,hand.ball(),;
	,,
	if,palmRay,is,not,None:
		#,Get,the,palm,position,and,wrist,direction
		palm,=,palmRay.position
		wrist,=,palmRay.direction
		
		if,ball,is,not,None:
			palmData,=,'"ball":{'
			palmData,+=,'"position":{'
			palmData,+=,'"x":'+str(ball.position.x)+','
			palmData,+=,'"y":'+str(ball.position.y)+','
			palmData,+=,'"z":'+str(ball.position.z)+'},,'
			palmData,+=,'"radius":,'+str(ball.radius)+'},'	
		else:
			palmData,=,'"ball":,null,'
			
		palmData,+=,'"palm":{'
		palmData,+=,'"direction":{'
		palmData,+=,'"x":'+str(wrist.x)+','
		palmData,+=,'"y":'+str(wrist.y)+','
		palmData,+=,'"z":'+str(wrist.z)
		palmData,+=,'},,"position":{'
		palmData,+=,'"x":'+str(palm.x)+','
		palmData,+=,'"y":'+str(palm.y)+','
		palmData,+=,'"z":'+str(palm.z)+'},'	
		palmData,+=,'},"velocity":{'
		palmData,+=,'"x":'+str(velocity.x)+','
		palmData,+=,'"y":'+str(velocity.y)+','
		palmData,+=,'"z":'+str(velocity.z)+'}'
		
	else:
		palmData,=,'"ball":,null,'
		palmData,+=,'"palm":,null,'
		palmData,+=,'"velocity":,null'
		
	#if(handCnt<numHands,and,numHands>1):
	#	,palmData,+=','	
	,,
	return,palmData	
			
def,main():
	try:
		setUpSocketServer()
	except,KeyboardInterrupt:
		print,bcolors.FAIL,+,"\nCaught,CTRL-C,Interrupt,,terminating..."+,bcolors.ENDC
if,__name__,==,"__main__":
main()import,os
from,collections,import,namedtuple
Klass,=,namedtuple("Klass",,"name,extends,constructor,varz,funcs,svars,sfuncs")
Var,=,namedtuple("Var",,"name,value")
source,=,"flash/Box2D"
destination,=,"javascript/Box2D"
import,re
def,readblock(code,,start="{",,end="}"):
i,=,0
code,=,code[code.index(start):]
block,=,[]
for,c,in,code:
block.append(c)
if,c,==,start:
i,+=,1
elif,c,==,end:
i,-=,1
if,i,==,0:
return,"".join(block)
def,translate(klass):
lines,=,["var,%s,=,function(),{",%,klass.name]
if,klass.extends:
lines.append("%s.prototype.__varz.call(this)",%,klass.extends)
lines.append("this.__varz(),;")
lines.append("this.__constructor.apply(this,,arguments),;")
lines.append("}")
if,klass.extends:
lines.append("extend(%s.prototype,,%s.prototype)",%,(klass.name,,klass.extends)),;
lines.append("%s.prototype._super,=,function(){,%s.prototype.__constructor.apply(this,,arguments),}",%,(klass.name,,klass.extends))
lines.append("%s.prototype.__constructor,=,%s",%,klass.constructor)
lines.append("%s.prototype.__varz,=,function(){",%,klass.name)
for,name,,value,in,klass.varz:
if,not,re.match("^\s*(\d+(\.\d+)?|null|true|false)\s*,;\s*$",,value):
lines.append("this.%s,=,%s",%,(name,,value))
lines.append("}")
lines.append("//,static,attributes")
for,name,,value,in,klass.svars:
lines.append("%s.%s,=,%s",%,(klass.name,,name,,value))
lines.append("//,static,methods")
for,name,,value,in,klass.sfuncs:
lines.append("%s.%s,=,%s",%,(klass.name,,name,,value))
lines.append("//,attributes")
for,name,,value,in,klass.varz:
lines.append("%s.prototype.%s,=,%s",%,(klass.name,,name,,value))
lines.append("//,methods")
for,name,,value,in,klass.funcs:
lines.append("%s.prototype.%s,=,%s",%,(klass.name,,name,,value))
code,=,"\n".join(lines)
#,remove,type,annotations
code,=,re.sub(r"([^,]+)[,]+as[,]+\w+",,"\\1",,code)
return,code
def,parse(code):
#,strip,comments
code,=,re.sub("(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|(//.*)",,"",,code)
#,ints,and,uints,are,initialized,with,0,not,null
code,=,re.sub("(var\s+\w+:u?int)\s*,;",,"\\1,=,0,;",,code)
#,int/uint,->,parseInt
code,=,re.sub("([^a-zA-Z0-9]+)int\(",,"\\1parseInt(",,code)
code,=,re.sub("([^a-zA-Z0-9]+)uint\(",,"\\1parseInt(",,code)
#,super,->,this._super
code,=,re.sub("([^a-zA-Z0-9]+)super\(",,"\\1this._super(",,code)
#,const,->,var,
code,=,re.sub(r"\bconst\b",,"var",,code)
#remove,type,anotations
code,=,re.sub("(\w+):[,]*(\w+|\\*)",,"\\1",,code)
##,remove,override,and,virtual
code,=,code.replace("override",,"").replace("virtual",,"").replace("\r",,"")
#,hack,...
code,=,code.replace("var,mid,=,((low,+,high),/,2),;",,"var,mid,=,Math.round((low,+,high),/,2),;")
code,=,code.replace("static,public",,"staticpublik")
code,=,code.replace("static,private",,"staticprivat")
#,hack,for,uints,used,in,proxy
code,=,code.replace("&,0x0000ffff",,"%,65535")
while,",,",in,code:
#,normalize,whitespace
code,=,code.replace(",,",,",")
lines,=,code.split("\n")
klass,=,None
extends,=,None
#,remove,packages,and,imports
lines,=,[l,for,l,in,lines,if,not
l.startswith("package,"),and,not,l.startswith("import,")]
code,=,"\n".join(lines)
#,find,class
i,=,code.index("public,class,")
aux,=,code[i+len("public,class,"):]
i,=,min(aux.index(","),,aux.index("\n"),,aux.index("{"))
klass,=,aux[:i].strip()
extends,=,None
if,"extends,",in,aux:
if,aux.index("extends,"),<,aux.index("{"):
aux,=,aux[aux.index("extends,")+len("extends,"):]
extends,=,aux[:min(aux.index(","),,aux.index("{"))].strip()
code,=,readblock(aux[aux.index("{"):])
pubf,=,getfunctions(code,,"public,function,")
try:
constructor,=,next(x,for,x,in,pubf,if,x[0],==,klass)
pubf.remove(constructor)
except,StopIteration:
constructor,=,Var(klass,,"function(){}")
privf,=,getfunctions(code,,"private,function,")
statf,=,getfunctions(code,,"static,function,"),+,getfunctions(code,
"staticpublik,function,"),+,getfunctions(code,,"staticprivat,function,")
privvar,=,getvars(code,,"private,var,")
pubvar,=,getvars(code,,"public,var,")
statvar,=,getvars(code,,"staticpublik,var,"),+,getvars(code,,"static,var"),+,getvars(code,,"staticprivat,var")
return,Klass(klass,,extends,,constructor,,privvar+pubvar,,privf+pubf,,statvar,,statf)
def,getvars(code,,prefix):
varz,=,[]
while,prefix,in,code:
code,=,code[code.index(prefix)+len(prefix):]
i,=,min(code.index(",;"),,code.index("\n"))
if,"=",in,code,and,code.index("="),<,i:
name,,code,=,code.split("=",,1)
name,=,name.strip()
i,=,min(code.index(",;"),,code.index("\n"))
body,=,code[:i],+,",;"
else:
name,=,code[:i]
body,=,",null,;"
#,support,var,foo,,bar,=,x,;
if,",",in,name:
for,subname,in,name.split(","):
varz.append(Var(subname.strip(),,body))
else:
varz.append(Var(name,,body))
return,varz
def,getfunctions(code,,prefix):
functions,=,[]
while,prefix,in,code:
code,=,code[code.index(prefix)+len(prefix):]
i,=,min(code.index(","),,code.index("("))
name,=,code[:i]
args,=,readblock(code,,"(",,")")
#remove,default,parameters
args,=,re.sub("=[^,)]+",,"",,args)
body,=,readblock(code)
functions.append(Var(name,,"function,%s,%s",%,(args,,body)))
return,functions
classes,=,{}
files,=,[]
for,dirpath,,dirnames,,filenames,in,os.walk(source):
target,=,dirpath.replace(source,,destination,,1)
for,dirname,in,dirnames:
try:
os.mkdir(os.path.join(target,,dirname))
except,OSError:
pass
for,filename,in,filenames:
if,not,filename.endswith(".as"):
continue
src,=,os.path.join(dirpath,,filename)
code,=,open(src,,"r").read()
dest,=,os.path.join(target,,filename.replace(".as",,".js"))
print,"parsing",,src
klass,=,parse(code)
print,"translating",,src
code,=,translate(klass)
#,klass,,path,,dependencies,(empty)
deps,=,klass.extends,and,[klass.extends],or,[]
classes[klass.name],=,(klass,,code,,dest,,deps)
def,resolve(code,,klass):
for,name,,value,in,klass.svars,+,klass.sfuncs:
code,=,re.sub("([^a-zA-Z0-9_.])(%s)([^a-zA-Z0-9_])",%,name,,"\\1",+
klass.name,+,".\\2\\3",,code)
for,name,,value,in,klass.varz,+,klass.funcs:
code,=,re.sub("([^a-zA-Z0-9_.])(%s)([^a-zA-Z0-9_])",%,name,,"\\1this.\\2\\3",,code)
if,klass.extends:
return,resolve(code,,classes[klass.extends][0])
return,code
#,resolve,references
for,name,in,classes:
klass,,code,,dest,,deps,=,classes[name]
with,open(dest,,"w"),as,f:
f.write(resolve(code,,klass))
#,build,deps
for,klass,in,classes:
klass,,code,,dest,,deps,=,classes[klass]
for,name,,value,in,klass.varz,+,klass.svars:
for,klass2,in,classes:
if,klass2,==,klass.name:
continue
if,klass2,in,value,and,not,klass2,in,deps:
deps.append(klass2)
#,randomly,breaking,circular,dependencies
def,breakCircle(klass,,root,,visited):
visited.append(klass)
deps,=,classes[klass][3]
if,root,in,deps:
deps.remove(root)
print,"found,circle",,root,,klass
return,True
return,any(breakCircle(d,,root,,visited),for,d,in,deps,if,not,d,in,visited)
#,breaking,all,the,circles
while,any(breakCircle(klass,,klass,,[]),for,klass,in,classes):
pass
while,classes:
for,name,in,classes.keys():
klass,,code,,dest,,deps,=,classes[name]
deps,=,[d,for,d,in,deps,if,d,in,classes]
if,len(deps),==,0:
files.append(dest)
del,classes[name]
with,open("build.sh",,"w"),as,f:
f.write("#!/bin/sh\n")
f.write("java,-jar,compiler.jar,--js,extend.js,--js,")
f.write(",--js,".join(files))
f.write(",--js_output_file,box2d.js")
with,open("load.html",,"w"),as,f:
for,filename,in,files:
f.write('<script,src="',+,filename,+,'",type="text/javascript"></script>\r\n')
print,"\n".join(files)
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#
#,This,script,runs,just,like,a,traditional,configure,script,,to,do,configuration
#,testing,and,makefile,generation.
#****************************************************************************
#,If,you're,building,android,the,android,public,sdk/ndk,must,be,set,up,on,your
#,build,machine.,#,See,the,wiki,page,here,for,instructions,on,how,to,create
#,the,android,public,sdk/ndk:
#,https://zerowing.corp.adobe.com/display/FlashPlayer/android+tamarin+shell+support
#
#,Before,building,edit,the,/android-public/android-vars.sh,script
#,and,check,that,the,ANDROIDTOP,variable,is,set,correctly.,Then,run,the,script,
#,before,invoking,configure.py:
#,,,,,,,,.,/android-public/android-vars.sh
#
#****************************************************************************
import,os
import,os.path
import,sys
import,build.process
import,re
import,string
import,subprocess
thisdir,=,os.path.dirname(os.path.abspath(__file__))
#,Look,for,additional,modules,in,our,build/,directory.
sys.path.append(thisdir)
from,build.configuration,import,*
import,build.getopt
import,build.avmfeatures
#,Used,to,set,the,mac,SDK,parameters
def,_setSDKParams(sdk_version,,os_ver,,xcode_version):
if,sdk_version,is,None:
#,Infer,SDK,version,from,the,current,OS,version
if,os_ver,==,'10.4':
sdk_version,=,'104u'
else:
sdk_version,=,os_ver.translate(None,,string.punctuation)
#,On,10.5/6,systems,,and,only,if,"--mac-sdk=104u",is,passed,in,,compile,for,the,10.4u,SDK,and,override,CC/CXX,(set,in,configuration.py),to,use,gcc/gxx,4.0.x
#,Infer,xcode,version,from,the,SDK,version,if,not,directly,specified
if,sdk_version,==,'104u':
os_ver,sdk_number,=,'10.4','10.4u'
config._acvars['CXX'],=,'g++-4.0'
config._acvars['CC'],,=,'gcc-4.0'
if,xcode_version,is,None:
xcode_version,=,'3'
elif,sdk_version,==,'105':
os_ver,sdk_number,=,'10.5','10.5'
if,xcode_version,is,None:
xcode_version,=,'3'
elif,sdk_version,==,'106':
os_ver,sdk_number,=,'10.6','10.6'
if,xcode_version,is,None:
xcode_version,=,'3'
elif,sdk_version,==,'107':
os_ver,sdk_number,=,'10.7','10.7'
if,xcode_version,is,None:
xcode_version,=,'4'
else:
print'Unknown,SDK,version,->,%s.,Expected,values,are,104u,,105,,106,or,107.',%,sdk_version
sys.exit(2)
sdk_prefix,=,None
if,xcode_version,is,not,None:
xcode_major_version,=,xcode_version.split(".")[0]
if,int(xcode_major_version),>=,4:
sdk_prefix,=,"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX"
if,sdk_prefix,is,None:
sdk_prefix,=,"/Developer/SDKs/MacOSX"
sdk_path,=,sdk_prefix,+,sdk_number,+,".sdk"
if,not,os.path.exists(sdk_path):
print'Could,not,find,%s',%,sdk_path
sys.exit(2)
else:
return,os_ver,sdk_path
def,_setGCCVersionedFlags(FLAGS,,MAJOR_VERSION,,MINOR_VERSION,,current_cpu):
#,warnings,have,been,updated,to,try,to,include,all,those,enabled,by,current,Flash/AIR,builds,--,disable,with,caution,,or,risk,integration,pain
if,MAJOR_VERSION,>=,4:
FLAGS,+=,"-Wstrict-null-sentinel,"
if,current_cpu,==,'mips':
FLAGS,+=,"-Wstrict-aliasing=0,"
elif,(MAJOR_VERSION,==,4,and,MINOR_VERSION,<=,2):,#,4.0,-,4.2
#,Bugzilla,654996:,-Werror,for,gcc,prior,to,4.3,can,_usually_,be
#,turned,on,;,see,core/manifest.mk,for,Interpreter.cpp,workaround.
FLAGS,+=,"-Wstrict-aliasing=0,-Werror,"
elif,(MAJOR_VERSION,==,4,and,MINOR_VERSION,==,4):,#,4.4
FLAGS,+=,"-Werror,-Wempty-body,-Wno-logical-op,-Wmissing-field-initializers,-Wstrict-aliasing=0,-Wno-array-bounds,-Wno-clobbered,-Wstrict-overflow=0,-funit-at-a-time,,"
else:,#,gcc,4.5,or,later
FLAGS,+=,"-Werror,-Wempty-body,-Wno-logical-op,-Wmissing-field-initializers,-Wstrict-aliasing=3,-Wno-array-bounds,-Wno-clobbered,-Wstrict-overflow=0,-funit-at-a-time,,"
if,(MAJOR_VERSION,==,4,and,MINOR_VERSION,==,6):,#,4.6
FLAGS,+=,"-Wno-psabi,-Wno-unused-variable,-Wno-unused-but-set-variable,"
return,FLAGS
o,=,build.getopt.Options()
config,=,Configuration(thisdir,,options,=,o,
sourcefile,=,'core/avmplus.h')
the_os,,cpu,=,config.getTarget()
arm_fpu,=,o.getBoolArg("arm-fpu",,False)
arm_neon,=,o.getBoolArg("arm-neon",,False)
arm_thumb,=,False
if,cpu,==,"thumb2":
arm_thumb,=,True
else:
arm_thumb,=,o.getBoolArg("arm-thumb",False)
arm_hard_float,=,o.getBoolArg("arm-hard-float",,False)
arm_arch,=,o.arm_arch
if,arm_arch,==,None,and,cpu,==,"thumb2":
arm_arch,=,"armv7-a"
buildTamarin,=,o.getBoolArg('tamarin',,True)
if,buildTamarin:
config.subst("ENABLE_TAMARIN",,1)
buildShell,=,o.getBoolArg("shell",,True)
if,(buildShell):
config.subst("ENABLE_SHELL",,1)
buildAot,=,o.peekBoolArg("aot",,False)
if,buildAot:
config.subst("ENABLE_AOT",,1)
APP_CPPFLAGS,=,"-DAVMSHELL_BUILD,"
APP_CXXFLAGS,=,""
APP_CFLAGS,=,""
OPT_CXXFLAGS,=,"-O3,"
OPT_CPPFLAGS,=,""
DEBUG_CPPFLAGS,=,"-DDEBUG,-D_DEBUG,"
DEBUG_CXXFLAGS,=,""
DEBUG_CFLAGS,=,""
DEBUG_LDFLAGS,=,""
OS_LIBS,=,[]
OS_LDFLAGS,=,""
LDFLAGS,=,config._acvars['LDFLAGS']
MMGC_CPPFLAGS,=,"-DAVMSHELL_BUILD,"
AVMSHELL_CPPFLAGS,=,""
AVMSHELL_LDFLAGS,=,""
MMGC_DEFINES,=,{}
NSPR_INCLUDES,=,""
NSPR_LDOPTS,=,""
DISABLE_RTMPE,=,None
ANDROIDPLATFORMVER,=,"android-9"
ARM_EABI_VER,=,'4.4.3'
ARM_EABI,=,'arm-linux-androideabi'
if,'APP_CPPFLAGS',in,os.environ:
APP_CPPFLAGS,+=,os.environ['APP_CPPFLAGS'],+,","
if,'APP_CXXFLAGS',in,os.environ:
APP_CXXFLAGS,+=,os.environ['APP_CXXFLAGS'],+,","
if,'APP_CFLAGS',in,os.environ:
APP_CFLAGS,+=,os.environ['APP_CFLAGS'],+,","
if,'OPT_CXXFLAGS',in,os.environ:
OPT_CXXFLAGS,+=,os.environ['OPT_CXXFLAGS'],+,","
if,'OPT_CPPFLAGS',in,os.environ:
OPT_CPPFLAGS,+=,os.environ['OPT_CPPFLAGS'],+,","
if,'DEBUG_CPPFLAGS',in,os.environ:
DEBUG_CPPFLAGS,+=,os.environ['DEBUG_CPPFLAGS'],+,","
if,'DEBUG_CXXFLAGS',in,os.environ:
DEBUG_CXXFLAGS,+=,os.environ['DEBUG_CXXFLAGS'],+,","
if,'DEBUG_CFLAGS',in,os.environ:
DEBUG_CFLAGS,+=,os.environ['DEBUG_CFLAGS'],+,","
if,'DEBUG_LDFLAGS',in,os.environ:
DEBUG_LDFLAGS,+=,os.environ['DEBUG_LDFLAGS'],+,","
if,'OS_LDFLAGS',in,os.environ:
OS_LDFLAGS,+=,os.environ['OS_LDFLAGS'],+,","
if,'MMGC_CPPFLAGS',in,os.environ:
MMGC_CPPFLAGS,+=,os.environ['MMGC_CPPFLAGS'],+,","
if,'AVMSHELL_CPPFLAGS',in,os.environ:
AVMSHELL_CPPFLAGS,+=,os.environ['AVMSHELL_CPPFLAGS'],+,","
if,'ARM_EABI',in,os.environ:
ARM_EABI,=,os.environ['ARM_EABI']
if,'ARM_EABI_VER',in,os.environ:
ARM_EABI_VER,=,os.environ['ARM_EABI_VER']
if,'AVMSHELL_LDFLAGS',in,os.environ:
AVMSHELL_LDFLAGS,+=,os.environ['AVMSHELL_LDFLAGS'],+,","
if,'NSPR_INCLUDES',in,os.environ:
NSPR_INCLUDES,+=,os.environ['NSPR_INCLUDES'],+,","
if,'NSPR_LDOPTS',in,os.environ:
NSPR_LDOPTS,+=,os.environ['NSPR_LDOPTS'],+,","
if,'DISABLE_RTMPE',in,os.environ:
DISABLE_RTMPE,+=,os.environ['DISABLE_RTMPE'],+,",",,,,
if,o.getBoolArg('valgrind',,False,,False):
OPT_CXXFLAGS,=,"-O1,-g,"
valinc,=,'$(topsrcdir)/other-licenses'
if,'VALGRIND_HOME',in,os.environ:
valinc,=,os.environ['VALGRIND_HOME'],+,'/include'
APP_CPPFLAGS,+=,'-I',+,valinc,+,','
#,builtinBuildFlags(),must,be,called,first,,featureSettings(),will,clear,the,features!
config.subst("BUILTIN_BUILDFLAGS",build.avmfeatures.builtinBuildFlags(o)),;
#,See,build/avmfeatures.py,for,the,code,that,processes,switches,for
#,standard,feature,names.
APP_CPPFLAGS,+=,build.avmfeatures.featureSettings(o)
if,not,o.getBoolArg("methodenv-impl32",,True):
APP_CPPFLAGS,+=,"-DVMCFG_METHODENV_IMPL32=0,"
memoryProfiler,=,o.getBoolArg("memory-profiler",,False)
if,memoryProfiler:
APP_CPPFLAGS,+=,"-DMMGC_MEMORY_PROFILER,"
MMGC_INTERIOR_PTRS,=,o.getBoolArg('mmgc-interior-pointers',,False)
if,MMGC_INTERIOR_PTRS:
MMGC_DEFINES['MMGC_INTERIOR_PTRS'],=,None
MMGC_DYNAMIC,=,o.getBoolArg('mmgc-shared',,False)
if,MMGC_DYNAMIC:
MMGC_DEFINES['MMGC_DLL'],=,None
MMGC_CPPFLAGS,+=,"-DMMGC_IMPL,"
#,For,-Wreorder,,see,https://bugzilla.mozilla.org/show_bug.cgi?id=475750
if,config.getCompiler(),==,'GCC':
if,'CXX',in,os.environ:
rawver,=,build.process.run_for_output(['$CXX',,'--version'])
else:
rawver,=,build.process.run_for_output(['gcc',,'--version'])
vre,=,re.compile(".*,([3-9]\.[0-9]+\.[0-9]+)[,\n]")
ver,=,vre.match(rawver).group(1)
ver_arr,=,ver.split('.')
GCC_MAJOR_VERSION,=,int(ver_arr[0])
GCC_MINOR_VERSION,=,int(ver_arr[1])
if,the_os,==,'android':
try:
ANDROID_TOOLCHAIN,=,os.environ['ANDROID_TOOLCHAIN']
ANDROID_NDK,=,os.environ['ANDROID_NDK']
ANDROID_NDK_BIN,=,os.environ['ANDROID_NDK_BIN']
ANDROID_SDK,=,os.environ['ANDROID_SDK']
except:
print('\nANDROID_,variables,not,found,in,environment\nPlease,run,/android-public/android-vars.sh')
exit(0)
ANDROID_INCLUDES,=,"-I$(topsrcdir)/other-licenses/zlib,"\
"-I$(ANDROID_NDK)/platforms/%s/arch-arm/usr/include,"\
"-I$(ANDROID_NDK_BIN),"\
"-I$(ANDROID_SDK),"\
"-I$(ANDROID_NDK)/sources/cxx-stl/stlport/stlport,"\
"-I$(ANDROID_TOOLCHAIN)/openssl/include,"\
"-I$(ANDROID_TOOLCHAIN)/frameworks/base/opengl/include,",%,(ANDROIDPLATFORMVER)
#,These,flags,are,shared,with,some,of,the,other,builds,such,as,ARM,,but,better,to,keep,them,separate,here,for,flexibility
COMMON_CXX_FLAGS,=,"-Wall,-Wdisabled-optimization,-Wextra,-Wformat=2,-Winit-self,-Winvalid-pch,-Wno-invalid-offsetof,",\
"-Wno-switch,-Wpointer-arith,-Wwrite-strings,-Woverloaded-virtual,-Wsign-promo,",\
"-fmessage-length=0,-fno-exceptions,-fno-rtti,-fsigned-char,-fno-inline-functions-called-once,-ffunction-sections,-fdata-sections,-Wno-ctor-dtor-privacy,"
#,Additional,flags,used,by,android
APP_CXX_FLAGS,=,"%s,-Wno-ctor-dtor-privacy,-Wlogical-op,-Wstrict-overflow=1,",\
"-Wmissing-include-dirs,-Wno-missing-field-initializers,-Wno-type-limits,-Wno-unused-parameter,",\
"-Wnon-virtual-dtor,-Wstrict-null-sentinel,-Wno-missing-braces,-Wno-multichar,-Wno-psabi,-Wno-reorder,",\
"-fno-short-enums,-fno-strict-aliasing,-fpic,-funwind-tables,-fstack-protector,-finline-limit=200,-ftree-vectorize,",\
"-feliminate-unused-debug-symbols,-feliminate-unused-debug-types,-MD,-fwrapv,",%,COMMON_CXX_FLAGS
APP_CXXFLAGS,+=,_setGCCVersionedFlags(APP_CXX_FLAGS,,GCC_MAJOR_VERSION,,GCC_MINOR_VERSION,,cpu)
#,LFLAGS_HEADLESS,gets,picked,up,in,configuration.py,by,MKPROGRAM
LFLAGS_HEADLESS,=,"-nostdlib,-Bdynamic,-Wl,-T,"\
"$(ANDROID_NDK_BIN)/../%s/lib/ldscripts/armelf_linux_eabi.x,"\
"-Wl,-dynamic-linker,/system/bin/linker,"\
"-Wl,-z,nocopyreloc,"\
"-L$(ANDROID_NDK)/platforms/%s/arch-arm/usr/lib,"\
"-L$(ANDROID_NDK)/sources/cxx-stl/stlport/libs/armeabi,"\
"-Wl,-rpath-link=$(ANDROID_NDK)/platforms/%s/arch-arm/usr/lib,"\
"$(ANDROID_NDK)/platforms/%s/arch-arm/usr/lib/crtbegin_dynamic.o,"\
"$(ANDROID_NDK)/platforms/%s/arch-arm/usr/lib/crtend_android.o,",%,(ARM_EABI,ANDROIDPLATFORMVER,ANDROIDPLATFORMVER,ANDROIDPLATFORMVER,ANDROIDPLATFORMVER)
LDFLAGS,+=,"$(ANDROID_TOOLCHAIN)/openssl/libcrypto.a,$(ANDROID_TOOLCHAIN)/openssl/libssl.a"
#,SEARCH_DIRS,gets,picked,up,in,configuration.py,by,MKPROGRAM
SEARCH_DIRS,=,"-L."
BASE_M_FLAGS,=,"-mlong-calls,-mthumb-interwork,"
if,arm_arch,==,"armv7-a",or,arm_arch,==,None:
BASE_CXX_FLAGS,=,"%s,-march=armv7-a,-mtune=cortex-a8,-mfloat-abi=softfp,-mno-thumb,-fno-section-anchors,-D__ARM_ARCH__=7,",\
"-DARMV6_ASSEMBLY,",%,BASE_M_FLAGS
APP_CXXFLAGS,+=,BASE_CXX_FLAGS
elif,arm_arch,==,"armv6":
BASE_CXX_FLAGS,=,"%s,-march=armv6,-mfloat-abi=soft,-D__ARM_ARCH__=6,-DARMV5_ASSEMBLY,-DARMV6_ASSEMBLY,",%,BASE_M_FLAGS
APP_CXXFLAGS,+=,BASE_CXX_FLAGS
LFLAGS_HEADLESS,+=,"-Wl,--no-enum-size-warning"
elif,arm_arch,==,"armv5":
BASE_CXX_FLAGS,=,"%s,-march=armv5te,-mfloat-abi=soft,-mtune=xscale,-D__ARM_ARCH__=5,-DARMV5_ASSEMBLY,",%,BASE_M_FLAGS
APP_CXXFLAGS,+=,BASE_CXX_FLAGS
LFLAGS_HEADLESS,+=,"-Wl,--no-enum-size-warning"
else:
raise,Exception('Unrecognized,architecture:,%s',%,arm_arch)
APP_CPPFLAGS,+=,"-DAVMPLUS_UNIX,-DUNIX,-Dlinux,-DUSE_PTHREAD_MUTEX,-DGTEST_USE_OWN_TR1_TUPLE=1,-DHAVE_STDARG,-DAVMPLUS_ARM,%s",%,ANDROID_INCLUDES
else:
APP_CXXFLAGS,+=,"-Wall,-Wcast-align,-Wdisabled-optimization,-Wextra,-Wformat=2,-Winit-self,-Winvalid-pch,-Wno-invalid-offsetof,-Wno-switch,"\
"-Wparentheses,-Wpointer-arith,-Wreorder,-Wsign-compare,-Wunused-parameter,-Wwrite-strings,-Wno-ctor-dtor-privacy,-Woverloaded-virtual,"\
"-Wsign-promo,-Wno-char-subscripts,-fmessage-length=0,-fno-exceptions,-fno-rtti,-fno-check-new,-fstrict-aliasing,-fsigned-char,,"
APP_CXXFLAGS,+=,_setGCCVersionedFlags(APP_CXXFLAGS,,GCC_MAJOR_VERSION,,GCC_MINOR_VERSION,,cpu)
if,cpu,==,'sh4':
APP_CXXFLAGS,+=,"-mieee,-Wno-cast-align,"
if,cpu,==,'arm',or,cpu,==,'thumb2':
APP_CXXFLAGS,+=,"-Wno-cast-align,"
APP_CFLAGS,+=,"-Wno-cast-align,"
FLOAT_ABI,=,None,;
EXTRA_CFLAGS,=,"",;
if,arm_fpu:
FLOAT_ABI,=,"-mfloat-abi=softfp,"
EXTRA_CFLAGS,=,"-mfpu=vfp,-march=%s,",%,arm_arch,#,compile,to,use,hardware,fpu
if,arm_hard_float:
FLOAT_ABI,=,"-mfloat-abi=hard,-march=%s,",%,arm_arch,#,compile,to,use,neon,vfp
AVMSHELL_LDFLAGS,+=,"-static,"
if,arm_neon:
if,FLOAT_ABI,==,None:
FLOAT_ABI,=,"-mfloat-abi=softfp,"
EXTRA_CFLAGS,=,"-mfpu=neon,-march=%s,-DTARGET_NEON,",%,arm_arch,#,compile,to,use,neon,vfp
if,arm_thumb:
EXTRA_CFLAGS,+=,"-mthumb,-DTARGET_THUMB2,"
if,arm_thumb,!=,False,and,arm_arch,==,"armv7-a":
EXTRA_CFLAGS,+=,"-mtune=cortex-a8,"
#if,arm_arch:
#OPT_CXXFLAGS,+=,"-march=%s,",%,arm_arch
#DEBUG_CXXFLAGS,+=,"-march=%s,",%,arm_arch
if,EXTRA_CFLAGS,!=,None:
APP_CXXFLAGS,+=,EXTRA_CFLAGS
APP_CFLAGS,+=,EXTRA_CFLAGS
if,FLOAT_ABI,!=,None:
APP_CXXFLAGS,+=,FLOAT_ABI
APP_CFLAGS,+=,FLOAT_ABI
AVMSHELL_LDFLAGS,+=,FLOAT_ABI
if,config.getDebug():
APP_CXXFLAGS,+=,""
else:
APP_CXXFLAGS,+=,"-Wuninitialized,"
DEBUG_CXXFLAGS,+=,"-g,"
DEBUG_LDFLAGS,+=,"-g,"
elif,config.getCompiler(),==,'VS':
if,cpu,==,"arm":
APP_CXXFLAGS,=,"-W4,-WX,-wd4291,-wd4201,-wd4189,-wd4740,-wd4127,-fp:fast,-GF,-GS-,-Zc:wchar_t-,"
OS_LDFLAGS,+=,"-MAP,"
if,config.getDebug():
DEBUG_CXXFLAGS,=,"-Od,"
DEBUG_CFLAGS,=,"-Od,"
APP_CXXFLAGS,+=,"-GR-,-fp:fast,-GS-,-Zc:wchar_t-,-Zc:forScope,"
else:
OPT_CXXFLAGS,=,"-O2,-GR-,"
if,arm_arch:
OPT_CXXFLAGS,+=,"-QR%s,",%,arm_arch
if,arm_fpu:
OPT_CXXFLAGS,+=,"-QRfpe-,",#,compile,to,use,hardware,fpu
else:
APP_CXXFLAGS,=,"-W4,-WX,-wd4291,-GF,-GS-,-Zc:wchar_t-,"
APP_CFLAGS,=,"-W3,-WX,-wd4291,-GF,-GS-,-Zc:wchar_t-,"
if,cpu,==,'x86_64':
pass,#,64,bit,VC,does,NaN,comparisons,incorrectly,with,fp:fast
else:
APP_CXXFLAGS,+=,"-fp:fast,"
APP_CFLAGS,+=,"-fp:fast,"
OS_LDFLAGS,+=,"-MAP,"
if,config.getDebug():
DEBUG_CXXFLAGS,=,"-Od,"
DEBUG_CFLAGS,=,"-Od,"
else:
OPT_CXXFLAGS,=,"-O2,-Ob1,-GR-,"
OPT_CFLAGS,=,"-O2,-Ob1,-GR-,"
if,memoryProfiler:
OPT_CXXFLAGS,+=,"-Oy-,-Zi,"
DEBUG_CXXFLAGS,+=,"-Zi,"
DEBUG_CFLAGS,+=,"-Zi,"
DEBUG_LDFLAGS,+=,"-DEBUG,"
elif,config.getCompiler(),==,'SunStudio':
APP_CXXFLAGS,=,"-template=no%extdef,-erroff"
OPT_CXXFLAGS,=,"-xO2,"
DEBUG_CXXFLAGS,+=,"-g,"
else:
raise,Exception('Unrecognized,compiler:,',+,config.getCompiler())
zlib_include_dir,=,o.getStringArg('zlib-include-dir')
if,zlib_include_dir,is,not,None:
AVMSHELL_CPPFLAGS,+=,"-I%s,",%,zlib_include_dir
zlib_lib,=,o.getStringArg('zlib-lib')
if,zlib_lib,is,None:
zlib_lib,=,'$(call,EXPAND_LIBNAME,zlib)'
lzma_lib,=,o.getStringArg('lzma-lib')
if,lzma_lib,is,None:
lzma_lib,=,'$(call,EXPAND_LIBNAME,lzma)'
AVMSHELL_LDFLAGS,+=,zlib_lib,+,',',+,lzma_lib
sys_root_dir,=,o.getStringArg('sys-root-dir')
if,sys_root_dir,is,not,None:
OS_LDFLAGS,+=,",--sysroot=%s,",%,sys_root_dir
OPT_CXXFLAGS,+=,",--sysroot=%s,",%,sys_root_dir
if,the_os,==,"darwin":
#,Get,machine's,OS,version,number,and,trim,off,anything,after,'10.x'
p,=,subprocess.Popen('sw_vers,-productVersion',,shell=True,,stdout=subprocess.PIPE,,stderr=subprocess.STDOUT)
os_ver,=,p.stdout.read()
parts,=,os_ver.split('.')
os_ver,=,parts[0],+,'.',+,parts[1]
AVMSHELL_LDFLAGS,+=,",-exported_symbols_list,$(topsrcdir)/platform/mac/avmshell/exports.exp"
MMGC_DEFINES.update({'TARGET_API_MAC_CARBON':,1,
'DARWIN':,1,
'_MAC':,None,
'AVMPLUS_MAC':,None,
'TARGET_RT_MAC_MACHO':,1})
APP_CXXFLAGS,+=,"-fpascal-strings,-faltivec,-fasm-blocks,"
#,If,an,sdk,is,selected,align,OS,and,gcc/g++,versions,to,it
os_ver,sdk_path,=,_setSDKParams(o.mac_sdk,,os_ver,,o.mac_xcode)
APP_CXXFLAGS,+=,"-mmacosx-version-min=%s,-isysroot,%s,",%,(os_ver,sdk_path)
config.subst("MACOSX_DEPLOYMENT_TARGET",os_ver)
if,cpu,==,'ppc64':
APP_CXXFLAGS,+=,"-arch,ppc64,"
APP_CFLAGS,+=,"-arch,ppc64,"
OS_LDFLAGS,+=,"-arch,ppc64,"
elif,cpu,==,'x86_64':
APP_CXXFLAGS,+=,"-arch,x86_64,"
APP_CFLAGS,+=,"-arch,x86_64,"
OS_LDFLAGS,+=,"-arch,x86_64,"
elif,the_os,==,"windows",or,the_os,==,"cygwin":
MMGC_DEFINES.update({'WIN32':,None,
'_CRT_SECURE_NO_DEPRECATE':,None})
OS_LDFLAGS,+=,"-MAP,"
if,cpu,==,"arm":
APP_CPPFLAGS,+=,"-DARM,-D_ARM_,-DUNICODE,-DUNDER_CE=1,-DMMGC_ARM,"
if,arm_fpu:
APP_CPPFLAGS,+=,"-DARMV6,-QRarch6,"
else:
APP_CPPFLAGS,+=,"-DARMV5,-QRarch5t,"
OS_LIBS.append('mmtimer,corelibc,coredll')
elif,cpu,==,"thumb2":,
APP_CPPFLAGS,+=,"-DARMv7,-D_ARM_,-DTARGET_THUMB2,-DUNICODE,-DUNDER_RT=1,-DWIN32_LEAN_AND_MEAN,-D_CONSOLE,-D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE,"
OS_LIBS.append('winmm')
OS_LIBS.append('shlwapi')
OS_LIBS.append('AdvAPI32')
else:
APP_CPPFLAGS,+=,"-DWIN32_LEAN_AND_MEAN,-D_CONSOLE,"
OS_LIBS.append('winmm')
OS_LIBS.append('shlwapi')
OS_LIBS.append('AdvAPI32')
elif,the_os,==,"linux":
MMGC_DEFINES.update({'UNIX':,None,
'AVMPLUS_UNIX':,None})
OS_LIBS.append('pthread')
if,cpu,==,"i686":
APP_CPPFLAGS,+=,"-m32,-march=i686,"
OS_LDFLAGS,+=,"-m32,"
#,,,,if,cpu,==,"x86_64":
#,,,,,,,,#,workaround,https://bugzilla.mozilla.org/show_bug.cgi?id=467776
#,,,,,,,,OPT_CXXFLAGS,+=,'-fno-schedule-insns2,'
if,config.getDebug():
OS_LIBS.append("dl")
elif,the_os,==,"android":
BASE_D_FLAGS,=,"-DANDROID,-DHAVE_SYS_UIO_H,-Dlinux,-DUNIX,-Dcompress=zlib_compress,"
APP_CXXFLAGS,+=,BASE_D_FLAGS
if,config.getDebug():
DEBUG_CXXFLAGS,+=,"-DDEBUG,-D_DEBUG,-DASYNC_DEBUG,-O0,-ggdb3,"
DEBUG_CPPFLAGS,=,""
else:
APP_CXXFLAGS,+=,"-DNDEBUG,-O3,-fomit-frame-pointer,-fvisibility=hidden,-finline-functions,-fgcse-after-reload,-frerun-cse-after-loop,-frename-registers,-fvisibility-inlines-hidden,"
DEBUG_CPPFLAGS,=,""
elif,the_os,==,"sunos":
if,config.getCompiler(),!=,'GCC':
APP_CXXFLAGS,=,"-template=no%extdef,-erroff"
OPT_CXXFLAGS,=,"-xO2,"
DEBUG_CXXFLAGS,=,"-g,"
MMGC_DEFINES.update({'UNIX':,None,
'AVMPLUS_UNIX':,None,
'SOLARIS':,None})
OS_LIBS.append('pthread')
OS_LIBS.append('rt')
OS_LIBS.append('Cstd')
APP_CPPFLAGS,+=,'-DAVMPLUS_CDECL,'
if,config.getDebug():
OS_LIBS.append("dl")
else:
raise,Exception("Unsupported,OS")
if,cpu,==,"i686":
if,config.getCompiler(),==,'GCC',:
#,we,require,sse2
APP_CPPFLAGS,+=,"-msse2,"
elif,cpu,==,"powerpc":
#,we,detect,this,in,core/avmbuild.h,and,MMgc/*build.h
None
elif,cpu,==,"ppc64":
#,we,detect,this,in,core/avmbuild.h,and,MMgc/*build.h
None
elif,cpu,==,"sparc":
APP_CPPFLAGS,+=,"-DAVMPLUS_SPARC,"
elif,cpu,==,"x86_64":
#,we,detect,this,in,core/avmbuild.h,and,MMgc/*build.h
None
elif,cpu,==,"thumb2":
#,we,detect,this,in,core/avmbuild.h,and,MMgc/*build.h
None
elif,cpu,==,"arm":
#,we,detect,this,in,core/avmbuild.h,and,MMgc/*build.h
None
elif,cpu,==,"mips":
#,we,detect,this,in,core/avmbuild.h,and,MMgc/*build.h
None
elif,cpu,==,"sh4":
#,work,around,for,a,problem,with,tas.b,instruction,on,some,sh4,boards
APP_CPPFLAGS,+=,"-DUSE_PTHREAD_MUTEX,"
else:
raise,Exception("Unsupported,CPU")
if,o.getBoolArg('perfm'):
APP_CPPFLAGS,+=,"-DPERFM,"
if,o.help:
sys.stdout.write(o.getHelp())
sys.exit(1)
#,Get,the,optional,avm,description,string
#,This,is,NOT,supported,on,windows/cygwin,due,to,cygwin-wrapper.sh
#,not,passing,the,string,correctly,to,cl.exe
AVMPLUS_DESC,=,o.getStringArg('desc'),or,''
if,the_os,==,"windows",or,the_os,==,"cygwin":
if,AVMPLUS_DESC:
print('AVMPLUS_DESC,is,not,supported,on,windows,via,cygwin,make.'
',,Ignoring,description.')
else:,#,all,other,platforms
#,place,in,Makefile,even,if,the,value,is,empty,so
#,it,can,be,updated,by,hand,if,desired
APP_CPPFLAGS,+=,'-DAVMPLUS_DESC="${AVMPLUS_DESC}",'
config.subst("AVMPLUS_DESC",,AVMPLUS_DESC)
#,Append,MMGC_DEFINES,to,APP_CPPFLAGS
APP_CPPFLAGS,+=,''.join(val,is,None,and,('-D%s,',%,var),or,('-D%s=%s,',%,(var,,val))
for,(var,,val),in,MMGC_DEFINES.iteritems())
config.subst("APP_CPPFLAGS",,APP_CPPFLAGS)
config.subst("APP_CXXFLAGS",,APP_CXXFLAGS)
config.subst("APP_CFLAGS",,APP_CFLAGS)
config.subst("OPT_CPPFLAGS",,OPT_CPPFLAGS)
config.subst("OPT_CXXFLAGS",,OPT_CXXFLAGS)
config.subst("DEBUG_CPPFLAGS",,DEBUG_CPPFLAGS)
config.subst("DEBUG_CXXFLAGS",,DEBUG_CXXFLAGS)
config.subst("DEBUG_LDFLAGS",,DEBUG_LDFLAGS)
config.subst("OS_LIBS",,",".join(OS_LIBS))
config.subst("OS_LDFLAGS",,OS_LDFLAGS)
config.subst("MMGC_CPPFLAGS",,MMGC_CPPFLAGS)
config.subst("AVMSHELL_CPPFLAGS",,AVMSHELL_CPPFLAGS)
config.subst("AVMSHELL_LDFLAGS",,AVMSHELL_LDFLAGS)
config.subst("MMGC_DYNAMIC",,MMGC_DYNAMIC,and,1,or,'')
if,the_os,==,"android":
config.subst("LFLAGS_HEADLESS",,LFLAGS_HEADLESS)
config.subst("LDFLAGS",,LDFLAGS),,,,
config.subst("SEARCH_DIRS",,SEARCH_DIRS)
config.generate("Makefile")
o.finish()
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
#,generate.py,-,generate,all,exactgc,tracers
import,sys,os
rootdir,=,os.path.dirname(__file__)
sys.path.append(rootdir)
import,utils.exactgc
utils.exactgc.gen_builtins(rootdir,+,'/generated')
utils.exactgc.gen_shell(rootdir,+,'/generated')
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,vi:,set,ts=4,sw=4,expandtab:
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys
import,os
import,pprint
import,bisect
import,pickle
import,subprocess
import,optparse
scriptname,=,os.path.basename(os.path.normpath(os.path.abspath(sys.argv[0])))
standardHeader,=,"""//,This,file,was,auto-generated,,do,not,modify,by,hand.
//,""",+,scriptname,+,",generates,this,file.\n"
#,------------------------------------------------------------------------------
#,Process,creation,/,execution
#,------------------------------------------------------------------------------
def,runProcess(p,,msg,,ignoreErrors,=,False):
(stdoutdata,,stderrdata),=,p.communicate()
if,not,ignoreErrors:
if,not,p.returncode,==,0:
if,stderrdata:
print,stderrdata
print,msg
sys.exit(1)
return,(stdoutdata,,stderrdata)
def,createProcess(exe,,args,,verbose,=,False):
cmdargs,=,[exe],+,args
if,verbose:
print,"running:,",+,",".join(cmdargs)
return,subprocess.Popen(cmdargs,,executable=exe,,stdout=subprocess.PIPE,,stderr=subprocess.PIPE)
#,------------------------------------------------------------------------------
#,demangle
#,------------------------------------------------------------------------------
def,getType(t):
t,=,t.strip()
if,t.startswith("avmplus::"):
return,t.replace("avmplus::",,"")
elif,t.find("S*"),!=,-1:
return,"".join(t.split("S*"))
elif,t.find("*"),!=,-1:
p,=,t.find("*")
return,getType(t[0:p]),+,t[p:len(t)]
elif,t,==,"unsigned,int",or,t,==,"uint32_t":
return,"uint32_t"
elif,t,==,"int":
return,"int32_t"
else:
return,t
def,demangle(n):
(stdout,,stderr),=,runProcess(createProcess('c++filt',,[u'-n',,n],,False),,"Unable,to,demangle...")
stdout,=,stdout.replace("((anonymous,namespace)::LLVMSelectGetSetDelHasProperty)",,"FAIL")
(functype,,args),=,stdout.split("("),;
args,=,args.replace(")",,"").split(",")
functype,=,functype.replace("<",,",").replace(">",,",").replace(",",,",").replace("unsigned,int",,"uint32_t").split(",")
#,we,only,care,if,its,templated
if,len(functype),>,2:
return,"template,%s,%s(%s),;",%,(getType(functype[0]),,getType(functype[1]),,",,".join(map(getType,,args)).strip())
else:
#,print,"#,ignoring,non-templated,function:,%s",%,n
return,None
#,------------------------------------------------------------------------------
#,Stub,order,optimisation
#,------------------------------------------------------------------------------
stuborder,=,{}
pickleFile,=,"AOTStubs.pickle"
def,updateStubOrder(fn):
global,stuborder
count,=,0
for,info,in,open(fn).read().splitlines():
count,+=,1
bits,=,info.split("|")
n,=,demangle(bits[0].strip())
try:
stuborder[n],+=,int(bits[1])
except,KeyError:
stuborder[n],=,int(bits[1])
print,"#,Found,%d,stubs,in,%s",%,(count,,fn)
def,updateStubOrdering(files):
global,stuborder
global,pickleFile
if,os.path.exists(pickleFile):
f,=,open(pickleFile,,'rb')
stuborder,=,pickle.load(f)
f.close()
else:
print,"No,stub,ordering,file,found:,'%s'",%,os.path.abspath(pickleFile)
if,len(files),>,0:
for,fn,in,files:
updateStubOrder(fn)
f,=,open(pickleFile,,'wb')
pickle.dump(stuborder,,f)
f.close()
def,dumpStubOrderInfo(files):
global,stuborder
updateStubOrdering(files)
for,(s,c),in,stuborder.iteritems():
print,"%s,|,%d",%,(s,,c)
def,getStubSortOrder(stub):
global,stuborder
substubs,=,[]
substubs.append(,stub,)
#,CUIDADO!,Be,sure,to,get,the,number,of,spaces,correct,in,the,replacements
if,stub.find(",DOUBLE_ALLOCA_DECL"),!=,-1:
substubs.append(,stub.replace(",DOUBLE_ALLOCA_DECL",,""),)
substubs.append(,stub.replace(",DOUBLE_ALLOCA_DECL",,",,double,*"),)
for,substub,in,substubs:
try:
return,stuborder[substub]
except,KeyError:
pass
return,0
#,------------------------------------------------------------------------------
#,Header,Generation
#,------------------------------------------------------------------------------
stubs,=,[]
currentfile,=,None
stubcount,=,0
stubmax,=,4000
numstubheaders,=,30
def,subgroups(xs,,n):
result,=,[]
s,=,len(xs)/n
for,i,in,range(n-1):
result.append(xs[:s])
xs,=,xs[s:]
if,len(xs),>,0:
result.append(xs)
return,result
def,genCPPFiles(stubs,,filenum):
for,xs,in,subgroups(stubs,,numstubheaders):
hfile,=,"AOTStubs-%05d.cpp",%,filenum
hfile,=,open(hfile,,"w")
print,>>hfile,,standardHeader
print,>>hfile,,"#include,\"AOTStubs.h\""
for,x,in,xs:
print,>>hfile,,(x[1])
hfile.close()
filenum,+=,1
#,------------------------------------------------------------------------------
#,Stub,Generation
#,------------------------------------------------------------------------------
argdesctypes,=,["uint32_t",,"char*"]
vectortypes,=,["DoubleVectorObject*",,"IntVectorObject*",,"UIntVectorObject*",,"ObjectVectorObject*"]
objecttypes,=,["ScriptObject*",,"ArrayObject*",,"LLVMAtom"]
receivertypes,=,objecttypes,+,["String*",,"double"]
mosttypes,=	,["double",,"int32_t",,"uint32_t",,"String*",,"LLVMBool",,"Namespace*",,"QNameObject*"],+,objecttypes
alltypes,=,["void"],+,mosttypes
multinameIndexTypes,=,["LLVMMultinameIndex",,"Multiname*"]
multinameIndexTypesWithInt,=,multinameIndexTypes,+,["LLVMMultinameIndexMaybeInt",,"LLVMMultinamePtrMaybeInt"]
def,genPerms(xs):
if,len(xs),==,0:
return,[[]]
else:
p,=,genPerms(xs[1:])
return,[[x],+,y,for,x,in,xs[0],for,y,in,p]
def,genStubs(name,,types,,filterFunc=None):
perms,=,genPerms(types)
if,(filterFunc,is,not,None):
perms,=,filterFunc(perms)
if,len(types),==,1:
for,p,in,perms:
genCall((p[0],,name,,""))
else:
for,p,in,perms:
genCall((p[0],,name,,",,".join(p[1:])))
def,genCall(params):
global,stubs
decl,=,"template,%s,%s(%s),;",%,params
bisect.insort(stubs,,(-,getStubSortOrder(decl),,decl))
def,genPropRelatedWithIntOptDouble(name,,retTypes,,argTypes,=,[mosttypes]):
nameTypes,=,mosttypes,+,["LLVMUnusedParam"]
legalUintNameTypes,=,set(("double",,"int32_t",,"uint32_t",,"LLVMAtom"))
legalUintObjectTypes,=,set(objecttypes),
#,perm:,0:retType,,1:,MethodEnv*,,2:multinameIndex,,3:n,,4:ns,,5:obj
filterIntPermutations,=,lambda,perms:,filter(lambda,perm:,(perm[2],in,multinameIndexTypes),or,((perm[3],in,legalUintNameTypes),and,(perm[4],==,"LLVMUnusedParam"),and,(perm[5],in,legalUintObjectTypes)),,perms)
genStubs(name,,[retTypes,,["MethodEnv*,DOUBLE_ALLOCA_DECL"],,multinameIndexTypesWithInt,,nameTypes,,nameTypes],+,argTypes,,filterIntPermutations)
def,genPropRelatedWithVectorOpts(name,,retTypes,,argTypes):
nameTypes,=,mosttypes,+,["LLVMUnusedParam"]
legalUintNameTypes,=,set(("double",,"int32_t",,"uint32_t",,"LLVMAtom"))
legalUintObjectTypes,=,set(objecttypes,+,vectortypes)
#,perm:,0:retType,,1:,MethodEnv*,,2:multinameIndex,,3:n,,4:ns,,5:obj
filterIntPermutations,=,lambda,perms:,filter(lambda,perm:,(perm[2],in,multinameIndexTypes),or,((perm[3],in,legalUintNameTypes),and,(perm[4],==,"LLVMUnusedParam"),and,(perm[5],in,legalUintObjectTypes)),,perms)
genStubs(name,,[retTypes,,["MethodEnv*,DOUBLE_ALLOCA_DECL"],,multinameIndexTypesWithInt,,nameTypes,,nameTypes],+,argTypes,,filterIntPermutations)
def,genPropRelatedWithInt(name,,retTypes,,argTypes,=,[mosttypes]):
nameTypes,=,mosttypes,+,["LLVMUnusedParam"]
legalUintNameTypes,=,set(("double",,"int32_t",,"uint32_t",,"LLVMAtom"))
legalUintObjectTypes,=,set(objecttypes),
#,perm:,0:retType,,1:,MethodEnv*,,2:multinameIndex,,3:n,,4:ns,,5:obj
filterIntPermutations,=,lambda,perms:,filter(lambda,perm:,(perm[2],in,multinameIndexTypes),or,((perm[3],in,legalUintNameTypes),and,(perm[4],==,"LLVMUnusedParam"),and,(perm[5],in,legalUintObjectTypes)),,perms)
genStubs(name,,[retTypes,,["MethodEnv*"],,multinameIndexTypesWithInt,,nameTypes,,nameTypes],+,argTypes,,filterIntPermutations)
def,genPropRelated(name,,retTypes,,argTypes,=,[mosttypes]):
nameTypes,=,mosttypes,+,["LLVMUnusedParam"]
genStubs(name,,[retTypes,,["MethodEnv*"],,multinameIndexTypes,,nameTypes,,nameTypes],+,argTypes)
#,------------------------------------------------------------------------------
#,Main,Entrypoint
#,------------------------------------------------------------------------------
if,__name__,==,"__main__":
import,os.path
optParser,=,optparse.OptionParser(usage='usage:,%prog,[,options,],file1.abc,...,fileN.abc')
optParser.set_defaults()
optParser.allow_interspersed_args,=,True
optParser.add_option(,'-d',,'--dump',,dest="dump",,default,=,False)
optParser.add_option(,'-n',,'--numstubheaders',,dest="numstubheaders",,default,=,30)
optParser.add_option(,'-p',,'--picklefile',,dest="pickleFile",,default,=,None)
(opts,,args),=,optParser.parse_args()
if,opts.dump:
dumpStubOrderInfo(args)
sys.exit(0),,,,,,,,
if,opts.pickleFile:
pickleFile,=,opts.pickleFile
updateStubOrdering(args)
genStubs("abcOP_si8",,[["void"],,["MethodEnv*"],,["uint32_t",,"int32_t",,"LLVMAtom"],,["uint32_t",,"int32_t",,"double",,"LLVMAtom"]])
genStubs("abcOP_si16",,[["void"],,["MethodEnv*"],,["uint32_t",,"int32_t",,"LLVMAtom"],,["uint32_t",,"int32_t",,"double",,"LLVMAtom"]])
genStubs("abcOP_si32",,[["void"],,["MethodEnv*"],,["uint32_t",,"int32_t",,"LLVMAtom"],,["uint32_t",,"int32_t",,"double",,"LLVMAtom"]])
genStubs("abcOP_sf32",,[["void"],,["MethodEnv*"],,["double",,"int32_t",,"LLVMAtom"],,["uint32_t",,"int32_t",,"double",,"LLVMAtom"]])
genStubs("abcOP_sf64",,[["void"],,["MethodEnv*"],,["double",,"int32_t",,"LLVMAtom"],,["uint32_t",,"int32_t",,"double",,"LLVMAtom"]])
genStubs("abcOP_li8",,[["uint32_t",,"int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_li16",,[["uint32_t",,"int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_li32",,[["uint32_t",,"int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_lf32",,[["double"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_lf64",,[["double"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_sxi1",,[["uint32_t",,"int32_t",,"LLVMAtom"],,["MethodEnv*"],,["uint32_t",,"int32_t",,"LLVMAtom"]])
genStubs("abcOP_sxi8",,[["uint32_t",,"int32_t",,"LLVMAtom"],,["MethodEnv*"],,["uint32_t",,"int32_t",,"LLVMAtom"]])
genStubs("abcOP_sxi16",,[["uint32_t",,"int32_t",,"LLVMAtom"],,["MethodEnv*"],,["uint32_t",,"int32_t",,"LLVMAtom"]])
genPropRelatedWithInt("abcOP_deleteproperty",,["LLVMBool"])
genPropRelatedWithVectorOpts("abcOP_getproperty",,mosttypes,,argTypes,=,[mosttypes,+,vectortypes])
genPropRelatedWithVectorOpts("abcOP_getproperty_nonc",,mosttypes,,argTypes,=,[mosttypes,+,vectortypes])
genPropRelatedWithVectorOpts("abcOP_setproperty",,["void"],,argTypes,=,[mosttypes,+,vectortypes,,mosttypes])
genPropRelatedWithVectorOpts("abcOP_setproperty_nonc",,["void"],,argTypes,=,[mosttypes,+,vectortypes,,mosttypes])
genPropRelated("abcOP_initproperty",,["void"],,argTypes,=,[mosttypes,,mosttypes])
genPropRelated("abcOP_callproperty",,alltypes,,argTypes,=,[mosttypes,,argdesctypes,,["..."]])
	
genPropRelated("abcOP_constructprop",,mosttypes,,argTypes,=,[argdesctypes,,["..."]])
genPropRelated("abcOP_getdescendants",,mosttypes,,argTypes,=,[mosttypes])
genPropRelated("abcOP_getsuper",,mosttypes,,argTypes,=,[mosttypes])
genPropRelated("abcOP_setsuper",,["void"],,argTypes,=,[mosttypes,,mosttypes])
genPropRelated("abcOP_findproperty",,mosttypes,,argTypes,=,[["LLVMAtom*"],,["int32_t"],,["int32_t"]])
genPropRelated("abcOP_findpropstrict",,mosttypes,,argTypes,=,[["LLVMAtom*"],,["int32_t"],,["int32_t"]])
genStubs("abcOP_finddef",,[objecttypes,,["MethodEnv*"],,multinameIndexTypes])
genStubs("abcOP_methodEnvFromDispId",,[["MethodEnv*"],,["MethodEnv*"],,mosttypes,,["int32_t"]])
genStubs("abcOP_methodEnvFromBaseDispId",,[["MethodEnv*"],,["MethodEnv*"],,mosttypes,,["int32_t"]])
genStubs("abcOP_handlerFromMethodEnv",,[["int32_t*"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_call",,[mosttypes,,["MethodEnv*"],,objecttypes,,argdesctypes,,["..."]])
genStubs("abcOP_callmethod",,[alltypes,,["MethodEnv*"],,mosttypes,,["int32_t"],,argdesctypes,,["..."]])
genStubs("abcOP_callstatic",,[alltypes,,["MethodEnv*"],,["AbcEnv*"],,["int32_t"],,argdesctypes,,["..."]])
genPropRelated("abcOP_callsuper",,alltypes,,argTypes,=,[argdesctypes,,["..."]])
genStubs("abcOP_throwCallOfNonFunctionError",,[alltypes,,["MethodEnv*"]])
genStubs("abcOP_construct",,[mosttypes,,["MethodEnv*"],,mosttypes,,argdesctypes,,["..."]])
genStubs("abcOP_getglobalscope",,[mosttypes,,["MethodEnv*"]])
genStubs("abcOP_findInterfaceBinding",,[["int32_t"],,["int32_t"],,["const,uint32_t*",,"const,uint16_t*"]])
genStubs("abcOP_not",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_increment",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_decrement",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_increment_i",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_decrement_i",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_add",,[mosttypes,,["MethodEnv*,DOUBLE_ALLOCA_DECL"],,mosttypes,,mosttypes])
genStubs("abcOP_add_i",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_subtract",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_subtract_i",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_multiply",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_multiply_i",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_divide",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_modulo",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_bitand",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_bitor",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_bitxor",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_bitnot",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_lshift",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_rshift",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_urshift",,[["uint32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_negate",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_negate_i",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_true",,[["LLVMBool",,"LLVMAtom",,"int32_t"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_equals",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_strictequals",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_lessthan",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_greaterthan",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_greaterequals",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_lessequals",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_istype",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,["Traits**"],,mosttypes])
genStubs("abcOP_astype",,[mosttypes,,["MethodEnv*"],,multinameIndexTypes,,mosttypes])
genStubs("abcOP_istypelate",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_astypelate",,[mosttypes,,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_applytype",,[mosttypes,,["MethodEnv*"],,mosttypes,,argdesctypes,,["..."]])
genStubs("abcOP_typeof",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_instanceof",,[mosttypes,,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_in",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_coerce",,[mosttypes,,["MethodEnv*"],,["Traits**"],,mosttypes])
genStubs("abcOP_coerce_s",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_coerce_a",,[["LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_coerce_o",,[["LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_nullcheck",,[["void"],,["MethodEnv*"],,mosttypes,+,["AbcEnv*"],])
genStubs("abcOP_convert_o",,[["ScriptObject*",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_convert_b",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_convert_i",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_convert_u",,[["uint32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_convert_s",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_convert_d",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_convert_ns",,[["Namespace*",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_loadstring",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["uint32_t"]])
genStubs("abcOP_loadnamespace",,[["ScriptObject*",,"Namespace*",,"LLVMAtom"],,["MethodEnv*"],,["uint32_t"]])
genStubs("abcOP_loadundefined",,[mosttypes,,["MethodEnv*"]])
genStubs("abcOP_loadnull",,[mosttypes,,["MethodEnv*"]])
genStubs("abcOP_loadnan",,[mosttypes,,["MethodEnv*"]])
genStubs("abcOP_loadtrue",,[mosttypes,,["MethodEnv*"]])
genStubs("abcOP_loadfalse",,[mosttypes,,["MethodEnv*"]])
genStubs("abcOP_setcallee",,[["void"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_getslot",,[mosttypes,,["MethodEnv*"],,["char*"],,["ScriptObject*"]])
genStubs("abcOP_setslot",,[["void"],,["MethodEnv*"],,["char*"],,["ScriptObject*"],,mosttypes])
genStubs("abcOP_getslot_nonc",,[mosttypes,,["MethodEnv*"],,["char*"],,["ScriptObject*"]])
genStubs("abcOP_setslot_nonc",,[["void"],,["MethodEnv*"],,["char*"],,["ScriptObject*"],,mosttypes])
genStubs("abcOP_pushscope",,[["void"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_pushwith",,[["void"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_newactivation",,[objecttypes,,["MethodEnv*"]])
genStubs("abcOP_newobject",,[objecttypes,,["MethodEnv*"],,argdesctypes,,["..."]])
genStubs("abcOP_newarray",,[objecttypes,,["MethodEnv*"],,argdesctypes,,["..."]])
genStubs("abcOP_newcatch",,[objecttypes,,["MethodEnv*"],,["int32_t"],,["char*"]])
genStubs("abcOP_newfunction",,[objecttypes,,["MethodEnv*"],,["Traits**"],,,["Traits***"],,["uint32_t"],,["uint32_t"],,["LLVMAtom*"],,["uint32_t"]])
genStubs("abcOP_newclass",,[objecttypes,,["MethodEnv*"],,["Traits**"],,["Traits**"],,["Traits***"],,["uint32_t"],,["uint32_t"],,["LLVMAtom*"],,["ScriptObject*"],,["uint32_t"]])
genStubs("abcOP_throw",,[["void"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_xarg",,[mosttypes,,["MethodEnv*"],,["ExceptionFrame*"]])
genStubs("abcOP_hasnext",,[["LLVMBool",,"int32_t",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_hasnext2",,[["LLVMBool",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes,,["int32_t*"],,["LLVMAtom*"]])
genStubs("abcOP_nextname",,[mosttypes,,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_nextvalue",,[mosttypes,,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_dxnslate",,[["void"],,["MethodEnv*"],,["AOTMethodFrame*"],,mosttypes])
genStubs("abcOP_checkfilter",,[["void"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_esc_xattr",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_esc_xelem",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_upcast",,[mosttypes,,["MethodEnv*"],,mosttypes])
genStubs("abcOP_getouterscope",,[["ScriptObject*"],,["MethodEnv*"],,["uint32_t"]])
#,math,functions
genStubs("abcOP_Math_abs",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_acos",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_asin",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_atan",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_atan2",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_Math_ceil",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_cos",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_exp",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_floor",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_log",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_pow",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes,,mosttypes])
genStubs("abcOP_Math_round",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_sin",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_sqrt",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
genStubs("abcOP_Math_tan",,[["double",,"LLVMAtom"],,["MethodEnv*"],,mosttypes])
#,string,functions
genStubs("abcOP_String_charAt",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_charAt",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"]])
genStubs("abcOP_String_charCodeAt",,[["int32_t",,"double",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_charCodeAt",,[["int32_t",,"double",,"LLVMAtom"],,["MethodEnv*"],,["String*"]])
genStubs("abcOP_String_concat",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,["LLVMAtom"],,["int32_t"],,["ArrayObject*"]])
genStubs("abcOP_String_fromCharCode",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["LLVMAtom"],,["int32_t"],,["ArrayObject*"]])
genStubs("abcOP_String_indexOf",,[["int32_t",,"double",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,,mosttypes])
genStubs("abcOP_String_indexOf",,[["int32_t",,"double",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_lastIndexOf",,[["int32_t",,"double",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,,mosttypes])
genStubs("abcOP_String_lastIndexOf",,[["int32_t",,"double",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_localeCompare",,[["int32_t",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_match",,[["ArrayObject*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_replace",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,,mosttypes])
genStubs("abcOP_String_search",,[["int32_t",,"double",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_slice",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,,mosttypes])
genStubs("abcOP_String_slice",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_split",,[["ArrayObject*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,,mosttypes])
genStubs("abcOP_String_split",,[["ArrayObject*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,])
genStubs("abcOP_String_substr",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,,mosttypes])
genStubs("abcOP_String_substr",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_substring",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes,,mosttypes])
genStubs("abcOP_String_substring",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"],,mosttypes])
genStubs("abcOP_String_toLowerCase",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"]])
genStubs("abcOP_String_toUpperCase",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"]])
genStubs("abcOP_String_toLocaleLowerCase",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"]])
genStubs("abcOP_String_toLocaleUpperCase",,[["String*",,"LLVMAtom"],,["MethodEnv*"],,["String*"]])
#,support,for,numstubheaders
numstubheaders,=,int(opts.numstubheaders)
stubmax,=,len(stubs),/,int(opts.numstubheaders),;
if,(len(stubs),%,int(opts.numstubheaders)),==,0:
stubmax,=,stubmax,-,1,;
genCPPFiles(stubs,,0)
#,,,,,,,,,,,,,,,,,,,,,DO,NOT,EDIT,THIS,FILE
#
#,,This,file,has,been,generated,by,the,script,core/avmfeatures.as,
#,,from,a,set,of,configuration,parameters,in,that,file.
#
#,,If,you,feel,you,need,to,make,changes,below,,instead,edit,the,configuration
#,,file,and,rerun,it,to,get,a,new,version,of,this,file.
#
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
def,featureSettings(o):
args,=,""
arg,=,o.getBoolArg("debugger")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_DEBUGGER=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_DEBUGGER=0,"
arg,=,o.getBoolArg("debugger-stub")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_DEBUGGER_STUB=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_DEBUGGER_STUB=0,"
arg,=,o.getBoolArg("allocation-sampler")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_ALLOCATION_SAMPLER=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_ALLOCATION_SAMPLER=0,"
arg,=,o.getBoolArg("vtune")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_VTUNE=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_VTUNE=0,"
arg,=,o.getBoolArg("shark")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SHARK=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SHARK=0,"
if,o.getBoolArg("jit"):
args,+=,"-DAVMFEATURE_JIT=1,-DAVMFEATURE_WORDCODE_INTERP=0,-DAVMFEATURE_AOT=0,"
arg,=,o.getBoolArg("halfmoon")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_HALFMOON=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_HALFMOON=0,"
arg,=,o.getBoolArg("float")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_FLOAT=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_FLOAT=0,"
arg,=,o.getBoolArg("osr")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_OSR=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_OSR=0,"
arg,=,o.getBoolArg("compilepolicy")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_COMPILEPOLICY=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_COMPILEPOLICY=0,"
if,o.getBoolArg("aot"):
args,+=,"-DAVMFEATURE_AOT=1,-DAVMFEATURE_JIT=0,-DAVMFEATURE_ABC_INTERP=0,-DAVMFEATURE_WORDCODE_INTERP=0,"
arg,=,o.getBoolArg("buffer-guard")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_BUFFER_GUARD=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_BUFFER_GUARD=0,"
if,o.getBoolArg("abc-interp"):
args,+=,"-DAVMFEATURE_ABC_INTERP=1,-DAVMFEATURE_WORDCODE_INTERP=0,-DAVMFEATURE_AOT=0,"
if,o.getBoolArg("wordcode-interp"):
args,+=,"-DAVMFEATURE_WORDCODE_INTERP=1,-DAVMFEATURE_ABC_INTERP=0,-DAVMFEATURE_JIT=0,-DAVMFEATURE_AOT=0,"
arg,=,o.getBoolArg("threaded-interp")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_THREADED_INTERP=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_THREADED_INTERP=0,"
arg,=,o.getBoolArg("selftest")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SELFTEST=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SELFTEST=0,"
arg,=,o.getBoolArg("eval")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_EVAL=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_EVAL=0,"
arg,=,o.getBoolArg("telemetry")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_TELEMETRY=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_TELEMETRY=0,"
arg,=,o.getBoolArg("telemetry-sampler")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_TELEMETRY_SAMPLER=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_TELEMETRY_SAMPLER=0,"
arg,=,o.getBoolArg("protect-jitmem")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_PROTECT_JITMEM=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_PROTECT_JITMEM=0,"
arg,=,o.getBoolArg("shared-gcheap")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SHARED_GCHEAP=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SHARED_GCHEAP=0,"
arg,=,o.getBoolArg("use-system-malloc")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_USE_SYSTEM_MALLOC=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_USE_SYSTEM_MALLOC=0,"
arg,=,o.getBoolArg("cpp-exceptions")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_CPP_EXCEPTIONS=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_CPP_EXCEPTIONS=0,"
arg,=,o.getBoolArg("interior-pointers")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_INTERIOR_POINTERS=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_INTERIOR_POINTERS=0,"
arg,=,o.getBoolArg("heap-alloca")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_HEAP_ALLOCA=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_HEAP_ALLOCA=0,"
arg,=,o.getBoolArg("override-global-new")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_OVERRIDE_GLOBAL_NEW=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_OVERRIDE_GLOBAL_NEW=0,"
arg,=,o.getBoolArg("memory-profiler")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_MEMORY_PROFILER=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_MEMORY_PROFILER=0,"
arg,=,o.getBoolArg("cache-gqcn")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_CACHE_GQCN=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_CACHE_GQCN=0,"
arg,=,o.getBoolArg("valgrind")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_VALGRIND=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_VALGRIND=0,"
arg,=,o.getBoolArg("safepoints")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SAFEPOINTS=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SAFEPOINTS=0,"
arg,=,o.getBoolArg("interrupt-safepoint-poll")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_INTERRUPT_SAFEPOINT_POLL=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_INTERRUPT_SAFEPOINT_POLL=0,"
arg,=,o.getBoolArg("swf12")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF12=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF12=0,"
arg,=,o.getBoolArg("swf13")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF13=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF13=0,"
arg,=,o.getBoolArg("swf14")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF14=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF14=0,"
arg,=,o.getBoolArg("swf15")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF15=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF15=0,"
arg,=,o.getBoolArg("swf16")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF16=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF16=0,"
arg,=,o.getBoolArg("swf17")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF17=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF17=0,"
arg,=,o.getBoolArg("swf18")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF18=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF18=0,"
arg,=,o.getBoolArg("swf19")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF19=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF19=0,"
arg,=,o.getBoolArg("swf20")
if,(arg,==,True):
args,+=,"-DAVMFEATURE_SWF20=1,"
if,(arg,==,False):
args,+=,"-DAVMFEATURE_SWF20=0,"
arg,=,o.getBoolArg("sin-cos-nonfinite")
if,(arg,==,True):
args,+=,"-DAVMTWEAK_SIN_COS_NONFINITE=1,"
if,(arg,==,False):
args,+=,"-DAVMTWEAK_SIN_COS_NONFINITE=0,"
arg,=,o.getBoolArg("pepper-mac")
if,(arg,==,True):
args,+=,"-DAVMTWEAK_PEPPER_MAC=1,"
if,(arg,==,False):
args,+=,"-DAVMTWEAK_PEPPER_MAC=0,"
arg,=,o.getBoolArg("epoc-emulator")
if,(arg,==,True):
args,+=,"-DAVMTWEAK_EPOC_EMULATOR=1,"
if,(arg,==,False):
args,+=,"-DAVMTWEAK_EPOC_EMULATOR=0,"
if,o.getBoolArg("exact-tracing"):
args,+=,"-DAVMTWEAK_EXACT_TRACING=1,-DAVMTWEAK_SELECTABLE_EXACT_TRACING=0,"
if,o.getBoolArg("selectable-exact-tracing"):
args,+=,"-DAVMTWEAK_SELECTABLE_EXACT_TRACING=1,-DAVMTWEAK_EXACT_TRACING=0,"
arg,=,o.getBoolArg("heap-graph")
if,(arg,==,True):
args,+=,"-DAVMTWEAK_HEAP_GRAPH=1,"
if,(arg,==,False):
args,+=,"-DAVMTWEAK_HEAP_GRAPH=0,"
return,args
def,builtinBuildFlags(o):
buildFlags,=,""
arg,=,o.getBoolArg("float",,False,,False)
if,(arg,==,True):
buildFlags,+=,"-config,CONFIG::VMCFG_FLOAT=true,-abcfuture"
if,(arg,==,False):
buildFlags,+=,"-config,CONFIG::VMCFG_FLOAT=false"
return,buildFlags
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os,,sys,,re
from,stat,import,*
class,StatCache:
def,__init__(self):
self._dict,=,{}
def,getStat(self,,key):
if,not,key,in,self._dict:
try:
self._dict[key],=,os.stat(key)
except,OSError:
self._dict[key],=,None
return,self._dict[key]
def,getMTime(self,,key):
s,=,self.getStat(key),;
if,s,==,None:
return,0,;
return,s.st_mtime
_statcache,=,StatCache()
def,rebuildNeeded(file,,dependencies,,verbose):
"""Calculate,whether,a,file,needs,to,be,rebuilt,by,comparing,its,timestamp
against,a,list,of,dependencies.
returns,True,or,False"""
f,=,_statcache.getMTime(file)
if,f,==,0:
if,verbose:
print,>>sys.stderr,,"Target,%s,doesn't,exist",%,file
return,True
for,dep,in,dependencies:
d,=,_statcache.getMTime(dep)
if,d,==,0:
if,verbose:
print,>>sys.stderr,,"Target,%s,missing,dependency,%s",%,(file,,dep)
return,True
if,d,>,f:
if,verbose:
print,>>sys.stderr,,"Target,%s,older,than,dependency,%s",%,(file,,dep)
return,True
return,False
_fileFromLine,=,re.compile('^([^:]+):,FORCE')
def,rebuildsNeeded(files,,outfile,,verbose,,quiet):
"""Write,a,makefile,snippet,indicating,whether,object,files,need,to,be
rebuilt.
@param,files:,a,dictionary,of,{,'objfile',,'depfile',}"""
oldrebuilds,=,{}
do_write,=,False
if,os.path.exists(outfile):
istream,=,open(outfile,,"r")
for,line,in,istream:
m,=,_fileFromLine.match(line)
if,m:
oldrebuilds[m.group(1)],=,None
istream.close()
else:
if,not,quiet:
print,>>sys.stderr,,"Writing,%s:,doesn't,exist",%,outfile
do_write,=,True
newrebuilds,=,[]
for,(objfile,,depfile),in,files.items():
rebuild,=,True
try:
d,=,open(depfile,,"r")
rebuild,=,\
rebuildNeeded(objfile,,\
[line.rstrip("\n\r"),for,line,in,d.readlines()],
verbose)
d.close()
except,IOError:
if,verbose:
print,>>sys.stderr,,"IOError,attempting,to,check,rebuildNeeded,%s,%s",%,(objfile,,depfile)
pass
if,rebuild:
if,verbose:
print,>>sys.stderr,,"Scheduling,%s,for,rebuilding",%,objfile
newrebuilds.append(objfile)
if,objfile,in,oldrebuilds:
del,oldrebuilds[objfile]
else:
do_write,=,True
if,do_write,or,len(oldrebuilds):
if,not,quiet:
print,"Building,%s",%,outfile
ostream,=,open(outfile,,"w")
for,objfile,in,newrebuilds:
ostream.write(objfile,+,":,FORCE\n")
ostream.close()
if,__name__,==,"__main__":
import,sys
import,re
_argExpr,=,re.compile("\\.ii?$")
files,=,{}
verbose,=,'CALCDEPENDS_VERBOSE',in,os.environ
quiet,=,False
sys.argv.pop(0)
if,sys.argv[0],in,('-v',,'--verbose'):
verbose,=,True
sys.argv.pop(0)
elif,sys.argv[0],in,('-q',,'--quiet'):
quiet,=,True
sys.argv.pop(0)
outfile,=,sys.argv.pop(0)
for,objfile,in,sys.argv:
depfile,=,_argExpr.sub(".deps",,objfile)
files[objfile],=,depfile
rebuildsNeeded(files,,outfile,,verbose,,quiet)
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os
import,sys
import,build.process
import,re
def,writeFileIfChanged(path,,contents):
"""Write,some,contents,to,a,file.,Avoids,modifying,the,file,timestamp,if,the,file,contents,already,match."""
print,"Generating,",+,path,+,"...",
try:
outf,=,open(path,,"r")
oldcontents,=,outf.read()
outf.close()
if,oldcontents,==,contents:
print,"not,changed"
return
except,IOError:
pass
outf,=,open(path,,"w")
outf.write(contents)
outf.close()
print
#,Figure,out,TARGET,and,CPU,,a,la,config.guess
#,Do,cross-compilation,in,the,future,,which,will,require,HOST_OS,and,perhaps
#,other,settings
def,_configGuess(options):
ostest,=,sys.platform
cputest,=,build.process.run_for_output(['uname',,'-m'])
return,_configSub(ostest,,cputest,,options)
def,_configSub(ostest,,cputest,,options):
if,ostest.startswith('win'),or,ostest.startswith('cygwin'):
os,=,'windows'
elif,ostest.startswith('darwin'),or,ostest.startswith('apple-darwin'):
os,=,'darwin'
elif,ostest.startswith('linux'),or,ostest.startswith('pc-linux'):
os,=,'linux'
elif,ostest.startswith('sunos'):
os,=,'sunos'
elif,ostest.startswith('android'):
os,=,'android'
else:
raise,Exception('Unrecognized,OS:,',+,ostest)
if,re.search(r'^i(\d86|86pc|x86)$',,cputest):
cpu,=,'i686'
elif,re.search('^(x86_64|amd64)$',,cputest):
cpu,=,'x86_64'
elif,re.search('^(ppc64|powerpc64)$',,cputest):
cpu,=,'ppc64'
elif,re.search('^(ppc|powerpc|Power,Macintosh)$',,cputest):
cpu,=,'powerpc'
elif,re.search('sun',,cputest):
cpu,=,'sparc'
elif,re.search('arm',,cputest):
if,options.getBoolArg("arm-thumb",False):
cpu,=,'thumb2'
else:
cpu,=,'arm'
elif,re.search('thumb2',,cputest):
cpu,=,'thumb2'
elif,re.search('mips',,cputest):
cpu,=,'mips'
elif,re.search('sh4',,cputest):
cpu,=,'sh4'
else:
raise,Exception('Unrecognized,CPU:,',+,cputest)
return,(os,,cpu)
class,Configuration:
def,__init__(self,,topsrcdir,,options=None,,sourcefile=None,,objdir=None,
optimize=True,,debug=False):
self._topsrcdir,=,topsrcdir
if,objdir:
self._objdir,=,objdir
else:
self._objdir,=,os.getcwd()
self._optimize,=,optimize
self._debug,=,debug
self._host,=,_configGuess(options)
self._target,=,self._host
if,sourcefile:
srcfile,=,self._topsrcdir,+,"/",+,sourcefile
if,not,os.path.exists(srcfile):
raise,Exception("Source,file,",+,srcfile,+,",doesn't,exist.")
objfile,=,self._objdir,+,"/",+,sourcefile
if,os.path.exists(objfile):
raise,Exception("It,appears,you're,trying,to,build,in,the,source,directory.,,"
"(Source,file,",+,objfile,+,",exists,here.),,"
"You,must,use,an,object,directory,to,build,Tamarin.,,"
"Create,an,empty,directory,,cd,into,it,,and,run,this,configure.py,script,from,there.")
if,options:
o,=,options.getStringArg("optimize")
if,o,!=,None:
self._optimize,=,o
d,=,options.getStringArg("debug")
if,d,!=,None:
self._debug,=,d
if,options.host:
hostcpu,,hostos,=,options.host.split('-',,1)
self._host,=,_configSub(hostos,,hostcpu,,options)
if,options.target:
targetcpu,,targetos,=,options.target.split('-',,1)
self._target,=,_configSub(targetos,,targetcpu,,options)
self._acvars,=,{
#,Bug,606989:,GNU,make,forms,like,VPATH,treat,spaces,as
#,list,entry,delimiters.,,Easiest,way,around,this:,Use
#,rel.,path,when,refering,to,the,topsrcdir,in,Makefile
#,(not,fool-proof,,but,it,is,far,more,robust).
'topsrcdir':,os.path.relpath(self._topsrcdir),
'HOST_OS':,self._host[0],
'TARGET_OS':,self._target[0],
'TARGET_CPU':,self._target[1]
}
if,self._host[0],==,'windows':
self._acvars['topsrcdir'],=,toMSYSPath(self._topsrcdir)
if,self._debug:
self._acvars['ENABLE_DEBUG'],=,1
self._compiler,=,'GCC'
self._acvars.update({
'I_SUFFIX':,'i',
'II_SUFFIX':,'ii',
'OBJ_SUFFIX':,'o',
'PCH_SUFFIX':,'gch',
'LIB_PREFIX':,'lib',
'LIB_SUFFIX':,'a',
'DLL_SUFFIX':,'so',
'PROGRAM_SUFFIX':,'',
'USE_COMPILER_DEPS':,1,
'USE_GCC_PRECOMPILED_HEADERS':,1,
'EXPAND_LIBNAME',:,'-l$(1)',
'EXPAND_DLLNAME',:,'-l$(1)',
'OUTOPTION',:,'-o,',
'LIBPATH':,'-L'
})
if,self._target[0],==,'windows':
self._compiler,=,'VS'
del,self._acvars['USE_COMPILER_DEPS']
del,self._acvars['USE_GCC_PRECOMPILED_HEADERS']
static_crt,=,options.getBoolArg('static-crt')
self._acvars.update({
'OBJ_SUFFIX',,,:,'obj',
'LIB_PREFIX',,,:,'',
'LIB_SUFFIX',,,:,'lib',
'DLL_SUFFIX',,,:,'dll',
'PROGRAM_SUFFIX':,'.exe',
'CPPFLAGS',,,,,:,(self._debug,and,'-MTd',or,'-MT'),or,(self._debug,and,'-MDd',or,'-MD'),
'CXX',,,,,,,,,,:,'cl.exe,-nologo',
'CXXFLAGS',,,,,:,'-TP',
'CC',,,,,,,,,,,:,'cl.exe,-nologo',
'CFLAGS',,,,,,,:,'-TC',
'DLL_CFLAGS',,,:,'',
'AR',,,,,,,,,,,:,'lib.exe,-nologo',
'LD',,,,,,,,,,,:,'link.exe,-nologo',
'LDFLAGS',,,,,,:,'',
'MKSTATICLIB',,:,'$(AR),-OUT:$(1)',
'MKDLL',,,,,,,,:,'$(LD),-DLL,-OUT:$(1)',
'MKPROGRAM',,,,:,'$(LD),-OUT:$(1)',
'EXPAND_LIBNAME',:,'$(1).lib',
'EXPAND_DLLNAME',:,'$(1).lib',
'OUTOPTION',:,'-Fo',
'LIBPATH',,,:,'-LIBPATH:'
})
	,,,,if,self._target[1],==,"thumb2":
self._acvars.update({'LDFLAGS',:,'-NODEFAULTLIB:"oldnames.lib"'})
if,sys.platform.startswith('cygwin'):
self._acvars.update({'ASM',:,'$(topsrcdir)/build/cygwin-wrapper.sh,armasm.exe,-nologo'})
else:
self._acvars.update({'ASM',:,'armasm.exe,-nologo'})
if,self._target[1],==,"arm":
self._acvars.update({'LDFLAGS',:,'-NODEFAULTLIB:"oldnames.lib",-ENTRY:"mainWCRTStartup"'})
if,sys.platform.startswith('cygwin'):
self._acvars.update({'ASM',:,'$(topsrcdir)/build/cygwin-wrapper.sh,armasm.exe,-nologo,-arch,5T'})
else:
self._acvars.update({'ASM',:,'armasm.exe,-nologo,-arch,5T'})
if,self._target[1],==,"x86_64":
if,sys.platform.startswith('cygwin'):
self._acvars.update({'MASM',:,'$(topsrcdir)/build/cygwin-wrapper.sh,ml64.exe,-nologo,-c,'})
else:
self._acvars.update({'MASM',:,'ml64.exe,-nologo,-c,'})
if,sys.platform.startswith('cygwin'):
self._acvars.update({'CXX',,,,,,,,,,:,'$(topsrcdir)/build/cygwin-wrapper.sh,cl.exe,-nologo'})
self._acvars.update({'CC',,,,,,,,,,,:,'$(topsrcdir)/build/cygwin-wrapper.sh,cl.exe,-nologo'})
#,Hackery!,Make,assumptions,that,we,want,to,build,with,GCC,3.3,on,MacPPC
#,and,GCC4,on,MacIntel
elif,self._target[0],==,'darwin':
self._acvars.update({
'DLL_SUFFIX',,,:,'dylib',
'CPPFLAGS',,,,,:,'-pipe',
'CXXFLAGS',,,,,:,'',
'CFLAGS',,,,,,,:,'',
'DLL_CFLAGS',,,:,'-fPIC',
'LDFLAGS',,,,,,:,'-framework,CoreServices',
'AR',,,,,,,,,,,:,'libtool',
'MKSTATICLIB',,:,'$(AR),-static,-o,$(1)',
'MKDLL',,,,,,,,:,'$(CXX),-dynamiclib,-single_module,-install_name,@executable_path/$(1),-o,$(1)',
'MKPROGRAM',,,,:,'$(CXX),-o,$(1)',
'POSTMKPROGRAM':,'dsymutil,$(1)'
})
#,-Wno-trigraphs,-Wreturn-type,-Wnon-virtual-dtor,-Wmissing-braces,-Wparentheses,-Wunused-label,,-Wunused-parameter,-Wunused-variable,-Wunused-value,-Wuninitialized
if,'CXX',in,os.environ:
self._acvars['CXX'],=,os.environ['CXX']
elif,self._target[1],==,'i686':
self._acvars['CXX'],=,'g++'
self._acvars['CXXFLAGS'],+=,',-arch,i686,'
self._acvars['LDFLAGS'],+=,',-arch,i686,'
elif,self._target[1],==,'x86_64':
self._acvars['CXX'],=,'g++'
self._acvars['CXXFLAGS'],+=,',-arch,x86_64,'
self._acvars['LDFLAGS'],+=,',-arch,x86_64,'
elif,self._target[1],==,'powerpc':
self._acvars['CXX'],=,'g++'
self._acvars['CXXFLAGS'],+=,',-arch,ppc,'
self._acvars['LDFLAGS'],+=,',-arch,ppc,'
elif,self._target[1],==,'ppc64':
self._acvars['CXX'],=,'g++'
self._acvars['CXXFLAGS'],+=,',-arch,ppc64,'
self._acvars['LDFLAGS'],+=,',-arch,ppc64,'
else:
raise,Exception("Unexpected,Darwin,processor,while,setting,CXX.")
if,'CC',in,os.environ:
self._acvars['CC'],=,os.environ['CC']
elif,self._target[1],==,'i686':
self._acvars['CC'],=,'gcc'
self._acvars['CFLAGS'],+=,',-arch,i686,'
elif,self._target[1],==,'x86_64':
self._acvars['CC'],=,'gcc'
self._acvars['CFLAGS'],+=,',-arch,x86_64,'
elif,self._target[1],==,'powerpc':
self._acvars['CC'],=,'gcc'
self._acvars['CFLAGS'],+=,',-arch,ppc,'
elif,self._target[1],==,'ppc64':
self._acvars['CC'],=,'gcc'
self._acvars['CFLAGS'],+=,',-arch,ppc64,'
else:
raise,Exception("Unexpected,Darwin,processor,while,setting,CC.")
elif,self._target[0],==,'linux':
self._acvars.update({
'CPPFLAGS',,,,,:,os.environ.get('CPPFLAGS',,''),
'CXX',,,,,,,,,,:,os.environ.get('CXX',,'g++'),
'CXXFLAGS',,,,,:,os.environ.get('CXXFLAGS',,''),
'CC',,,,,,,,,,,:,os.environ.get('CC',,'gcc'),
'CFLAGS',,,,,,,:,os.environ.get('CFLAGS',,''),
'DLL_CFLAGS',,,:,'-fPIC',
'LD',,,,,,,,,,,:,os.environ.get('LD',,'ar'),
'LDFLAGS',,,,,,:,os.environ.get('LDFLAGS',,''),
'AR',,,,,,,,,,,:,os.environ.get('AR',,'ar'),
'MKSTATICLIB',,:,'$(AR),cr,$(1)',
'MKDLL',,,,,,,,:,'$(CXX),-shared,-o,$(1)',
'MKPROGRAM',,,,:,'$(CXX),-o,$(1)'
})
if,self._target[1],==,"mips":
self._acvars.update({'CXXFLAGS',:,''})
self._acvars.update({'LDFLAGS',:,''})
self._acvars.update({'zlib_EXTRA_CFLAGS',:,''})
elif,self._target[0],==,'android':
self._acvars.update({
'CPPFLAGS',,,,,:,'',
'CXXFLAGS',,,,,:,'',
'DLL_CFLAGS',,,:,'',
'LDFLAGS',,,,,,:,'-lstlport_static,-lc,-lm,-lstdc++,-lgcc,',
'AR',,,,,,,,,,,:,'arm-linux-androideabi-ar',
'AS',,,,,,,,,,,:,'arm-linux-androideabi-as',
'MKSTATICLIB',,:,'$(AR),-rcs,$(1)',
'MKDLL',,,,,,,,:,'$(CXX),-shared,-o,$(1)',
'MKPROGRAM',,,,:,'$(CXX),$(LFLAGS_HEADLESS),$(SEARCH_DIRS),-o,$(1)',
'STRIP',,,,,,,,:,'arm-linux-androideabi-strip',
'LD',,,,,,,,,,,:,'arm-linux-androideabi-ld',
'CXX',,,,,,,,,,:,'arm-linux-androideabi-g++',
'CC',,,,,,,,,,,:,'arm-linux-androideabi-gcc'
})
elif,self._target[0],==,'sunos':
if,options.getBoolArg("gcc",,False):
self._acvars.update({
'CPPFLAGS',,,,,:,os.environ.get('CPPFLAGS',,''),+,"-DBROKEN_OFFSETOF",
'CXX',,,,,,,,,,:,os.environ.get('CXX',,'g++'),
'CXXFLAGS',,,,,:,os.environ.get('CXXFLAGS',,''),
'CC',,,,,,,,,,,:,os.environ.get('CC',,'gcc'),
'CFLAGS',,,,,,,:,os.environ.get('CFLAGS',,''),
'DLL_CFLAGS',,,:,'-fPIC',
'LD',,,,,,,,,,,:,'ar',
'LDFLAGS',,,,,,:,'',
'MKSTATICLIB',,:,'$(AR),cr,$(1)',
'MKDLL',,,,,,,,:,'$(CXX),-shared,-o,$(1)',
'MKPROGRAM',,,,:,'$(CXX),-o,$(1)'
})
else:
self._compiler,=,'SunStudio'
self._acvars.update({
'I_SUFFIX':,'i',
'II_SUFFIX':,'i',
'CPPFLAGS',,,,,:,'',
'CXX',,,,,,,,,,:,'CC',
'CXXFLAGS',,,,,:,'',
'CC',,,,,,,,,,,:,'cc',
'CFLAGS',,,,,,,:,'',
'LD',,,,,,,,,,,:,'ar',
'LDFLAGS',,,,,,:,'',
'MKSTATICLIB',,:,'$(AR),cr,$(1)',
'MKPROGRAM',,,,:,'$(CXX),-o,$(1)'
})
self._acvars['COMPILER'],=,self._compiler
def,getObjDir(self):
"""Returns,the,build,directory,being,configured."""
return,self._objdir
def,getHost(self):
"""Returns,an,(os,,cpu),tuple,of,the,host,machine."""
return,self._host
def,getTarget(self):
"""Returns,an,(os,,cpu),tuple,of,the,target,machine."""
return,self._target
def,getCompiler(self):
"""Returns,the,compiler,in,use,,as,a,string.
Possible,values,are:
-,'GCC':,the,GNU,Compiler,Collection,,including,GCC,and,G++
-,'VS':,Microsoft,Visual,Studio
-,'SunStudio':,Sun,Studio"""
return,self._compiler
def,getDebug(self):
return,self._debug
def,subst(self,,name,,value,,recursive=True):
'''Add/substitute,Makefile,variables:
recursive,refers,to,the,make,variable,flavor:
True,,:,(default),recursively,expanded,var,,defined,with,"="
False,:,simply,expanded,var,,defined,with,":="
more,info:,http://www.gnu.org/software/make/manual/make.html#Flavors
'''
self._acvars[name],=,{'value':value,,'recursive':recursive}
_confvar,=,re.compile("@([^@]+)@")
def,generate(self,,makefile):
outpath,=,self._objdir,+,"/",+,makefile
contents,=,''
for,(k,v),in,self._acvars.iteritems():
if,type(v),==,dict:,#,not,all,_acvars,are,added,with,self.subst
contents,+=,'%s%s%s\n',%,(k,,'=',if,v['recursive'],else,':=',
v['value'])
else:
contents,+=,'%s=%s\n',%,(k,v)
contents,+=,"\n\ninclude,$(topsrcdir)/build/config.mk\n",\
"include,$(topsrcdir)/manifest.mk\n",\
"include,$(topsrcdir)/build/rules.mk\n"
writeFileIfChanged(outpath,,contents)
def,toMSYSPath(path):
if,sys.platform.startswith('cygwin'):
return,path
elif,path[1],!=,':':
raise,ValueError("win32,path,without,drive,letter!,%s",%,path)
else:
return,'/%s%s',%,(path[0],,path[2:].replace('\\',,'/'))
#!/usr/bin/env,python
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
"""Reads,stdin,and,extracts,a,list,of,all,header,dependencies,to
a,file.,,It,requires,exactly,one,argument.
The,input,is,expected,to,take,form,of,C,preprocessor,output,,where
paths,to,originating,input,source,files,are,indicated,via,the,form
#,LINENO,"PATH"
The,argument,to,the,script,is,the,target,file,to,be,overwritten.
It,will,contain,the,extracted,dependencies,(unquoted,absolute,paths).
Relative,paths,generated,by,the,C,preprocessor,are,resolved,relative
to,the,current,working,directory,(see,Bug,652544)."""
import,re
import,sys
import,os
if,len(sys.argv),!=,2:
raise,Exception("Unexpected,command,line,argument.")
outfile,,,,,,,,,,=,sys.argv[1]
relative_to_dir,,=,os.getcwd()
_lineExp,=,re.compile("#(?:line)?,?\d+,\"([^\"<>]+[^/])\""),;
deps,=,set()
for,line,in,sys.stdin:
m,=,_lineExp.match(line)
if,m:
path,=,m.group(1)
if,not,os.path.isabs(path):
path,=,os.path.abspath(os.path.join(relative_to_dir,,path))
deps.add(path)
ostream,=,open(outfile,,"w")
ostream.write("\n".join(deps))
ostream.close()
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,sys
import,re
_target,=,re.compile("^--target=(.*)$")
_host,=,re.compile("^--host=(.*)$")
_ignore,=,re.compile(r"^--(srcdir|cache-file)=")
_arg,=,re.compile(r"^--(enable|disable|with|without)-([\w-]+)(?:=(.*)|$)$")
_yes,=,re.compile("^(t|true|yes|y|1)$",,re.I)
_no,=,re.compile("^(f|false|no|n|0)$",,re.I)
_help,=,re.compile("^(-h|--help)$")
_sdk,=,re.compile("^--mac-sdk=(.*)$")
_xcode,=,re.compile("^--mac-xcode=(.*)$")
_arm_arch,=,re.compile("^--arm-arch=(.*)$")
class,Options:
def,__init__(self,,argv,=,sys.argv):
self._args,=,{}
self.target,=,None
self.host,=,None
self.ignore_unknown_flags,=,False
self.help,=,False
self._allargs,=,{}
self.mac_sdk,=,None
self.mac_xcode,=,None
self.arm_arch,=,"armv7-a"
#,These,arguments,don't,go,in,_allargs,,and,they,aren't,standard
#,--enable/--disable,switches.,The,getHelp,method,needs,a,list,of,these
#,special,arguments.
#,The,argument,names,must,correspond,exactly,to,the,property,initializations
#,above,or,"--help",will,not,work.
self._specialargs,=,(,,,,,,,,,,,,,,,\
"target",,,,,,,,,,,,,,,,,,,,\
"host",,,,,,,,,,,,,,,,,,,,,,\
"ignore_unknown_flags",,,,,,\
"mac_sdk",,,,,,,,,,,,,,,,,,,\
"mac_xcode",,,,,,,,,,,,,,,,,\
"arm_arch",,,,,,,,,,,,,,,,,,\
)
unknown_args,=,[]
for,arg,in,argv[1:]:
m,=,_target.search(arg)
if,m:
self.target,=,m.group(1)
continue
m,=,_host.search(arg)
if,m:
self.host,=,m.group(1)
continue
m,=,_sdk.search(arg)
if,m:
self.mac_sdk,=,m.group(1)
continue
m,=,_xcode.search(arg)
if,m:
self.mac_xcode,=,m.group(1)
continue
m,=,_arm_arch.search(arg)
if,m:
self.arm_arch,=,m.group(1)
continue
if,_ignore.search(arg),is,not,None:
continue
if,arg,==,'--ignore-unknown-flags':
self.ignore_unknown_flags,=,True
continue
if,_help.search(arg),is,not,None:
self.help,=,True
continue
m,=,_arg.search(arg)
if,not,m:
unknown_args.append(arg)
continue
(t,,n,,v),=,m.groups()
if,type(v),==,str:
if,_yes.search(v):
v,=,True
if,_no.search(v):
v,=,False
if,t,==,"enable",or,t,==,"with":
if,v:
self._args[n],=,v
else:
self._args[n],=,True
elif,t,==,"disable",or,t,==,"without":
if,v:
raise,Exception("--disable-",+,n,+,",does,not,take,a,value.")
self._args[n],=,False
if,unknown_args,and,not,self.ignore_unknown_flags:
raise,Exception("Unrecognized,command,line,parameter(s):,"
+,',,'.join(unknown_args))
def,getBoolArg(self,,name,,default=None,,remove=True):
self._allargs[name],=,default
if,not,name,in,self._args:
return,default
val,=,self._args[name]
if,remove:
del,self._args[name]
if,type(val),==,bool:
return,val
raise,Exception("Unrecognized,value,for,option,'",+,name,+,"'.")
def,getStringArg(self,,name,,default=None):
self._allargs[name],=,default
if,not,name,in,self._args:
return,default
val,=,self._args[name]
del,self._args[name]
return,val
def,peekBoolArg(self,,name,,default=None):
return,Options.getBoolArg(self,name,default,False)
def,peekStringArg(self,,name,,default=None):
return,Options.getStringArg(self,name,default,False)
def,getHelp(self):
ret,=,''
for,opt,default,in,sorted(self._allargs.iteritems()):
if,default,==,True:
ret,+=,"%-35s,[=enabled]\n",%,("--enable-%s",%,opt)
else:
ret,+=,"%-35s,[=not,enabled]\n",%,("--enable-%s",%,opt)
#,Print,special-case,options,that,aren't,standard,--enable/--disable
#,switches.
for,opt,in,self._specialargs:
arg,=,"--%s=...",%,(opt)
ret,+=,"%-35s,[=%s]\n",%,(arg,,getattr(self,opt))
return,ret
def,finish(self):
if,not,self.ignore_unknown_flags:
if,len(self._args):
raise,Exception("Unrecognized,command,line,parameters:,",+
",,".join(self._args.keys()))
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
import,os
def,run_for_output(cmd):
if,type(cmd),==,list:
#,XXX,need,to,escape,arguments,better...,am,I,in,a,shell?
cmd,=,",".join(cmd)
pipe,=,os.popen(cmd,,"r")
output,=,pipe.read()
exitval,=,pipe.close()
if,(exitval):
raise,Exception("Command,failed:,'",+,cmd,+,"'")
return,output
#,-*-,Mode:,Python,;,indent-tabs-mode:,nil,-*-
#,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
__all__,=,[
'build',
'process',
'getopt'
]
#,-*-,python,-*-
#,ex:,set,syntax=python:
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,buildbot.process,import,factory
from,buildbot.steps.source,import,Mercurial
from,buildbot.steps.shell,import,*
from,custom.buildbot_ext.steps.shellAddons,import,*
from,buildbot.steps.trigger,import,Trigger
from,commonsteps,import,*
class,argo:
HG_URL,=,"http://asteam.macromedia.com/hg/tamarin-redux-argo/"
BRANCH,=,"tamarin-argo"
#######,SCHEDULERS
from,buildbot.scheduler,import,*
#,custom.buildbot_ext.scheduler,import,MUST,happen,after,importing,buildbot.scheduler
from,custom.buildbot_ext.scheduler,import,*
compile,=,Scheduler(name="compile-argo",,branch=BRANCH,,treeStableTimer=30,,fileIsImportant=startCompile,,properties={'silent':'false'},
builderNames=["windows-compile-argo",,"windows64-compile-argo",
"mac-intel-10.4-compile-argo",,"mac-intel-10.5-compile-argo",,"mac64-intel-compile-argo",
"mac-ppc-10.4a-compile-argo",,"mac-ppc-10.4b-compile-argo",,
"mac-ppc-10.5a-compile-argo",,"mac-ppc-10.5b-compile-argo",,
"mac64-ppc-compile-argo",,"mac64b-ppc-compile-argo",
"linux-compile-argo",,"linux64-compile-argo",
"winmobile-emulator-compile-argo",
"solaris-sparc-compile-argo",,"solaris-sparc2-compile-argo",
"android-compile-argo",
"linux-arm-compile-argo",,"linux-arm2-compile-argo"])
smoke,=,BuilderDependent(name="smoke-argo",upstream=compile,,callbackInterval=60,,properties={'silent':'false'},
builderNames=["windows-smoke-argo",,"windows64-smoke-argo",
"mac-intel-10.4-smoke-argo",,"mac-intel-10.5-smoke-argo",,"mac64-intel-smoke-argo",
"mac-ppc-10.4a-smoke-argo",,"mac-ppc-10.4b-smoke-argo",,
"mac-ppc-10.5a-smoke-argo",,"mac-ppc-10.5b-smoke-argo",,
"mac64-ppc-smoke-argo",,"mac64b-ppc-smoke-argo",
"linux-smoke-argo",,"linux64-smoke-argo",
"winmobile-emulator-smoke-argo",
"solaris-sparc-smoke-argo",,"solaris-sparc2-smoke-argo",
"android-smoke-argo",
"linux-arm-smoke-argo",,"linux-arm2-smoke-argo"],
builderDependencies=[
["windows-smoke-argo",,"windows-compile-argo"],,
["windows64-smoke-argo",,"windows64-compile-argo"],,
["mac-intel-10.4-smoke-argo",,"mac-intel-10.4-compile-argo"],,
["mac-intel-10.5-smoke-argo",,"mac-intel-10.5-compile-argo"],
["mac64-intel-smoke-argo",,"mac64-intel-compile-argo"],
["mac-ppc-10.4a-smoke-argo",,"mac-intel-10.4-compile-argo"],
["mac-ppc-10.4b-smoke-argo",,"mac-intel-10.4-compile-argo"],
["mac-ppc-10.5a-smoke-argo",,"mac-intel-10.5-compile-argo"],
["mac-ppc-10.5b-smoke-argo",,"mac-intel-10.5-compile-argo"],
["mac64-ppc-smoke-argo",,"mac64-intel-compile-argo"],
["mac64b-ppc-smoke-argo",,"mac64-intel-compile-argo"],
["linux-smoke-argo",,"linux-compile-argo"],
["linux64-smoke-argo",,"linux64-compile-argo"],
["winmobile-emulator-smoke-argo",,"winmobile-emulator-compile-argo"],
["solaris-sparc-smoke-argo",,"solaris-sparc-compile-argo"],
["solaris-sparc2-smoke-argo",,"solaris-sparc-compile-argo"],
["android-smoke-argo","android-compile-argo"],
["linux-arm-smoke-argo","linux-compile-argo"],
["linux-arm2-smoke-argo","linux-compile-argo"],
])
test,=,BuilderDependent(name="test-argo",upstream=smoke,,callbackInterval=60,,properties={'silent':'false'},
builderNames=["windows-test-argo",,"windows64-test-argo",
"mac-intel-10.4-test-argo",,"mac-intel-10.5-test-argo",,"mac64-intel-test-argo",
"mac-ppc-10.4a-test-argo",,"mac-ppc-10.4b-test-argo",,
"mac-ppc-10.5a-test-argo",,"mac-ppc-10.5b-test-argo",,
"mac64-ppc-test-argo",,"mac64b-ppc-test-argo",
"linux-test-argo",,"linux64-test-argo",
"winmobile-emulator-test-argo",
"solaris-sparc-test-argo",,"solaris-sparc2-test-argo",
"android-test-argo",
"linux-arm-test-argo",,"linux-arm2-test-argo"],
builderDependencies=[
["windows-test-argo",,"windows-smoke-argo"],,
["windows64-test-argo",,"windows64-smoke-argo"],,
["mac-intel-10.4-test-argo",,"mac-intel-10.4-smoke-argo"],,
["mac-intel-10.5-test-argo",,"mac-intel-10.5-smoke-argo"],
["mac64-intel-test-argo",,"mac64-intel-smoke-argo"],
["mac-ppc-10.4a-test-argo",,"mac-ppc-10.4a-smoke-argo"],
["mac-ppc-10.4b-test-argo",,"mac-ppc-10.4b-smoke-argo"],
["mac-ppc-10.5a-test-argo",,"mac-ppc-10.5a-smoke-argo"],
["mac-ppc-10.5b-test-argo",,"mac-ppc-10.5b-smoke-argo"],
["mac64-ppc-test-argo",,"mac64-ppc-smoke-argo"],
["mac64b-ppc-test-argo",,"mac64b-ppc-smoke-argo"],
["linux-test-argo",,"linux-smoke-argo"],
["linux64-test-argo",,"linux64-smoke-argo"],
["winmobile-emulator-test-argo",,"winmobile-emulator-smoke-argo"],
["solaris-sparc-test-argo",,"solaris-sparc-smoke-argo"],
["solaris-sparc2-test-argo",,"solaris-sparc2-smoke-argo"],
["android-test-argo",,"android-smoke-argo"],
["linux-arm-test-argo",,"linux-arm-smoke-argo"],
["linux-arm2-test-argo",,"linux-arm2-smoke-argo"],
])
performance,=,PhaseTwoScheduler(name="performance-argo",,branch="%s-performance",%,BRANCH,,treeStableTimer=30,,properties={'silent':'false'},
fileIsImportant=startPerformanceRun,,priority=1,,changeDir="changes/perf/processed",
builderNames=["windows-performance-argo",
"mac-performance-argo",,"mac64-performance-argo",
"mac-ppc-performance-argo",
"linux-performance-argo",
"winmobile-performance-argo",
"android-performance-argo"],
builderDependencies=[
["windows-performance-argo",,"windows-test-argo"],,
["mac-performance-argo",,"mac-intel-10.5-test-argo"],
["mac64-performance-argo",,"mac64-intel-test-argo"],
["mac-ppc-performance-argo",,"mac-ppc-10.5a-test-argo"],
["linux-performance-argo",,"linux-test-argo"],
["winmobile-performance-argo",,"winmobile-emulator-test-argo"],
["android-performance-argo",,"android-test-argo"],,
])
deep,=,PhaseTwoScheduler(name="deep-argo",,branch="%s-deep",%,BRANCH,,treeStableTimer=30,,properties={'silent':'false'},
fileIsImportant=startCompile,,priority=1,,changeDir="changes/deep/processed",
builderNames=[
"windows-deep-argo",
"windows-p3-deep-argo",
"windows-frr-argo",
"mac-ppc-deep-argo",
"solaris-sparc-deep-argo",
"windows64-deep-argo",
"linux-deep-argo",
"linux-arm-deep-argo",
"winmobile-emulator-deep-argo",
],
builderDependencies=[
["linux-deep-argo",,"linux-test-argo"],
["linux-arm-deep-argo",,"linux-arm-test-argo"],
["windows-deep-argo",,"windows-test-argo"],
["windows-p3-deep-argo",,"windows-test-argo"],
["windows-frr-argo",,"windows-test-argo"],,
["mac-ppc-deep-argo",,"mac-ppc-10.5a-test-argo"],,
["solaris-sparc-deep-argo",,"solaris-sparc-test-argo"],,
["windows64-deep-argo",,"windows64-test-argo"],,
["winmobile-emulator-deep-argo",,"winmobile-emulator-test-argo"],
])
schedulers,=,[compile,,smoke,,test,,performance,,deep]
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,COMPILE,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
#####################################
####,builder,for,windows-compile,####
#####################################
windows_compile_factory,=,factory.BuildFactory()
windows_compile_factory.addStep(sync_clean)
windows_compile_factory.addStep(sync_clone(url=HG_URL))
windows_compile_factory.addStep(sync_update)
windows_compile_factory.addStep(bb_slaveupdate(slave="windows"))
windows_compile_factory.addStep(compile_builtin)
windows_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="--enable-shell",,upload="false"))
windows_compile_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode",,args="--enable-shell,--enable-wordcode-interp",,upload="false"))
windows_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-shell,--enable-debug",,upload="false"))
windows_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s",,args="--enable-shell,--enable-debugger",,upload="false"))
windows_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd",,args="--enable-shell,--enable-debug,--enable-debugger",,upload="false"))
windows_compile_factory.addStep(BuildShellCommand(
command=['../all/file-check.py',,'../../../../../repo'],
env={'branch':,WithProperties('%s','branch')},
description='running,file-check,against,source...',
descriptionDone='finished,file-check.',
name="FileCheck",
workdir="../repo/build/buildbot/slaves/scripts")
)
windows_compile_factory.addStep(compile_buildcheck)
windows_compile_factory.addStep(util_upload_asteam)
windows_compile_factory.addStep(BuildShellCommand(
command=['./build-release-sizereport.sh',WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='starting,win,release-sizereport,build...',
descriptionDone='finished,win,release-sizereport,build.',
name='Build_Release_sizereport',
workdir="../repo/build/buildbot/slaves/scripts")
)
windows_compile_builder,=,{
'name':,"windows-compile-argo",
'slavename':,"windows",
'factory':,windows_compile_factory,
'builddir':,'./argo-windows-compile',
}
#######################################
####,builder,for,windows64-compile,####
#######################################
windows_64_compile_factory,=,factory.BuildFactory()
windows_64_compile_factory.addStep(sync_clean)
windows_64_compile_factory.addStep(sync_clone(url=HG_URL))
windows_64_compile_factory.addStep(sync_update)
windows_64_compile_factory.addStep(bb_slaveupdate(slave="windows64"))
windows_64_compile_builder,=,{
'name':,"windows64-compile-argo",
'slavename':,"windows64",
'factory':,windows_64_compile_factory,
'builddir':,'./argo-windows64-compile',
}
############################################
####,builder,for,mac-intel-10_4-compile,####
############################################
mac_intel_104_compile_factory,=,factory.BuildFactory()
mac_intel_104_compile_factory.addStep(sync_clean)
mac_intel_104_compile_factory.addStep(sync_clone(url=HG_URL))
mac_intel_104_compile_factory.addStep(sync_update)
mac_intel_104_compile_factory.addStep(bb_slaveupdate(slave="mac-intel-10_4"))
mac_intel_104_compile_factory.addStep(compile_builtin)
mac_intel_104_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_104",,args="--enable-shell,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode_104",,args="--enable-shell,--enable-wordcode-interp,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d_104",,args="--enable-shell,--enable-debug,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s_104",,args="--enable-shell,--enable-debugger,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd_104",,args="--enable-shell,--enable-debug,--enable-debugger,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="Release_PPC",,shellname="avmshell_104_ppc",,args="--enable-shell,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="Release-wordcode_PPC",,shellname="avmshell_wordcode_104_ppc",,args="--enable-shell,--enable-wordcode-interp,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="Debug_PPC",,shellname="avmshell_d_104_ppc",,args="--enable-shell,--enable-debug,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="ReleaseDebugger_PPC",,shellname="avmshell_s_104_ppc",,args="--enable-shell,--enable-debugger,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_generic(name="DebugDebugger_PPC",,shellname="avmshell_sd_104_ppc",,args="--enable-shell,--enable-debug,--enable-debugger,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_104_compile_factory.addStep(compile_buildcheck_local)
mac_intel_104_compile_factory.addStep(util_upload_asteam_local)
mac_intel_104_compile_builder,=,{
'name':,"mac-intel-10.4-compile-argo",
'slavename':,"mac-intel-10_4",
'factory':,mac_intel_104_compile_factory,
'builddir':,'./argo-mac-intel-10_4-compile',
}
############################################
####,builder,for,mac-intel-10_5-compile,####
############################################
mac_intel_105_compile_factory,=,factory.BuildFactory()
mac_intel_105_compile_factory.addStep(sync_clean)
mac_intel_105_compile_factory.addStep(sync_clone(url=HG_URL))
mac_intel_105_compile_factory.addStep(sync_update)
mac_intel_105_compile_factory.addStep(bb_slaveupdate(slave="mac-intel-10_5"))
mac_intel_105_compile_factory.addStep(compile_builtin)
mac_intel_105_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="--enable-shell,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode",,args="--enable-shell,--enable-wordcode-interp,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-shell,--enable-debug,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s",,args="--enable-shell,--enable-debugger,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd",,args="--enable-shell,--enable-debug,--enable-debugger,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="Release_PPC",,shellname="avmshell_ppc",,args="--enable-shell,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="Release-wordcode_PPC",,shellname="avmshell_wordcode_ppc",,args="--enable-shell,--enable-wordcode-interp,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="Debug_PPC",,shellname="avmshell_d_ppc",,args="--enable-shell,--enable-debug,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="ReleaseDebugger_PPC",,shellname="avmshell_s_ppc",,args="--enable-shell,--enable-debugger,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_generic(name="DebugDebugger_PPC",,shellname="avmshell_sd_ppc",,args="--enable-shell,--enable-debug,--enable-debugger,--target=ppc-darwin,--mac-sdk=104u",,upload="false"))
mac_intel_105_compile_factory.addStep(compile_buildcheck_local)
mac_intel_105_compile_factory.addStep(util_upload_asteam_local)
mac_intel_105_compile_builder,=,{
'name':,"mac-intel-10.5-compile-argo",
'slavename':,"mac-intel-10_5",
'factory':,mac_intel_105_compile_factory,
'builddir':,'./argo-mac-intel-10_5-compile',
}
##########################################
####,builder,for,mac-intel-64-compile,####
##########################################
mac_intel_64_compile_factory,=,factory.BuildFactory()
mac_intel_64_compile_factory.addStep(sync_clean)
mac_intel_64_compile_factory.addStep(sync_clone(url=HG_URL))
mac_intel_64_compile_factory.addStep(sync_update)
mac_intel_64_compile_factory.addStep(bb_slaveupdate(slave="mac64-intel"))
mac_intel_64_compile_factory.addStep(compile_builtin)
mac_intel_64_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_64",,args="--enable-shell,--target=x86_64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode_64",,args="--enable-shell,--enable-wordcode-interp,--target=x86_64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d_64",,args="--enable-shell,--enable-debug,--target=x86_64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,args="--enable-shell,--enable-debugger,--target=x86_64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,args="--enable-shell,--enable-debug,--enable-debugger,--target=x86_64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="Release_PPC",,shellname="avmshell_64_ppc",,args="--enable-shell,--target=ppc64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="Release-wordcode_PPC",,shellname="avmshell_wordcode_64_ppc",,args="--enable-shell,--enable-wordcode-interp,--target=ppc64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="Debug_PPC",,shellname="avmshell_d_64_ppc",,args="--enable-shell,--enable-debug,--target=ppc64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="ReleaseDebugger_PPC",,shellname="avmshell_s_64_ppc",,args="--enable-shell,--enable-debugger,--target=ppc64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_generic(name="DebugDebugger_PPC",,shellname="avmshell_sd_64_ppc",,args="--enable-shell,--enable-debug,--enable-debugger,--target=ppc64-darwin,--mac-sdk=105",,upload="false"))
mac_intel_64_compile_factory.addStep(compile_buildcheck_local)
mac_intel_64_compile_factory.addStep(util_upload_asteam_local)
mac_intel_64_compile_builder,=,{
'name':,"mac64-intel-compile-argo",
'slavename':,"mac64-intel",
'factory':,mac_intel_64_compile_factory,
'builddir':,'./argo-mac64-intel-compile',
}
############################################
####,builder,for,mac-ppc-10_4a-compile,####
############################################
mac_ppc_104a_compile_factory,=,factory.BuildFactory()
mac_ppc_104a_compile_factory.addStep(sync_clean)
mac_ppc_104a_compile_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_104a_compile_factory.addStep(sync_update)
mac_ppc_104a_compile_factory.addStep(bb_slaveupdate(slave="mac-ppc-10_4"))
mac_ppc_104a_compile_builder,=,{
'name':,"mac-ppc-10.4a-compile-argo",
'slavename':,"mac-ppc-10_4a",
'factory':,mac_ppc_104a_compile_factory,
'builddir':,'./argo-mac-ppc-10_4a-compile',
}
###########################################
####,builder,for,mac-ppc-10_4b-compile,####
###########################################
mac_ppc_104b_compile_factory,=,factory.BuildFactory()
mac_ppc_104b_compile_factory.addStep(sync_clean)
mac_ppc_104b_compile_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_104b_compile_factory.addStep(sync_update)
mac_ppc_104b_compile_factory.addStep(bb_slaveupdate(slave="mac-ppc-10_4"))
mac_ppc_104b_compile_builder,=,{
'name':,"mac-ppc-10.4b-compile-argo",
'slavename':,"mac-ppc-10_4b",
'factory':,mac_ppc_104b_compile_factory,
'builddir':,'./argo-mac-ppc-10_4b-compile',
}
###########################################
####,builder,for,mac-ppc-10_5a-compile,####
###########################################
mac_ppc_105a_compile_factory,=,factory.BuildFactory()
mac_ppc_105a_compile_factory.addStep(sync_clean)
mac_ppc_105a_compile_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_105a_compile_factory.addStep(sync_update)
mac_ppc_105a_compile_factory.addStep(bb_slaveupdate(slave="mac-ppc-10_5"))
mac_ppc_105a_compile_builder,=,{
'name':,"mac-ppc-10.5a-compile-argo",
'slavename':,"mac-ppc-10_5a",
'factory':,mac_ppc_105a_compile_factory,
'builddir':,'./argo-mac-ppc-10_5a-compile',
}
###########################################
####,builder,for,mac-ppc-10_5b-compile,####
###########################################
mac_ppc_105b_compile_factory,=,factory.BuildFactory()
mac_ppc_105b_compile_factory.addStep(sync_clean)
mac_ppc_105b_compile_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_105b_compile_factory.addStep(sync_update)
mac_ppc_105b_compile_factory.addStep(bb_slaveupdate(slave="mac-ppc-10_5"))
mac_ppc_105b_compile_builder,=,{
'name':,"mac-ppc-10.5b-compile-argo",
'slavename':,"mac-ppc-10_5b",
'factory':,mac_ppc_105b_compile_factory,
'builddir':,'./argo-mac-ppc-10_5b-compile',
}
########################################
####,builder,for,mac-ppc-64-compile,####
########################################
mac_ppc_64_compile_factory,=,factory.BuildFactory()
mac_ppc_64_compile_factory.addStep(sync_clean)
mac_ppc_64_compile_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_64_compile_factory.addStep(sync_update)
mac_ppc_64_compile_factory.addStep(bb_slaveupdate(slave="mac64-ppc"))
mac_ppc_64_compile_builder,=,{
'name':,"mac64-ppc-compile-argo",
'slavename':,"mac64a-ppc",
'factory':,mac_ppc_64_compile_factory,
'builddir':,'./argo-mac64-ppc-compile',
}
#########################################
####,builder,for,mac-ppc-64b-compile,####
#########################################
mac_ppc_64b_compile_factory,=,factory.BuildFactory()
mac_ppc_64b_compile_factory.addStep(sync_clean)
mac_ppc_64b_compile_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_64b_compile_factory.addStep(sync_update)
mac_ppc_64b_compile_factory.addStep(bb_slaveupdate(slave="mac64-ppc"))
mac_ppc_64b_compile_builder,=,{
'name':,"mac64b-ppc-compile-argo",
'slavename':,"mac64b-ppc",
'factory':,mac_ppc_64b_compile_factory,
'builddir':,'./argo-mac64b-ppc-compile',
}
###################################
####,builder,for,linux-compile,####
###################################
linux_compile_factory,=,factory.BuildFactory()
linux_compile_factory.addStep(sync_clean)
linux_compile_factory.addStep(sync_clone(url=HG_URL))
linux_compile_factory.addStep(sync_update)
linux_compile_factory.addStep(bb_slaveupdate(slave="linux"))
linux_compile_factory.addStep(compile_builtin)
linux_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="--enable-shell",,upload="false"))
linux_compile_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode",,args="--enable-shell,--enable-wordcode-interp",,upload="false"))
linux_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-shell,--enable-debug",,upload="false"))
linux_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s",,args="--enable-shell,--enable-debugger",,upload="false"))
linux_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd",,args="--enable-shell,--enable-debug,--enable-debugger",,upload="false"))
linux_compile_factory.addStep(BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'--enable-shell,--enable-arm-neon,--target=arm-linux,--enable-sys-root-dir=/usr/local/arm-linux/debian5',,'avmshell_neon_arm',,'false'],
env={
'branch':,WithProperties('%s','branch'),
'CXX':,'arm-none-linux-gnueabi-g++',
'CC',:,'arm-none-linux-gnueabi-gcc',
'LD',:,'arm-none-linux-gnueabi-ld',
'AR',:,'arm-none-linux-gnueabi-ar',
},
description='starting,Release_arm-linux,build...',
descriptionDone='finished,Release_arm-linux,build.',
name="Release_arm-linux",
workdir="../repo/build/buildbot/slaves/scripts")
)
linux_compile_factory.addStep(BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'--enable-shell,--enable-debug,--enable-arm-neon,--target=arm-linux,--enable-sys-root-dir=/usr/local/arm-linux/debian5',,'avmshell_neon_arm_d',,'false'],
env={
'branch':,WithProperties('%s','branch'),
'CXX':,'arm-none-linux-gnueabi-g++',
'CC',:,'arm-none-linux-gnueabi-gcc',
'LD',:,'arm-none-linux-gnueabi-ld',
'AR',:,'arm-none-linux-gnueabi-ar',
},
description='starting,Debug_arm-linux,build...',
descriptionDone='finished,Debug_arm-linux,build.',
name="Debug_arm-linux",
workdir="../repo/build/buildbot/slaves/scripts")
)
linux_compile_factory.addStep(compile_buildcheck_local)
linux_compile_factory.addStep(util_upload_asteam_local)
linux_compile_builder,=,{
'name':,"linux-compile-argo",
'slavename':,"linux",
'factory':,linux_compile_factory,
'builddir':,'./argo-linux-compile',
}
#####################################
####,builder,for,linux64-compile,####
#####################################
linux_64_compile_factory,=,factory.BuildFactory()
linux_64_compile_factory.addStep(sync_clean)
linux_64_compile_factory.addStep(sync_clone(url=HG_URL))
linux_64_compile_factory.addStep(sync_update)
linux_64_compile_factory.addStep(bb_slaveupdate(slave="linux64"))
linux_64_compile_factory.addStep(compile_builtin)
linux_64_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_64",,args="--enable-shell",,upload="false"))
linux_64_compile_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode_64",,args="--enable-shell,--enable-wordcode-interp",,upload="false"))
linux_64_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d_64",,args="--enable-shell,--enable-debug",,upload="false"))
linux_64_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,args="--enable-shell,--enable-debugger",,upload="false"))
linux_64_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,args="--enable-shell,--enable-debug,--enable-debugger",,upload="false"))
linux_64_compile_factory.addStep(compile_testmedia)
linux_64_compile_factory.addStep(compile_buildcheck_local)
linux_64_compile_factory.addStep(util_upload_asteam_local)
linux_64_compile_builder,=,{
'name':,"linux64-compile-argo",
'slavename':,"linux64",
'factory':,linux_64_compile_factory,
'builddir':,'./argo-linux64-compile',
}
################################################
####,builder,for,winmobile-emulator-compile,####
################################################
winmobile_emulator_compile_factory,=,factory.BuildFactory()
winmobile_emulator_compile_factory.addStep(sync_clean)
winmobile_emulator_compile_factory.addStep(sync_clone(url=HG_URL))
winmobile_emulator_compile_factory.addStep(sync_update)
winmobile_emulator_compile_factory.addStep(bb_slaveupdate(slave="winmobile-arm"))
winmobile_emulator_compile_factory.addStep(compile_builtin)
winmobile_emulator_compile_factory.addStep(compile_generic(name="ReleaseARM",,shellname="avmshell_arm",,args="--enable-shell,--target=arm-windows",,upload="false"))
winmobile_emulator_compile_factory.addStep(compile_generic(name="Release-wordcode-ARM",,shellname="avmshell_wordcode_arm",,args="--enable-shell,--enable-wordcode-interp,--target=arm-windows",,upload="false"))
winmobile_emulator_compile_factory.addStep(compile_generic(name="Release-fpu-ARM",,shellname="avmshell_fpu_arm",,args="--enable-shell,--enable-arm-fpu,--target=arm-windows",,upload="false"))
winmobile_emulator_compile_factory.addStep(compile_generic(name="DebugARM",,shellname="avmshell_arm_d",,args="--enable-shell,--enable-debug,--target=arm-windows",,upload="false"))
winmobile_emulator_compile_factory.addStep(compile_generic(name="Debug-fpu-ARM",,shellname="avmshell_fpu_arm_d",,args="--enable-shell,--enable-debug,--enable-arm-fpu,--target=arm-windows",,upload="false"))
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'--enable-shell,--target=x86_64-win',,'avmshell_64',,'false'],
env={
'branch':,WithProperties('%s','branch'),
'compile64':'true'
},
description='starting,Release64,build...',
descriptionDone='finished,Release64,build.',
name="Release64",
workdir="../repo/build/buildbot/slaves/scripts")
)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'--enable-shell,--enable-wordcode-interp,--target=x86_64-win',,'avmshell_wordcode_64',,'false'],
env={
'branch':,WithProperties('%s','branch'),
'compile64':'true'
},
description='starting,Release-wordcode64,build...',
descriptionDone='finished,Release-wordcode64,build.',
name="Release-wordcode64",
workdir="../repo/build/buildbot/slaves/scripts")
)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'--enable-shell,--enable-debug,--target=x86_64-win',,'avmshell_d_64',,'false'],
env={
'branch':,WithProperties('%s','branch'),
'compile64':'true'
},
description='starting,Debug64,build...',
descriptionDone='finished,Debug64,build.',
name="Debug64",
workdir="../repo/build/buildbot/slaves/scripts")
)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'--enable-shell,--enable-debugger,--target=x86_64-win',,'avmshell_s_64',,'false'],
env={
'branch':,WithProperties('%s','branch'),
'compile64':'true'
},
description='starting,ReleaseDebugger64,build...',
descriptionDone='finished,ReleaseDebugger64,build.',
name="ReleaseDebugger64",
workdir="../repo/build/buildbot/slaves/scripts")
)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'--enable-shell,--enable-debug,--enable-debugger,--target=x86_64-win',,'avmshell_sd_64',,'false'],
env={
'branch':,WithProperties('%s','branch'),
'compile64':'true'
},
description='starting,DebugDebugger64,build...',
descriptionDone='finished,DebugDebugger64,build.',
name="DebugDebugger64",
workdir="../repo/build/buildbot/slaves/scripts")
)
winmobile_emulator_compile_factory.addStep(compile_buildcheck_local)
winmobile_emulator_compile_factory.addStep(util_upload_asteam_local)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
command=['./build-release-mobile-pocketpc-arm-sizereport.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='starting,to,run,sizereport...',
descriptionDone='finished,sizereport.',
name="Build_Release_sizereport",
workdir="../repo/build/buildbot/slaves/scripts")
)
winmobile_emulator_compile_builder,=,{
'name':,"winmobile-emulator-compile-argo",
'slavename':,"winmobile-emulator",
'factory':,winmobile_emulator_compile_factory,
'builddir':,'./argo-winmobile-emulator-compile',
}
###########################################
####,builder,for,solaris-sparc-compile,####
###########################################
solaris_sparc_compile_factory,=,factory.BuildFactory()
solaris_sparc_compile_factory.addStep(sync_clean)
solaris_sparc_compile_factory.addStep(sync_clone(url=HG_URL))
solaris_sparc_compile_factory.addStep(sync_update)
solaris_sparc_compile_factory.addStep(bb_slaveupdate(slave="solaris-sparc"))
solaris_sparc_compile_factory.addStep(compile_builtin)
solaris_sparc_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="--enable-shell",,upload="false"))
solaris_sparc_compile_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode",,args="--enable-shell,--enable-wordcode-interp",,upload="false"))
solaris_sparc_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-shell,--enable-debug",,upload="false"))
solaris_sparc_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s",,args="--enable-shell,--enable-debugger",,upload="false"))
solaris_sparc_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd",,args="--enable-shell,--enable-debug,--enable-debugger",,upload="false"))
solaris_sparc_compile_factory.addStep(compile_buildcheck_local)
solaris_sparc_compile_factory.addStep(util_upload_asteam)
solaris_sparc_compile_builder,=,{
'name':,"solaris-sparc-compile-argo",
'slavename':,"solaris-sparc",
'factory':,solaris_sparc_compile_factory,
'builddir':,'./argo-solaris-sparc-compile',
}
############################################
####,builder,for,solaris-sparc2-compile,####
############################################
solaris_sparc2_compile_factory,=,factory.BuildFactory()
solaris_sparc2_compile_factory.addStep(sync_clean)
solaris_sparc2_compile_factory.addStep(sync_clone(url=HG_URL))
solaris_sparc2_compile_factory.addStep(sync_update)
solaris_sparc2_compile_factory.addStep(bb_slaveupdate(slave="solaris-sparc"))
solaris_sparc2_compile_builder,=,{
'name':,"solaris-sparc2-compile-argo",
'slavename':,"solaris-sparc2",
'factory':,solaris_sparc2_compile_factory,
'builddir':,'./argo-solaris-sparc2-compile',
}
###########################################
####,builder,for,android,on,mac,,,,,,,,####
###########################################
android_compile_factory,=,factory.BuildFactory(),;
android_compile_factory.addStep(sync_clean)
android_compile_factory.addStep(sync_clone(url=HG_URL))
android_compile_factory.addStep(sync_update)
android_compile_factory.addStep(bb_slaveupdate(slave="mac-intel-server"))
android_compile_factory.addStep(compile_builtin)
android_compile_factory.addStep(BuildShellCommand(
command=['./build-debug-shell-android.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='building,debug,shell...',
descriptionDone='finished,building,debug,shell.',
name="Build_Debug",
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600)
)
android_compile_factory.addStep(BuildShellCommand(
command=['./build-release-shell-android.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='building,release,shell...',
descriptionDone='finished,building,release,shell.',
name="Build_Release",
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600)
)
android_compile_factory.addStep(BuildShellCommand(
command=['./build-check-android.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='running,build,check...',
descriptionDone='finished,build,check.',
name="Build_Check",
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600)
)
android_compile_factory.addStep(BuildShellCommand(
command=['./upload-asteam-android.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='running,upload,to,asteam...',
descriptionDone='finished,upload,to,asteam.',
name="Upload_ASTEAM",
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600)
)
android_compile_builder,=,{
'name':,"android-compile-argo",
'slavename':,"android",
'factory':,android_compile_factory,
'builddir':,'./argo-android-compile',
}
###############################
####,builder,for,linux-arm,####
###############################
linux_arm_compile_factory,=,factory.BuildFactory()
linux_arm_compile_factory.addStep(sync_clean)
linux_arm_compile_factory.addStep(sync_clone(url=HG_URL))
linux_arm_compile_factory.addStep(sync_update)
linux_arm_compile_factory.addStep(bb_slaveupdate(slave="linux-arm"))
linux_arm_compile_builder,=,{
'name':,"linux-arm-compile-argo",
'slavename':,"linux-arm",
'factory':,linux_arm_compile_factory,
'builddir':,'./argo-linux-arm-compile',
}
################################
####,builder,for,linux-arm2,####
################################
linux_arm2_compile_factory,=,factory.BuildFactory()
linux_arm2_compile_factory.addStep(sync_clean)
linux_arm2_compile_factory.addStep(sync_clone(url=HG_URL))
linux_arm2_compile_factory.addStep(sync_update)
linux_arm2_compile_factory.addStep(bb_slaveupdate(slave="linux-arm"))
linux_arm2_compile_builder,=,{
'name':,"linux-arm2-compile-argo",
'slavename':,"linux-arm2",
'factory':,linux_arm2_compile_factory,
'builddir':,'./argo-linux-arm2-compile',
}
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,SMOKE,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
###################################
####,builder,for,windows-smoke,####
###################################
windows_smoke_factory,=,factory.BuildFactory()
windows_smoke_factory.addStep(download_testmedia)
windows_smoke_factory.addStep(test_smoke)
windows_smoke_factory.addStep(util_process_clean)
windows_smoke_builder,=,{
'name':,"windows-smoke-argo",
'slavename':,"windows",
'factory':,windows_smoke_factory,
'builddir':,'./argo-windows-smoke',
}
#####################################
####,builder,for,windows64-smoke,####
#####################################
windows_64_smoke_factory,=,factory.BuildFactory()
windows_64_smoke_factory.addStep(download_testmedia)
windows_64_smoke_factory.addStep(test_smoke)
windows_64_smoke_factory.addStep(util_process_clean)
windows_64_smoke_builder,=,{
'name':,"windows64-smoke-argo",
'slavename':,"windows64",
'factory':,windows_64_smoke_factory,
'builddir':,'./argo-windows64-smoke',
}
##########################################
####,builder,for,mac-intel-10_4-smoke,####
##########################################
mac_intel_104_smoke_factory,=,factory.BuildFactory()
mac_intel_104_smoke_factory.addStep(download_testmedia)
mac_intel_104_smoke_factory.addStep(test_smoke)
mac_intel_104_smoke_factory.addStep(util_process_clean)
mac_intel_104_smoke_builder,=,{
'name':,"mac-intel-10.4-smoke-argo",
'slavename':,"mac-intel-10_4",
'factory':,mac_intel_104_smoke_factory,
'builddir':,'./argo-mac-intel-10_4-smoke',
}
##########################################
####,builder,for,mac-intel-10_5-smoke,####
##########################################
mac_intel_105_smoke_factory,=,factory.BuildFactory()
mac_intel_105_smoke_factory.addStep(download_testmedia)
mac_intel_105_smoke_factory.addStep(test_smoke)
mac_intel_105_smoke_factory.addStep(util_process_clean)
mac_intel_105_smoke_builder,=,{
'name':,"mac-intel-10.5-smoke-argo",
'slavename':,"mac-intel-10_5",
'factory':,mac_intel_105_smoke_factory,
'builddir':,'./argo-mac-intel-10_5-smoke',
}
#######################################
####,builder,for,mac64-intel-smoke,####
#######################################
mac_intel_64_smoke_factory,=,factory.BuildFactory()
mac_intel_64_smoke_factory.addStep(download_testmedia)
mac_intel_64_smoke_factory.addStep(test_smoke)
mac_intel_64_smoke_factory.addStep(util_process_clean)
mac_intel_64_smoke_builder,=,{
'name':,"mac64-intel-smoke-argo",
'slavename':,"mac64-intel",
'factory':,mac_intel_64_smoke_factory,
'builddir':,'./argo-mac64-intel-smoke',
}
#########################################
####,builder,for,mac-ppc-10_4a-smoke,####
#########################################
mac_ppc_104a_smoke_factory,=,factory.BuildFactory()
mac_ppc_104a_smoke_factory.addStep(download_testmedia)
mac_ppc_104a_smoke_factory.addStep(test_smoke)
mac_ppc_104a_smoke_factory.addStep(util_process_clean)
mac_ppc_104a_smoke_builder,=,{
'name':,"mac-ppc-10.4a-smoke-argo",
'slavename':,"mac-ppc-10_4a",
'factory':,mac_ppc_104a_smoke_factory,
'builddir':,'./argo-mac-ppc-10_4a-smoke',
}
#########################################
####,builder,for,mac-ppc-10_4b-smoke,####
#########################################
mac_ppc_104b_smoke_factory,=,factory.BuildFactory()
mac_ppc_104b_smoke_factory.addStep(download_testmedia)
mac_ppc_104b_smoke_factory.addStep(test_smoke)
mac_ppc_104b_smoke_factory.addStep(util_process_clean)
mac_ppc_104b_smoke_builder,=,{
'name':,"mac-ppc-10.4b-smoke-argo",
'slavename':,"mac-ppc-10_4b",
'factory':,mac_ppc_104b_smoke_factory,
'builddir':,'./argo-mac-ppc-10_4b-smoke',
}
#########################################
####,builder,for,mac-ppc-10_5a-smoke,####
#########################################
mac_ppc_105a_smoke_factory,=,factory.BuildFactory()
mac_ppc_105a_smoke_factory.addStep(download_testmedia)
mac_ppc_105a_smoke_factory.addStep(test_smoke)
mac_ppc_105a_smoke_factory.addStep(util_process_clean)
mac_ppc_105a_smoke_builder,=,{
'name':,"mac-ppc-10.5a-smoke-argo",
'slavename':,"mac-ppc-10_5a",
'factory':,mac_ppc_105a_smoke_factory,
'builddir':,'./argo-mac-ppc-10_5a-smoke',
}
#########################################
####,builder,for,mac-ppc-10_5b-smoke,####
#########################################
mac_ppc_105b_smoke_factory,=,factory.BuildFactory()
mac_ppc_105b_smoke_factory.addStep(download_testmedia)
mac_ppc_105b_smoke_factory.addStep(test_smoke)
mac_ppc_105b_smoke_factory.addStep(util_process_clean)
mac_ppc_105b_smoke_builder,=,{
'name':,"mac-ppc-10.5b-smoke-argo",
'slavename':,"mac-ppc-10_5b",
'factory':,mac_ppc_105b_smoke_factory,
'builddir':,'./argo-mac-ppc-10_5b-smoke',
}
#####################################
####,builder,for,mac64-ppc-smoke,####
#####################################
mac_ppc_64_smoke_factory,=,factory.BuildFactory()
mac_ppc_64_smoke_factory.addStep(download_testmedia)
mac_ppc_64_smoke_factory.addStep(test_smoke)
mac_ppc_64_smoke_factory.addStep(util_process_clean)
mac_ppc_64_smoke_builder,=,{
'name':,"mac64-ppc-smoke-argo",
'slavename':,"mac64a-ppc",
'factory':,mac_ppc_64_smoke_factory,
'builddir':,'./argo-mac64-ppc-smoke',
}
######################################
####,builder,for,mac64b-ppc-smoke,####
######################################
mac_ppc_64b_smoke_factory,=,factory.BuildFactory()
mac_ppc_64b_smoke_factory.addStep(download_testmedia)
mac_ppc_64b_smoke_factory.addStep(test_smoke)
mac_ppc_64b_smoke_factory.addStep(util_process_clean)
mac_ppc_64b_smoke_builder,=,{
'name':,"mac64b-ppc-smoke-argo",
'slavename':,"mac64b-ppc",
'factory':,mac_ppc_64b_smoke_factory,
'builddir':,'./argo-mac64b-ppc-smoke',
}
#################################
####,builder,for,linux-smoke,####
#################################
linux_smoke_factory,=,factory.BuildFactory()
linux_smoke_factory.addStep(download_testmedia)
linux_smoke_factory.addStep(test_smoke)
linux_smoke_factory.addStep(util_process_clean)
linux_smoke_builder,=,{
'name':,"linux-smoke-argo",
'slavename':,"linux",
'factory':,linux_smoke_factory,
'builddir':,'./argo-linux-smoke',
}
###################################
####,builder,for,linux64-smoke,####
###################################
linux_64_smoke_factory,=,factory.BuildFactory()
linux_64_smoke_factory.addStep(download_testmedia)
linux_64_smoke_factory.addStep(test_smoke)
linux_64_smoke_factory.addStep(util_process_clean)
linux_64_smoke_builder,=,{
'name':,"linux64-smoke-argo",
'slavename':,"linux64",
'factory':,linux_64_smoke_factory,
'builddir':,'./argo-linux64-smoke',
}
##############################################
####,builder,for,winmobile-emulator-smoke,####
##############################################
winmobile_emulator_smoke_factory,=,factory.BuildFactory()
winmobile_emulator_smoke_factory.addStep(download_testmedia)
winmobile_emulator_smoke_factory.addStep(test_emulator_smoke_mobile)
winmobile_emulator_smoke_factory.addStep(util_process_clean)
winmobile_emulator_smoke_builder,=,{
'name':,"winmobile-emulator-smoke-argo",
'slavename':,"winmobile-emulator",
'factory':,winmobile_emulator_smoke_factory,
'builddir':,'./argo-winmobile-emulator-smoke',
}
#########################################
####,builder,for,solaris-sparc-smoke,####
#########################################
solaris_sparc_smoke_factory,=,factory.BuildFactory()
solaris_sparc_smoke_factory.addStep(download_testmedia)
solaris_sparc_smoke_factory.addStep(test_smoke)
solaris_sparc_smoke_factory.addStep(util_process_clean)
solaris_sparc_smoke_builder,=,{
'name':,"solaris-sparc-smoke-argo",
'slavename':,"solaris-sparc",
'factory':,solaris_sparc_smoke_factory,
'builddir':,'./argo-solaris-sparc-smoke',
}
##########################################
####,builder,for,solaris-sparc2-smoke,####
##########################################
solaris_sparc2_smoke_factory,=,factory.BuildFactory()
solaris_sparc2_smoke_factory.addStep(download_testmedia)
solaris_sparc2_smoke_factory.addStep(test_smoke)
solaris_sparc2_smoke_factory.addStep(util_process_clean)
solaris_sparc2_smoke_builder,=,{
'name':,"solaris-sparc2-smoke-argo",
'slavename':,"solaris-sparc2",
'factory':,solaris_sparc2_smoke_factory,
'builddir':,'./argo-solaris-sparc2-smoke',
}
#########################################
####,builder,for,android-smoke,,,,,,,####
#########################################
android_smoke_factory,=,factory.BuildFactory()
android_smoke_factory.addStep(download_testmedia)
android_smoke_factory.addStep(test_smoke_local)
android_smoke_factory.addStep(util_process_clean)
android_smoke_builder,=,{
'name':,"android-smoke-argo",
'slavename':,"android",
'factory':,android_smoke_factory,
'builddir':,'./argo-android-smoke',
}
###########################################
####,builder,for,linxu-arm-smoke,,,,,,,####
###########################################
linux_arm_smoke_factory,=,factory.BuildFactory()
linux_arm_smoke_factory.addStep(download_testmedia)
linux_arm_smoke_factory.addStep(TestSuiteShellCommand(
command=['../all/run-smoketests.sh',,WithProperties('%s','revision'),,'./runsmokes-arm.txt'],
env={'branch':,WithProperties('%s','branch')},
description='starting,to,run,smoke,tests...',
descriptionDone='finished,smoke,tests.',
name="SmokeTest",
workdir="../repo/build/buildbot/slaves/scripts")
)
linux_arm_smoke_factory.addStep(util_process_clean)
linux_arm_smoke_builder,=,{
'name':,"linux-arm-smoke-argo",
'slavename':,"linux-arm",
'factory':,linux_arm_smoke_factory,
'builddir':,'./argo-linux-arm-smoke',
}
###########################################
####,builder,for,linxu-arm2-smoke,,,,,,####
###########################################
linux_arm2_smoke_factory,=,factory.BuildFactory()
linux_arm2_smoke_factory.addStep(download_testmedia)
linux_arm2_smoke_factory.addStep(TestSuiteShellCommand(
command=['../all/run-smoketests.sh',,WithProperties('%s','revision'),,'./runsmokes-arm.txt'],
env={'branch':,WithProperties('%s','branch')},
description='starting,to,run,smoke,tests...',
descriptionDone='finished,smoke,tests.',
name="SmokeTest",
workdir="../repo/build/buildbot/slaves/scripts")
)
linux_arm2_smoke_factory.addStep(util_process_clean)
linux_arm2_smoke_builder,=,{
'name':,"linux-arm2-smoke-argo",
'slavename':,"linux-arm2",
'factory':,linux_arm2_smoke_factory,
'builddir':,'./argo-linux-arm2-smoke',
}
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,TEST,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
##################################
####,builder,for,windows-test,####
##################################
windows_test_factory,=,factory.BuildFactory()
windows_test_factory.addStep(test_commandline)
windows_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
windows_test_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
windows_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
windows_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
windows_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
windows_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
windows_test_factory.addStep(test_differential)
windows_test_factory.addStep(util_process_clean)
windows_test_factory.addStep(util_clean_buildsdir)
windows_test_builder,=,{
'name':,"windows-test-argo",
'slavename':,"windows",
'factory':,windows_test_factory,
'builddir':,'./argo-windows-test',
}
####################################
####,builder,for,windows64-test,####
####################################
windows_64_test_factory,=,factory.BuildFactory()
windows_64_test_factory.addStep(test_commandline)
windows_64_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_64"))
windows_64_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_64",,vmargs="",,config="",,scriptargs=""))
windows_64_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_64_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_64_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_64",,vmargs="-Ojit",,config="",,scriptargs=""))
windows_64_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,vmargs="",,config="",,scriptargs=""))
windows_64_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="",,scriptargs=""))
windows_64_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs=""))
windows_64_test_factory.addStep(util_process_clean)
windows_64_test_factory.addStep(util_clean_buildsdir)
windows_64_test_builder,=,{
'name':,"windows64-test-argo",
'slavename':,"windows64",
'factory':,windows_64_test_factory,
'builddir':,'./argo-windows64-test',
}
#########################################
####,builder,for,mac-intel-10_4-test,####
#########################################
mac_intel_104_test_factory,=,factory.BuildFactory()
mac_intel_104_test_factory.addStep(test_commandline)
mac_intel_104_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_104"))
mac_intel_104_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_104",,vmargs="",,config="",,scriptargs=""))
mac_intel_104_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_104",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_intel_104_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_104",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_intel_104_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_104",,vmargs="-Ojit",,config="",,scriptargs=""))
mac_intel_104_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_104",,vmargs="",,config="",,scriptargs=""))
mac_intel_104_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_104",,vmargs="",,config="",,scriptargs=""))
mac_intel_104_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_104",,vmargs="",,config="",,scriptargs=""))
mac_intel_104_test_factory.addStep(test_differential)
mac_intel_104_test_factory.addStep(util_process_clean)
mac_intel_104_test_factory.addStep(util_clean_buildsdir)
mac_intel_104_test_builder,=,{
'name':,"mac-intel-10.4-test-argo",
'slavename':,"mac-intel-10_4",
'factory':,mac_intel_104_test_factory,
'builddir':,'./argo-mac-intel-10_4-test',
}
#########################################
####,builder,for,mac-intel-10_5-test,####
#########################################
mac_intel_105_test_factory,=,factory.BuildFactory()
mac_intel_105_test_factory.addStep(test_commandline)
mac_intel_105_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
mac_intel_105_test_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
mac_intel_105_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_intel_105_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_intel_105_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
mac_intel_105_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
mac_intel_105_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
mac_intel_105_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
mac_intel_105_test_factory.addStep(test_differential)
mac_intel_105_test_factory.addStep(util_process_clean)
mac_intel_105_test_factory.addStep(util_clean_buildsdir)
mac_intel_105_test_builder,=,{
'name':,"mac-intel-10.5-test-argo",
'slavename':,"mac-intel-10_5",
'factory':,mac_intel_105_test_factory,
'builddir':,'./argo-mac-intel-10_5-test',
}
######################################
####,builder,for,mac64-intel-test,####
######################################
mac_intel_64_test_factory,=,factory.BuildFactory()
mac_intel_64_test_factory.addStep(test_commandline)
mac_intel_64_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_64"))
mac_intel_64_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_64",,vmargs="",,config="",,scriptargs=""))
mac_intel_64_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_intel_64_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_intel_64_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_64",,vmargs="-Ojit",,config="",,scriptargs=""))
mac_intel_64_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,vmargs="",,config="",,scriptargs=""))
mac_intel_64_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="",,scriptargs=""))
mac_intel_64_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs=""))
mac_intel_64_test_factory.addStep(util_process_clean)
mac_intel_64_test_factory.addStep(util_clean_buildsdir)
mac_intel_64_test_builder,=,{
'name':,"mac64-intel-test-argo",
'slavename':,"mac64-intel",
'factory':,mac_intel_64_test_factory,
'builddir':,'./argo-mac64-intel-test',
}
########################################
####,builder,for,mac-ppc-10_4a-test,####
########################################
mac_ppc_104a_test_factory,=,factory.BuildFactory()
mac_ppc_104a_test_factory.addStep(test_commandline)
mac_ppc_104a_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_104_ppc"))
mac_ppc_104a_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_104_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_104a_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_104_ppc",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_ppc_104a_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_104_ppc",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_ppc_104a_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_104_ppc",,vmargs="-Ojit",,config="",,scriptargs=""))
mac_ppc_104a_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_104_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_104a_test_factory.addStep(util_process_clean)
mac_ppc_104a_test_factory.addStep(util_clean_buildsdir)
mac_ppc_104a_test_builder,=,{
'name':,"mac-ppc-10.4a-test-argo",
'slavename':,"mac-ppc-10_4a",
'factory':,mac_ppc_104a_test_factory,
'builddir':,'./argo-mac-ppc-10_4a-test',
}
########################################
####,builder,for,mac-ppc-10_4b-test,####
########################################
mac_ppc_104b_test_factory,=,factory.BuildFactory()
mac_ppc_104b_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_104_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_104b_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_104_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_104b_test_factory.addStep(util_process_clean)
mac_ppc_104b_test_factory.addStep(util_clean_buildsdir)
mac_ppc_104b_test_builder,=,{
'name':,"mac-ppc-10.4b-test-argo",
'slavename':,"mac-ppc-10_4b",
'factory':,mac_ppc_104b_test_factory,
'builddir':,'./argo-mac-ppc-10_4b-test',
}
########################################
####,builder,for,mac-ppc-10_5a-test,####
########################################
mac_ppc_105a_test_factory,=,factory.BuildFactory()
mac_ppc_105a_test_factory.addStep(test_commandline)
mac_ppc_105a_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_ppc"))
mac_ppc_105a_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_105a_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_ppc",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_ppc_105a_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_ppc",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_ppc_105a_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_ppc",,vmargs="-Ojit",,config="",,scriptargs=""))
mac_ppc_105a_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_105a_test_factory.addStep(util_process_clean)
mac_ppc_105a_test_factory.addStep(util_clean_buildsdir)
mac_ppc_105a_test_builder,=,{
'name':,"mac-ppc-10.5a-test-argo",
'slavename':,"mac-ppc-10_5a",
'factory':,mac_ppc_105a_test_factory,
'builddir':,'./argo-mac-ppc-10_5a-test',
}
########################################
####,builder,for,mac-ppc-10_5b-test,####
########################################
mac_ppc_105b_test_factory,=,factory.BuildFactory()
mac_ppc_105b_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_105b_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_105b_test_factory.addStep(util_process_clean)
mac_ppc_105b_test_factory.addStep(util_clean_buildsdir)
mac_ppc_105b_test_builder,=,{
'name':,"mac-ppc-10.5b-test-argo",
'slavename':,"mac-ppc-10_5b",
'factory':,mac_ppc_105b_test_factory,
'builddir':,'./argo-mac-ppc-10_5b-test',
}
####################################
####,builder,for,mac64-ppc-test,####
####################################
mac_ppc_64_test_factory,=,factory.BuildFactory()
mac_ppc_64_test_factory.addStep(test_commandline)
mac_ppc_64_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_64_ppc"))
mac_ppc_64_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_64_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_64_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_64_ppc",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_ppc_64_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_64_ppc",,vmargs="-Ojit",,config="",,scriptargs=""))
mac_ppc_64_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_64_test_factory.addStep(util_process_clean)
mac_ppc_64_test_factory.addStep(util_clean_buildsdir)
mac_ppc_64_test_builder,=,{
'name':,"mac64-ppc-test-argo",
'slavename':,"mac64a-ppc",
'factory':,mac_ppc_64_test_factory,
'builddir':,'./argo-mac64-ppc-test',
}
#####################################
####,builder,for,mac64b-ppc-test,####
#####################################
mac_ppc_64b_test_factory,=,factory.BuildFactory()
mac_ppc_64b_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_64_ppc",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_ppc_64b_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_64_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_64b_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_64b_test_factory.addStep(util_process_clean)
mac_ppc_64b_test_factory.addStep(util_clean_buildsdir)
mac_ppc_64b_test_builder,=,{
'name':,"mac64b-ppc-test-argo",
'slavename':,"mac64b-ppc",
'factory':,mac_ppc_64b_test_factory,
'builddir':,'./argo-mac64b-ppc-test',
}
################################
####,builder,for,linux-test,####
################################
linux_test_factory,=,factory.BuildFactory()
linux_test_factory.addStep(test_commandline)
linux_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
linux_test_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
linux_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
linux_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
linux_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
linux_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
linux_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
linux_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
linux_test_factory.addStep(test_differential)
linux_test_factory.addStep(util_process_clean)
linux_test_factory.addStep(util_clean_buildsdir)
linux_test_builder,=,{
'name':,"linux-test-argo",
'slavename':,"linux",
'factory':,linux_test_factory,
'builddir':,'./argo-linux-test',
}
##################################
####,builder,for,linux64-test,####
##################################
linux_64_test_factory,=,factory.BuildFactory()
linux_64_test_factory.addStep(test_commandline)
linux_64_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_64"))
linux_64_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_64",,vmargs="",,config="",,scriptargs=""))
linux_64_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
linux_64_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
linux_64_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_64",,vmargs="-Ojit",,config="",,scriptargs=""))
linux_64_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,vmargs="",,config="",,scriptargs=""))
linux_64_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="",,scriptargs=""))
linux_64_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs=""))
linux_64_test_factory.addStep(util_process_clean)
linux_64_test_factory.addStep(util_clean_buildsdir)
linux_64_test_builder,=,{
'name':,"linux64-test-argo",
'slavename':,"linux64",
'factory':,linux_64_test_factory,
'builddir':,'./argo-linux64-test',
}
#############################################
####,builder,for,winmobile-emulator-test,####
#############################################
winmobile_emulator_test_factory,=,factory.BuildFactory()
winmobile_emulator_test_factory.addStep(test_emulator_generic(name="Release",,shellname="avmshell_arm",,vmargs="",,config="",,scriptargs=""))
winmobile_emulator_test_factory.addStep(test_emulator_generic(name="Release-interp",,shellname="avmshell_arm",,vmargs="-Dinterp",,config="",,scriptargs=""))
winmobile_emulator_test_factory.addStep(test_emulator_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_arm",,vmargs="-Dinterp",,config="",,scriptargs=""))
winmobile_emulator_test_factory.addStep(test_emulator_generic(name="Release-jit",,shellname="avmshell_arm",,vmargs="-Ojit",,config="",,scriptargs=""))
winmobile_emulator_test_factory.addStep(util_process_clean)
winmobile_emulator_test_factory.addStep(util_clean_buildsdir)
winmobile_emulator_test_builder,=,{
'name':,"winmobile-emulator-test-argo",
'slavename':,"winmobile-emulator",
'factory':,winmobile_emulator_test_factory,
'builddir':,'./argo-winmobile-emulator-test',
}
########################################
####,builder,for,solaris-sparc-test,####
########################################
solaris_sparc_test_factory,=,factory.BuildFactory()
solaris_sparc_test_factory.addStep(test_commandline)
solaris_sparc_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
solaris_sparc_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
solaris_sparc_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
solaris_sparc_test_factory.addStep(util_process_clean)
solaris_sparc_test_factory.addStep(util_clean_buildsdir)
solaris_sparc_test_builder,=,{
'name':,"solaris-sparc-test-argo",
'slavename':,"solaris-sparc",
'factory':,solaris_sparc_test_factory,
'builddir':,'./argo-solaris-sparc-test',
}
#########################################
####,builder,for,solaris-sparc2-test,####
#########################################
solaris_sparc2_test_factory,=,factory.BuildFactory()
solaris_sparc2_test_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
solaris_sparc2_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
solaris_sparc2_test_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
solaris_sparc2_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
solaris_sparc2_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
solaris_sparc2_test_factory.addStep(util_process_clean)
solaris_sparc2_test_factory.addStep(util_clean_buildsdir)
solaris_sparc2_test_builder,=,{
'name':,"solaris-sparc2-test-argo",
'slavename':,"solaris-sparc2",
'factory':,solaris_sparc2_test_factory,
'builddir':,'./argo-solaris-sparc2-test',
}
########################################
####,builder,for,android-test,,,,,,,####
########################################
android_test_factory,=,factory.BuildFactory()
android_test_factory.addStep(test_generic_adb(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
android_test_factory.addStep(test_generic_adb(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
android_test_factory.addStep(test_generic_adb(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
android_test_factory.addStep(test_generic_adb(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
android_test_factory.addStep(util_process_clean)
android_test_factory.addStep(util_clean_buildsdir)
android_test_builder,=,{
'name':,"android-test-argo",
'slavename':,"android",
'factory':,android_test_factory,
'builddir':,'./argo-android-test',
}
##########################################
####,builder,for,linux-arm-test,,,,,,,####
##########################################
linux_arm_test_factory,=,factory.BuildFactory()
linux_arm_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_neon_arm"))
linux_arm_test_factory.addStep(test_generic(name="Release-softfloat",,shellname="avmshell_neon_arm",,vmargs="",,config="",,scriptargs=""))
linux_arm_test_factory.addStep(test_generic(name="Release-vfp",,shellname="avmshell_neon_arm",,vmargs="-Darm_arch,7,-Darm_vfp",,config="",,scriptargs=""))
linux_arm_test_factory.addStep(test_generic(name="Release-jit-vfp",,shellname="avmshell_neon_arm",,vmargs="-Darm_arch,7,-Darm_vfp,-Ojit",,config="",,scriptargs=""))
linux_arm_test_factory.addStep(util_process_clean)
linux_arm_test_factory.addStep(util_clean_buildsdir)
linux_arm_test_builder,=,{
'name':,"linux-arm-test-argo",
'slavename':,"linux-arm",
'factory':,linux_arm_test_factory,
'builddir':,'./argo-linux-arm-test',
}
##########################################
####,builder,for,linux-arm2-test,,,,,,####
##########################################
linux_arm2_test_factory,=,factory.BuildFactory()
linux_arm2_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_neon_arm",,vmargs="-Dinterp",,config="",,scriptargs=""))
linux_arm2_test_factory.addStep(test_generic(name="Debug-vfp",,shellname="avmshell_neon_arm_d",,vmargs="-Darm_arch,7,-Darm_vfp",,config="",,scriptargs=""))
linux_arm2_test_factory.addStep(util_process_clean)
linux_arm2_test_factory.addStep(util_clean_buildsdir)
linux_arm2_test_builder,=,{
'name':,"linux-arm2-test-argo",
'slavename':,"linux-arm2",
'factory':,linux_arm2_test_factory,
'builddir':,'./argo-linux-arm2-test',
}
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,PERFORMANCE,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
#########################################
####,builder,for,windows-performance,####
#########################################
windows_performance_factory,=,factory.BuildFactory()
windows_performance_factory.addStep(sync_clean)
windows_performance_factory.addStep(sync_clone(url=HG_URL))
windows_performance_factory.addStep(sync_update)
windows_performance_factory.addStep(bb_slaveupdate(slave="windows-performance"))
windows_performance_factory.addStep(bb_lockacquire)
windows_performance_factory.addStep(perf_prepare)
windows_performance_factory.addStep(perf_release)
windows_performance_factory.addStep(perf_release_interp)
windows_performance_factory.addStep(perf_release_jit)
windows_performance_factory.addStep(util_process_clean)
windows_performance_factory.addStep(util_clean_buildsdir)
windows_performance_factory.addStep(bb_lockrelease)
windows_performance_builder,=,{
'name':,"windows-performance-argo",
'slavename':,"windows-performance",
'factory':,windows_performance_factory,
'builddir':,'./argo-windows-performance',
}
#####################################
####,builder,for,mac-performance,####
#####################################
mac_performance_factory,=,factory.BuildFactory()
mac_performance_factory.addStep(sync_clean)
mac_performance_factory.addStep(sync_clone(url=HG_URL))
mac_performance_factory.addStep(sync_update)
mac_performance_factory.addStep(bb_slaveupdate(slave="mac-performance"))
mac_performance_factory.addStep(bb_lockacquire)
mac_performance_factory.addStep(perf_prepare)
mac_performance_factory.addStep(perf_release)
mac_performance_factory.addStep(perf_release_interp)
mac_performance_factory.addStep(perf_release_jit)
mac_performance_factory.addStep(util_process_clean)
mac_performance_factory.addStep(util_clean_buildsdir)
mac_performance_factory.addStep(bb_lockrelease)
mac_performance_builder,=,{
'name':,"mac-performance-argo",
'slavename':,"mac-performance",
'factory':,mac_performance_factory,
'builddir':,'./argo-mac-performance',
}
#######################################
####,builder,for,mac64-performance,####
#######################################
mac_64_performance_factory,=,factory.BuildFactory()
mac_64_performance_factory.addStep(sync_clean)
mac_64_performance_factory.addStep(sync_clone(url=HG_URL))
mac_64_performance_factory.addStep(sync_update)
mac_64_performance_factory.addStep(bb_slaveupdate(slave="mac64-performance"))
mac_64_performance_factory.addStep(bb_lockacquire)
mac_64_performance_factory.addStep(perf_prepare)
mac_64_performance_factory.addStep(perf_release)
mac_64_performance_factory.addStep(perf_release_interp)
mac_64_performance_factory.addStep(perf_release_jit)
mac_64_performance_factory.addStep(util_process_clean)
mac_64_performance_factory.addStep(util_clean_buildsdir)
mac_64_performance_factory.addStep(bb_lockrelease)
mac_64_performance_builder,=,{
'name':,"mac64-performance-argo",
'slavename':,"mac64-performance",
'factory':,mac_64_performance_factory,
'builddir':,'./argo-mac64-performance',
}
#########################################
####,builder,for,mac-ppc-performance,####
#########################################
mac_ppc_performance_factory,=,factory.BuildFactory()
mac_ppc_performance_factory.addStep(sync_clean)
mac_ppc_performance_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_performance_factory.addStep(sync_update)
mac_ppc_performance_factory.addStep(bb_slaveupdate(slave="mac-ppc-performance"))
mac_ppc_performance_factory.addStep(bb_lockacquire)
mac_ppc_performance_factory.addStep(perf_prepare)
mac_ppc_performance_factory.addStep(perf_release)
mac_ppc_performance_factory.addStep(perf_release_interp)
mac_ppc_performance_factory.addStep(perf_release_jit)
mac_ppc_performance_factory.addStep(util_process_clean)
mac_ppc_performance_factory.addStep(util_clean_buildsdir)
mac_ppc_performance_factory.addStep(bb_lockrelease)
mac_ppc_performance_builder,=,{
'name':,"mac-ppc-performance-argo",
'slavename':,"mac-ppc-performance",
'factory':,mac_ppc_performance_factory,
'builddir':,'./argo-mac-ppc-performance',
}
#######################################
####,builder,for,linux-performance,####
#######################################
linux_performance_factory,=,factory.BuildFactory()
linux_performance_factory.addStep(sync_clean)
linux_performance_factory.addStep(sync_clone(url=HG_URL))
linux_performance_factory.addStep(sync_update)
linux_performance_factory.addStep(bb_slaveupdate(slave="linux-performance"))
linux_performance_factory.addStep(bb_lockacquire)
linux_performance_factory.addStep(perf_prepare)
linux_performance_factory.addStep(perf_release)
linux_performance_factory.addStep(perf_release_interp)
linux_performance_factory.addStep(perf_release_jit)
linux_performance_factory.addStep(util_process_clean)
linux_performance_factory.addStep(util_clean_buildsdir)
linux_performance_factory.addStep(bb_lockrelease)
linux_performance_builder,=,{
'name':,"linux-performance-argo",
'slavename':,"linux-performance",
'factory':,linux_performance_factory,
'builddir':,'./argo-linux-performance',
}
###########################################
####,builder,for,android-performance,######
###########################################
android_performance_factory,=,factory.BuildFactory()
android_performance_factory.addStep(sync_clean)
android_performance_factory.addStep(sync_clone(url=HG_URL))
android_performance_factory.addStep(sync_update)
android_performance_factory.addStep(bb_slaveupdate(slave="android-performance"))
android_performance_factory.addStep(perf_prepare)
android_performance_factory.addStep(BuildShellCommand(
command=['./run-performance-release-android.sh',WithProperties('%s','revision')],
env={'branch':WithProperties('%s','branch')},
description='running,android,performance...',
descriptionDone='finished,running,android,performance.',
name="Release",
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600)
)
android_performance_factory.addStep(BuildShellCommand(
command=['./run-performance-release-android-interp.sh',WithProperties('%s','revision')],
env={'branch':WithProperties('%s','branch')},
description='running,android,interp,performance...',
descriptionDone='finished,running,android,interp,performance.',
name="ReleaseInterp",
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600)
)
android_performance_factory.addStep(BuildShellCommand(
command=['./run-performance-release-android-jit.sh',WithProperties('%s','revision')],
env={'branch':WithProperties('%s','branch')},
description='running,android,jit,performance...',
descriptionDone='finished,running,android,jit,performance.',
name="ReleaseJIT",
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600)
)
android_performance_factory.addStep(util_clean_buildsdir)
android_performance_builder,=,{
'name':,"android-performance-argo",
'slavename':,"android-performance",
'factory':,android_performance_factory,
'builddir':,'./argo-android-performance',
}
###########################################
####,builder,for,winmobile-performance,####
###########################################
winmobile_performance_factory,=,factory.BuildFactory()
winmobile_performance_factory.addStep(sync_clean)
winmobile_performance_factory.addStep(sync_clone(url=HG_URL))
winmobile_performance_factory.addStep(sync_update)
winmobile_performance_factory.addStep(bb_slaveupdate(slave="winmobile-performance"))
winmobile_performance_factory.addStep(bb_lockacquire)
winmobile_performance_factory.addStep(perf_prepare)
winmobile_performance_factory.addStep(perf_release_arm)
winmobile_performance_factory.addStep(perf_release_arm_interp)
winmobile_performance_factory.addStep(perf_release_arm_jit)
winmobile_performance_factory.addStep(util_clean_buildsdir)
winmobile_performance_factory.addStep(bb_lockrelease)
winmobile_performance_builder,=,{
'name':,"winmobile-performance-argo",
'slavename':,"winmobile-performance",
'factory':,winmobile_performance_factory,
'builddir':,'./argo-winmobile-performance',
}
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,DEEP,TEST,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
##################################
####,builder,for,windows-deep,####
##################################
windows_deep_factory,=,factory.BuildFactory()
windows_deep_factory.addStep(sync_clean)
windows_deep_factory.addStep(sync_clone(url=HG_URL))
windows_deep_factory.addStep(sync_update)
windows_deep_factory.addStep(bb_slaveupdate(slave="windows-deep"))
windows_deep_factory.addStep(download_testmedia)
windows_deep_factory.addStep(deep_release_esc)
windows_deep_factory.addStep(deep_codecoverage)
windows_deep_factory.addStep(test_misc)
windows_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,args="--enable-shell,--enable-override-global-new,--enable-use-system-malloc,--enable-debugger",,upload="true"))
windows_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,vmargs="",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random"))
windows_deep_factory.addStep(test_generic(name="Release_Verify",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random"))
windows_deep_factory.addStep(util_process_clean)
windows_deep_factory.addStep(util_clean_buildsdir)
windows_deep_builder,=,{
'name':,"windows-deep-argo",
'slavename':,"windows-deep",
'factory':,windows_deep_factory,
'builddir':,'./argo-windows-deep',
}
##################################
####,builder,for,windows-p3-deep,####
##################################
windows_p3_deep_factory,=,factory.BuildFactory()
windows_p3_deep_factory.addStep(sync_clean)
windows_p3_deep_factory.addStep(sync_clone(url=HG_URL))
windows_p3_deep_factory.addStep(sync_update)
windows_p3_deep_factory.addStep(bb_slaveupdate(slave="windows-p3-deep"))
windows_p3_deep_factory.addStep(download_testmedia)
windows_p3_deep_factory.addStep(test_smoke)
windows_p3_deep_factory.addStep(test_commandline)
windows_p3_deep_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
windows_p3_deep_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
windows_p3_deep_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_p3_deep_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_p3_deep_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
windows_p3_deep_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
windows_p3_deep_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
windows_p3_deep_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
#windows_p3_deep_factory.addStep(test_differential)
windows_p3_deep_factory.addStep(util_process_clean)
windows_p3_deep_factory.addStep(util_clean_buildsdir)
windows_p3_deep_builder,=,{
'name':,"windows-p3-deep-argo",
'slavename':,"windows-p3-deep",
'factory':,windows_p3_deep_factory,
'builddir':,'./argo-windows-p3-deep',
}
##################################
####,builder,for,windows-frr,####
##################################
windows_frr_factory,=,factory.BuildFactory()
windows_frr_factory.addStep(BuildShellCommand(
command=['./build-frr.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='building,frr...',
descriptionDone='finished,building,frr.',
name="BuildFRR",
workdir="../scripts",
timeout=3600)
)
windows_frr_factory.addStep(BuildShellCommand(
command=['./run-frunit.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='running,frunit...',
descriptionDone='finished,running,frunit.',
name="RunFrunit",
workdir="../scripts",
timeout=3600)
)
windows_frr_builder,=,{
'name':,"windows-frr-argo",
'slavename':,"windows-frr",
'factory':,windows_frr_factory,
'builddir':,'./argo-windows-frr',
}
##################################
####,builder,for,mac-ppc-deep,####
##################################
mac_ppc_deep_factory,=,factory.BuildFactory()
mac_ppc_deep_factory.addStep(sync_clean)
mac_ppc_deep_factory.addStep(sync_clone(url=HG_URL))
mac_ppc_deep_factory.addStep(sync_update)
mac_ppc_deep_factory.addStep(bb_slaveupdate(slave="mac-ppc-deep"))
mac_ppc_deep_factory.addStep(download_testmedia)
mac_ppc_deep_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_ppc",,vmargs="",,config="ppc-mac-tvm-debug-deep",,scriptargs=""))
mac_ppc_deep_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_ppc",,vmargs="",,config="ppc-mac-tvm-debugdebugger-deep",,scriptargs=""))
mac_ppc_deep_factory.addStep(test_generic(name="Debug64",,shellname="avmshell_d_64_ppc",,vmargs="",,config="ppc-mac-tvm-debug-deep",,scriptargs=""))
mac_ppc_deep_factory.addStep(test_generic(name="DebugDebugger64",,shellname="avmshell_sd_64_ppc",,vmargs="",,config="ppc-mac-tvm-debugdebugger-deep",,scriptargs=""))
mac_ppc_deep_factory.addStep(deep_release_esc)
mac_ppc_deep_factory.addStep(test_misc)
mac_ppc_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_ppc",,args="--enable-shell,--enable-override-global-new,--enable-use-system-malloc,--enable-debugger,--mac-sdk=104u",,upload="true"))
mac_ppc_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_ppc",,vmargs="",,config="",,scriptargs=""))
mac_ppc_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell_ppc",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random"))
mac_ppc_deep_factory.addStep(test_generic(name="Release_Verify",,shellname="avmshell_sd_ppc",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random"))
mac_ppc_deep_factory.addStep(util_process_clean)
mac_ppc_deep_factory.addStep(util_clean_buildsdir)
mac_ppc_deep_builder,=,{
'name':,"mac-ppc-deep-argo",
'slavename':,"mac-ppc-deep",
'factory':,mac_ppc_deep_factory,
'builddir':,'./argo-mac-ppc-deep',
}
########################################
####,builder,for,solaris-sparc-deep,####
########################################
solaris_sparc_deep_factory,=,factory.BuildFactory()
solaris_sparc_deep_factory.addStep(sync_clean)
solaris_sparc_deep_factory.addStep(sync_clone(url=HG_URL))
solaris_sparc_deep_factory.addStep(sync_update)
solaris_sparc_deep_factory.addStep(bb_slaveupdate(slave="solaris-sparc-deep"))
solaris_sparc_deep_factory.addStep(download_testmedia)
solaris_sparc_deep_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="sparc-sol-tvm-debug-deep",,scriptargs=""))
solaris_sparc_deep_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="sparc-sol-tvm-debugdebugger-deep",,scriptargs=""))
#solaris_deep_factory.addStep(deep_release_esc)
solaris_sparc_deep_factory.addStep(test_misc)
solaris_sparc_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random"))
solaris_sparc_deep_factory.addStep(test_generic(name="Release_Verify",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random"))
solaris_sparc_deep_factory.addStep(util_process_clean)
solaris_sparc_deep_factory.addStep(util_clean_buildsdir)
solaris_sparc_deep_builder,=,{
'name':,"solaris-sparc-deep-argo",
'slavename':,"solaris-sparc",
'factory':,solaris_sparc_deep_factory,
'builddir':,'./argo-solaris-sparc-deep',
}
##################################
####,builder,for,windows64-deep,####
##################################
windows_64_deep_factory,=,factory.BuildFactory()
windows_64_deep_factory.addStep(sync_clean)
windows_64_deep_factory.addStep(sync_clone(url=HG_URL))
windows_64_deep_factory.addStep(sync_update)
windows_64_deep_factory.addStep(bb_slaveupdate(slave="windows64-deep"))
windows_64_deep_factory.addStep(download_testmedia)
windows_64_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_64",,args="--enable-shell,--enable-override-global-new,--enable-use-system-malloc,--enable-debugger,--target=x86_64-win",,upload="true"))
windows_64_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_64",,vmargs="",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="x64-win-tvm-debug-deep",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="x64-win-tvm-debugdebugger-deep",,scriptargs=""))
windows_64_deep_factory.addStep(deep_release_esc)
windows_64_deep_factory.addStep(test_generic(name="ReleaseDebugger-Dverifyall",,shellname="avmshell_s_64",,vmargs="-Dverifyall",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger-Dverifyall",,shellname="avmshell_sd_64",,vmargs="-Dverifyall",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(,TestSuiteShellCommand(
command=['../all/run-acceptance-avmdiff-3264.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='starting,to,run,32-64,differential,vmtests...',
descriptionDone='finished,32-64,differential,vmtests.',
name="Testsuite_Differential3264",
workdir="../repo/build/buildbot/slaves/scripts"
)
)
windows_64_deep_factory.addStep(test_misc)
windows_64_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell_64",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random"))
windows_64_deep_factory.addStep(test_generic(name="Release_Verify",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random"))
windows_64_deep_factory.addStep(util_process_clean)
windows_64_deep_factory.addStep(util_clean_buildsdir)
windows_64_deep_builder,=,{
'name':,"windows64-deep-argo",
'slavename':,"windows64-deep",
'factory':,windows_64_deep_factory,
'builddir':,'./argo-windows64-deep',
}
##################################
####,builder,for,winmobile-emulator-deep,####
##################################
winmobile_emulator_deep_factory,=,factory.BuildFactory()
winmobile_emulator_deep_factory.addStep(sync_clean)
winmobile_emulator_deep_factory.addStep(sync_clone(url=HG_URL))
winmobile_emulator_deep_factory.addStep(sync_update)
winmobile_emulator_deep_factory.addStep(bb_slaveupdate(slave="winmobile-arm-deep"))
winmobile_emulator_deep_factory.addStep(download_testmedia)
winmobile_emulator_deep_factory.addStep(test_emulator_generic(name="Release",,shellname="avmshell_arm",,vmargs="",,config="arm-winmobile-emulator-tvm-release-deep",,scriptargs=""))
winmobile_emulator_deep_factory.addStep(test_emulator_generic(name="Release-interp",,shellname="avmshell_arm",,vmargs="-Dinterp",,config="arm-winmobile-emulator-tvm-release-Dinterp-deep",,scriptargs=""))
winmobile_emulator_deep_factory.addStep(test_emulator_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_arm",,vmargs="-Dinterp",,config="arm-winmobile-emulator-tvm-release-Dinterp-deep",,scriptargs=""))
winmobile_emulator_deep_factory.addStep(test_emulator_generic(name="Release-jit",,shellname="avmshell_arm",,vmargs="-Ojit",,config="arm-winmobile-emulator-tvm-release-Ojit-deep",,scriptargs=""))
winmobile_emulator_deep_factory.addStep(util_process_clean)
winmobile_emulator_deep_factory.addStep(util_clean_buildsdir)
winmobile_emulator_deep_builder,=,{
'name':,"winmobile-emulator-deep-argo",
'slavename':,"winmobile-emulator-deep",
'factory':,winmobile_emulator_deep_factory,
'builddir':,'./argo-winmobile-emulator-deep',
}
##################################
####,builder,for,linux-deep,,,####
##################################
linux_deep_factory,=,factory.BuildFactory()
linux_deep_factory.addStep(sync_clean)
linux_deep_factory.addStep(sync_clone(url=HG_URL))
linux_deep_factory.addStep(sync_update)
linux_deep_factory.addStep(bb_slaveupdate(slave="linux-deep"))
linux_deep_factory.addStep(download_testmedia)
linux_deep_factory.addStep(test_generic(name="Release-Djitordie",,shellname="avmshell",,vmargs="-Djitordie",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="ReleaseDebugger-nodebugger",,shellname="avmshell_s",,vmargs="-Dnodebugger",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="DebugDebugger-nodebugger",,shellname="avmshell_sd",,vmargs="-Dnodebugger",,config="",,scriptargs=""))
linux_deep_factory.addStep(compile_generic(name="Release-nojit",,shellname="avmshell_nojit",,args="--enable-shell,--disable-jit",,upload="true"))
linux_deep_factory.addStep(test_generic(name="Release-nojit",,shellname="avmshell_nojit",,vmargs="",,config="x86-lnx-tvm-release-nojit",,scriptargs=""))
linux_deep_factory.addStep(compile_generic(name="Release-system-malloc",,shellname="avmshell_sysmalloc",,args="--enable-shell,--enable-use-system-malloc",,upload="true"))
linux_deep_factory.addStep(test_generic(name="Release-system-malloc",,shellname="avmshell_sysmalloc",,vmargs="",,config="x86-lnx-tvm-release-use-system-malloc",,scriptargs=""))
linux_deep_factory.addStep(test_misc)
linux_deep_factory.addStep(deep_codecoverage)
linux_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,args="--enable-shell,--enable-override-global-new,--enable-use-system-malloc,--enable-debugger",,upload="true"))
linux_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,vmargs="",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random"))
linux_deep_factory.addStep(test_generic(name="Release_Verify",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random"))
linux_deep_factory.addStep(util_process_clean)
linux_deep_factory.addStep(util_clean_buildsdir)
linux_deep_builder,=,{
'name':,"linux-deep-argo",
'slavename':,"linux-deep",
'factory':,linux_deep_factory,
'builddir':,'./argo-linux-deep',
}
######################################
####,builder,for,linux-arm-deep,,,####
######################################
linux_arm_deep_factory,=,factory.BuildFactory()
linux_arm_deep_factory.addStep(sync_clean)
linux_arm_deep_factory.addStep(sync_clone(url=HG_URL))
linux_arm_deep_factory.addStep(sync_update)
linux_arm_deep_factory.addStep(bb_slaveupdate(slave="linux-arm-deep"))
linux_arm_deep_factory.addStep(download_testmedia)
linux_arm_deep_factory.addStep(test_generic(name="Debug-softfloat",,shellname="avmshell_neon_arm_d",,vmargs="",,config="",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic(name="Release-softfloat-deep",,shellname="avmshell_neon_arm",,vmargs="",,config="arm-lnx-tvm-release-deep",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic(name="Release-deep",,shellname="avmshell_neon_arm",,vmargs="-Darm_arch,7,-Darm_vfp",,config="arm-lnx-tvm-release-deep",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic(name="Release-Dinterp-deep",,shellname="avmshell_neon_arm",,vmargs="-Dinterp",,config="arm-lnx-tvm-release-Dinterp-deep",,scriptargs=""))
linux_arm_deep_factory.addStep(util_process_clean)
linux_arm_deep_factory.addStep(util_clean_buildsdir)
linux_arm_deep_builder,=,{
'name':,"linux-arm-deep-argo",
'slavename':,"linux-arm-deep",
'factory':,linux_arm_deep_factory,
'builddir':,'./argo-linux-arm-deep',
}
builders,=,[
windows_compile_builder,
windows_64_compile_builder,
mac_intel_104_compile_builder,
mac_intel_105_compile_builder,
mac_intel_64_compile_builder,
mac_ppc_104a_compile_builder,
mac_ppc_104b_compile_builder,
mac_ppc_105a_compile_builder,
mac_ppc_105b_compile_builder,
mac_ppc_64_compile_builder,
mac_ppc_64b_compile_builder,
linux_compile_builder,
linux_64_compile_builder,
winmobile_emulator_compile_builder,
solaris_sparc_compile_builder,
solaris_sparc2_compile_builder,
android_compile_builder,
linux_arm_compile_builder,
linux_arm2_compile_builder,
windows_smoke_builder,
windows_64_smoke_builder,
mac_intel_104_smoke_builder,
mac_intel_105_smoke_builder,
mac_intel_64_smoke_builder,
mac_ppc_104a_smoke_builder,
mac_ppc_104b_smoke_builder,
mac_ppc_105a_smoke_builder,
mac_ppc_105b_smoke_builder,
mac_ppc_64_smoke_builder,
mac_ppc_64b_smoke_builder,
linux_smoke_builder,
linux_64_smoke_builder,
winmobile_emulator_smoke_builder,
solaris_sparc_smoke_builder,
solaris_sparc2_smoke_builder,
android_smoke_builder,
linux_arm_smoke_builder,
linux_arm2_smoke_builder,
windows_test_builder,
windows_64_test_builder,
mac_intel_104_test_builder,
mac_intel_105_test_builder,
mac_intel_64_test_builder,
mac_ppc_104a_test_builder,
mac_ppc_104b_test_builder,
mac_ppc_105a_test_builder,
mac_ppc_105b_test_builder,
mac_ppc_64_test_builder,
mac_ppc_64b_test_builder,
linux_test_builder,
linux_64_test_builder,
winmobile_emulator_test_builder,
solaris_sparc_test_builder,
solaris_sparc2_test_builder,
android_test_builder,
linux_arm_test_builder,
linux_arm2_test_builder,
windows_performance_builder,
mac_performance_builder,
mac_64_performance_builder,
mac_ppc_performance_builder,
linux_performance_builder,
winmobile_performance_builder,
android_performance_builder,
windows_deep_builder,
windows_p3_deep_builder,
mac_ppc_deep_builder,
windows_64_deep_builder,
solaris_sparc_deep_builder,
winmobile_emulator_deep_builder,
linux_deep_builder,
linux_arm_deep_builder,
windows_frr_builder
]
#,-*-,python,-*-
#,ex:,set,syntax=python:
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,buildbot.process,import,factory
from,buildbot.steps.source,import,Mercurial
from,buildbot.steps.shell,import,*
from,custom.buildbot_ext.steps.shellAddons,import,*
from,buildbot.steps.trigger,import,Trigger
#######,Utility,Functions,for,ignoring,certain,file,types
def,startPerformanceRun(change):
for,name,in,change.files:
if,name.endswith(('.cpp','.h','.py','asm','.as')):
return,True
elif,name.endswith('.abc'):
#,Only,run,if,abc,is,not,in,esc,dir
if,'/esc/',not,in,name:
return,True
return,False
def,startCompile(change):
'''Determine,whether,we,want,to,start,a,compile,pass,based,on,the,files,that
have,changed.,,Only,skip,compile,if,ALL,changes,are,in,the,ignore,criteria.
'''
compile,=,True
for,name,in,change.files:
#,ignore,all,changes,to,buildbot,master,files
if,('/buildbot/master/',in,name),or,('utils/hooks/',in,name):
compile,=,False
#,ignore,changes,to,the,runsmokes*.txt,files
elif,('runsmokes',in,name),and,name.endswith('.txt'):
compile,=,False
#,ignore,the,build,trigger,files,that,are,added
elif,('change-',in,name):
compile,=,False
else:
return,True
return,compile
############################
#######,COMMON,BUILD,STEPS
############################
#,For,an,explanation,of,the,WithProperties('(%(silent:-)s'),syntax,see
#,http://djmitche.github.com/buildbot/docs/current/#Using-Build-Properties
def,compile_generic(name,,shellname,,args,,upload,,features=""):
#,factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="",,upload="false",,features="+AVMSYSTEM_32BIT"))
#,upload:,if,true,build,will,be,uploaded,to,asteam,,this,is,normaly,done,in,the,upload,buildstep
#,,,,,,,,,but,is,here,for,shells,that,are,compiled,in,deep-testing
return,BuildShellCommand(
command=['../all/compile-generic.sh',,WithProperties('%s','revision'),,'%s',%,args,,'%s',%,shellname,,'%s',%,upload,,'%s',%,features],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,%s,build...',%,name,
descriptionDone='finished,%s,build',%,name,
name="Build_%s",%,name,
workdir="../repo/build/buildbot/slaves/scripts"
)
def,test_generic(name,,shellname,,vmargs,,config,,scriptargs,,_timeout=1200):
#,factory.addStep(test_generic("Release",,"avmshell",,"",,"",,""))
return,TestSuiteShellCommand(
command=['../all/run-acceptance-generic.sh',,WithProperties('%s','revision'),,'%s',%,shellname,,'%s',%,vmargs,,'%s',%,config,,'%s',%,scriptargs],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,%s,vmtests...',%,name,
descriptionDone='finished,%s,vmtests',%,name,
name="Testsuite_%s",%,name,
workdir="../repo/build/buildbot/slaves/scripts",
timeout=_timeout
)
def,test_generic_ssh(name,,shellname,,vmargs,,config,,scriptargs):
#,factory.addStep(test_generic_ssh("Release",,"avmshell",,"",,"",,""))
return,TestSuiteShellCommand(
command=['../all/run-acceptance-generic-ssh.sh',,WithProperties('%s','revision'),,'%s',%,shellname,,'%s',%,vmargs,,'%s',%,config,,'%s',%,scriptargs],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,%s,vmtests...',%,name,
descriptionDone='finished,%s,vmtests',%,name,
name="Testsuite_%s",%,name,
workdir="../repo/build/buildbot/slaves/scripts"
)
def,test_generic_adb(name,,shellname,,vmargs,,config,,scriptargs):
#,factory.addStep(test_generic_adb("Release",,"avmshell",,"",,"",,""))
return,TestSuiteShellCommand(
command=['../all/run-acceptance-generic-adb.sh',,WithProperties('%s','revision'),,'%s',%,shellname,,'%s',%,vmargs,,'%s',%,config,,'%s',%,scriptargs],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,%s,vmtests...',%,name,
descriptionDone='finished,%s,vmtests',%,name,
name="Testsuite_%s",%,name,
workdir="../repo/build/buildbot/slaves/scripts"
)
def,test_emulator_generic(name,,shellname,,vmargs,,config,,scriptargs):
#,factory.addStep(test_emulator_generic("Release",,"avmshell",,"",,"",,""))
return,TestSuiteShellCommand(
command=['../all/run-acceptance-emulator-generic.sh',,WithProperties('%s','revision'),,'%s',%,shellname,,'%s',%,vmargs,,'%s',%,config,,'%s',%,scriptargs],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,%s,vmtests...',%,name,
descriptionDone='finished,%s,vmtests',%,name,
name="Testsuite_%s",%,name,
workdir="../repo/build/buildbot/slaves/scripts",
timeout=3600,
)
sync_clean,=,ShellCommand(
command=["rm",,"-Rf",,"repo"],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Remove,the,old,repository...',
descriptionDone='Finished,Removing,the,old,repository',
name='Source_Clean',
workdir="../",
haltOnFailure="True",
usePTY=False)
#,Do,not,use,PTY,when,calling,'rm',as,it,will,sometimes,report,a,failure.
#,,,,http://buildbot.net/trac/ticket/284
#,,,,http://buildbot.net/trac/ticket/255
def,sync_clone(url):
return,ShellCommand(
command=["hg",,"clone",,url,,"repo"],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Cloning,the,source,repository...',
descriptionDone='Finished,cloning,the,source,repository',
name='Source_Clone',
workdir="../",
haltOnFailure="True")
sync_clone_sandbox,=,SandboxClone(
dest="repo",
changeDir="changes/deep/processed",
description='Cloning,the,source,repository...',
descriptionDone='Finished,cloning,the,source,repository',
name='Source_Clone',
workdir="../",
haltOnFailure="True")
sync_update,=,ShellCommand(
command=["hg",,"update",,"--clean",,,"--rev",,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Updating,the,source,repository...',
descriptionDone='Finished,updating,the,source,repository',
name='Source_Update',
workdir="../repo",
haltOnFailure="True")
#,pull,new,changes,into,an,existing,repository.,,Used,on,promote-build,slave,to
#,save,time,instead,of,deleting,/,recloning,entire,repo.
sync_pull,=,ShellCommand(
command=["hg",,"pull"],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Pulling,new,changes,to,source,repository...',
descriptionDone='Finished,pulling,new,changes,to,source,repository',
name='Source_Pull',
workdir="../repo",
haltOnFailure="True")
def,bb_slaveupdate(slave):
return,ShellCommand(
command=['cp','-R','repo/build/buildbot/slaves/%s/scripts',%,slave,,'repo/build/buildbot/slaves/scripts'],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
workdir='../',
description='Updating,SLAVE,buildscripts',
name='BB_SLAVEUpdate',
haltOnFailure="True",
usePTY=False)
#,Do,not,use,PTY,when,calling,'cp',as,it,will,sometimes,report,a,failure.
#,,,,http://buildbot.net/trac/ticket/284
#,,,,http://buildbot.net/trac/ticket/255
bb_lockacquire,=,BuildShellCommand(
command=['../all/lock-acquire.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Acquiring,machine,lock...',
descriptionDone='Acquired,machine,lock...',
name="LockAcquire",
workdir="../repo/build/buildbot/slaves/scripts")
bb_lockrelease,=,BuildShellCommand(
command=['../all/lock-release.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Releasing,machine,lock...',
descriptionDone='Released,machine,lock...',
name="LockRelease",
workdir="../repo/build/buildbot/slaves/scripts")
verify_builtinabc,=,BuildShellCommand(
command=['../all/verify-builtinabc.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,verify,generated,builtin,files..',
descriptionDone='generated,builtin,files,diff,completed',
name="Verify_BuiltinABC",
workdir="../repo/build/buildbot/slaves/scripts")
verify_tracers,=,BuildShellCommand(
command=['../all/verify-tracers.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,verify,generated,exactgc,tracer,files..',
descriptionDone='generated,exactgc,tracer,files,diff,completed',
name="Verify_Tracers",
workdir="../repo/build/buildbot/slaves/scripts")
compile_buildcheck,=,BuildShellCheckCommand(
command=['../all/build-check.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,build,check...',
descriptionDone='build,check,completed',
name='Build_Check',
workdir="../repo/build/buildbot/slaves/scripts")
##,Local,version,runs,a,local,script,and,not,the,common
compile_buildcheck_local,=,BuildShellCheckCommand(
command=['./build-check.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,build,check...',
descriptionDone='build,check,completed',
name='Build_Check',
workdir="../repo/build/buildbot/slaves/scripts")
compile_testmedia,=,BuildShellCommand(
command=['../all/build-acceptance-tests.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,build,test,abcs...',
descriptionDone='vm,test,abcs,built.',
name="Compile_AS_testcases",
workdir="../repo/build/buildbot/slaves/scripts")
download_testmedia,=,BuildShellCommand(
command=['../all/download-acceptance-tests.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,downloads,test,abcs...',
descriptionDone='vm,test,abcs,downloaded.',
name="Download_AS_testcases",
workdir="../repo/build/buildbot/slaves/scripts",
haltOnFailure="True",)
test_smoke,=,TestSuiteShellCommand(
command=['../all/run-smoketests.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,smoke,tests...',
descriptionDone='finished,smoke,tests.',
name="SmokeTest",
workdir="../repo/build/buildbot/slaves/scripts")
test_smoke_ssh,=,TestSuiteShellCommand(
command=['../all/run-smoketests-ssh.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,smoke,tests...',
descriptionDone='finished,smoke,tests.',
name="SmokeTest",
workdir="../repo/build/buildbot/slaves/scripts")
test_smoke_local,=,TestSuiteShellCommand(
command=['./run-smoketests.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,smoke,tests...',
descriptionDone='finished,smoke,tests.',
name="SmokeTest",
workdir="../repo/build/buildbot/slaves/scripts")
test_emulator_smoke_mobile,=,TestSuiteShellCommand(
command=['../all/run-smoketests-arm-emulator.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,smoke,tests...',
descriptionDone='finished,smoke,tests.',
name="SmokeTest",
workdir="../repo/build/buildbot/slaves/scripts")
def,test_selftest(name,,shellname):
#,factory.addStep(test_selftest("Release",,"avmshell"))
return,TestSuiteShellCommand(
command=['../all/run-selftest-generic.sh',,WithProperties('%s','revision'),,'%s',%,shellname],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,selftest,%s...',%,name,
descriptionDone='finished,selftest,%s.',%,name,
name="Testsuite_Selftest_%s",%,name,
workdir="../repo/build/buildbot/slaves/scripts"
)
def,test_selftest_ssh(name,,shellname):
#,factory.addStep(test_selftest_ssh("Release",,"avmshell"))
return,TestSuiteShellCommand(
command=['../all/run-selftest-generic-ssh.sh',,WithProperties('%s','revision'),,'%s',%,shellname],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,selftest,%s...',%,name,
descriptionDone='finished,selftest,%s.',%,name,
name="Testsuite_Selftest_%s",%,name,
workdir="../repo/build/buildbot/slaves/scripts"
)
test_commandline,=,TestSuiteShellCommand(
command=['../all/run-commandline-tests.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,commandline,tests...',
descriptionDone='finished,commandline,tests.',
name="Testsuite_Commandline",
workdir="../repo/build/buildbot/slaves/scripts")
test_differential,=,TestSuiteShellCommand(
command=['../all/run-acceptance-avmdiff.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,vm,acceptance,differential,testing...',
descriptionDone='finished,vm,acceptance,differential,testing.',
name="Testsuite_Differential",
workdir="../repo/build/buildbot/slaves/scripts")
test_misc,=,TestSuiteShellCommand(
command=['../all/run-misc-tests.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,misc,tests...',
descriptionDone='finished,misc,tests.',
name="MiscTest",
workdir="../repo/build/buildbot/slaves/scripts")
util_upload_asteam,=,BuildShellCheckCommand(
command=['../all/upload-asteam.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Upload,bits,to,ASTEAM...',
descriptionDone='Upload,to,ASTEAM,completed',
name='Upload_ASTEAM',
workdir="../repo/build/buildbot/slaves/scripts")
##,Local,version,runs,a,local,script,and,not,the,common
util_upload_asteam_local,=,BuildShellCheckCommand(
command=['./upload-asteam.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Upload,bits,to,ASTEAM...',
descriptionDone='Upload,to,ASTEAM,completed',
name='Upload_ASTEAM',
workdir="../repo/build/buildbot/slaves/scripts")
util_upload_mozilla,=,BuildShellCheckCommand(
command=['../all/upload-mozilla.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Upload,bits,to,MOZILLA...',
descriptionDone='Upload,to,MOZILLA,completed',
name='Upload_MOZILLA',
workdir="../repo/build/buildbot/slaves/scripts")
##,Local,version,runs,a,local,script,and,not,the,common
util_upload_mozilla_local,=,BuildShellCheckCommand(
command=['./upload-mozilla.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Upload,bits,to,MOZILLA...',
descriptionDone='Upload,to,MOZILLA,completed',
name='Upload_MOZILLA',
workdir="../repo/build/buildbot/slaves/scripts")
util_process_clean,=,BuildShellCommand(
command=['../all/util-process-clean.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Zombie,hunting...',
descriptionDone='Zombie,hunt,completed',
name='Util_ZombieKiller',
workdir="../repo/build/buildbot/slaves/scripts",
alwaysRun="True",)
util_process_clean_ssh,=,BuildShellCommand(
command=['../all/util-process-clean-ssh.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Zombie,hunting...',
descriptionDone='Zombie,hunt,completed',
name='Util_ZombieKiller',
workdir="../repo/build/buildbot/slaves/scripts",
alwaysRun="True",)
util_acceptance_clean_ssh,=,BuildShellCommand(
command=['../all/util-acceptance-clean-ssh.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Cleaning,acceptance,tests...',
descriptionDone='Cleaning,acceptance,tests,completed',
name='Util_CleanAcceptanceTests',
workdir="../repo/build/buildbot/slaves/scripts",
alwaysRun="True",)
util_clean_buildsdir,=,BuildShellCommand(
command=['../all/util-clean-buildsdir.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Remove,build,folders,older,than,one,week...',
descriptionDone='Finished,removing,build,folders',
name="Clean_Build_Dir",,,,,,,,,,,,,
workdir="../repo/build/buildbot/slaves/scripts",
alwaysRun="True",)
perf_prepare,=,BuildShellCommand(
command=['./prepare.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='Preparing,for,performance,run...',
descriptionDone='Preparation,complete...',
name="Preparation",
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts")
perf_release,=,PerfShellCommand(
command=['../all/run-performance-release.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,release,performance,tests...',
descriptionDone='finished,release,performance,tests.',
name='Release',
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts")
perf_release_arm,=,PerfShellCommand(
command=['../all/run-performance-release-arm.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,release,performance,tests...',
descriptionDone='finished,release,performance,tests.',
name='Release',
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts")
perf_release_interp,=,PerfShellCommand(
command=['../all/run-performance-release-interp.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,release-interp,performance,tests...',
descriptionDone='finished,release-interp,performance,tests.',
name='ReleaseInterp',
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts")
perf_release_arm_interp,=,PerfShellCommand(
command=['../all/run-performance-release-arm-interp.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,release-interp,performance,tests...',
descriptionDone='finished,release-interp,performance,tests.',
name='ReleaseInterp',
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts")
perf_release_jit,=,PerfShellCommand(
command=['../all/run-performance-release-jit.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,release-jit,performance,tests...',
descriptionDone='finished,release-jit,performance,tests.',
name='ReleaseJIT',
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts")
perf_release_arm_jit,=,PerfShellCommand(
command=['../all/run-performance-release-arm-jit.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,release-jit,performance,tests...',
descriptionDone='finished,release-jit,performance,tests.',
name='ReleaseJIT',
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts")
def,acceptance_performance(name,,shellname,,vmargs="",,config="",,scriptargs=""):
return,test_generic(
name="Acceptance_Performance_%s",%,name,,shellname=shellname,,vmargs=vmargs,,config=config,
scriptargs="--threads=1,--addtoconfig=-performance,%s",%,scriptargs)
def,deep_codecoverage(compilecsv,,testcsv):
return,BuildShellCommand(
command=['../all/codecoverage-runner.sh',,'-b',,WithProperties('%s','revision'),,'--compilecsv=%s',%,compilecsv,,'--testcsv=%s',%,testcsv],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,code,coverage...',
descriptionDone='finished,code,coverage',
name='CodeCoverage',
timeout=3600,
workdir="../repo/build/buildbot/slaves/scripts"
)
deep_codecoverage_process,=,BuildShellCommand(
command=['../all/codecoverage-process.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,process,coverage,data...',
descriptionDone='finished,processing,coverage,data',
name='CodeCoverageProcess',
workdir="../repo/build/buildbot/slaves/scripts"
)
deep_release_esc,=,BuildShellCommand(
command=['../all/run-release-esc.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,release-esc,tests...',
descriptionDone='finished,release-esc,tests.',
name='Release-esc',
workdir="../repo/build/buildbot/slaves/scripts")
def,deep_run_brightspot(name,shell,testargs):
return,TestSuiteShellCommand(
command=['../all/run-brightspot.sh',,WithProperties('%s','revision'),,shell,,testargs],
env={'branch':,WithProperties('%s','branch'),,'silent':,WithProperties('%s','silent')},
description='running,%s,BrightSpot...',%,name,
descriptionDone='finished,running,%s,BrightSpot.',%,name,
name='BrightSpot,%s',%,name,
workdir='../repo/build/buildbot/slaves/scripts',
timeout=3600)
#,-*-,python,-*-
#,ex:,set,syntax=python:
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,buildbot.process,import,factory
from,buildbot.steps.source,import,Mercurial
from,buildbot.steps.shell,import,*
from,custom.buildbot_ext.steps.shellAddons,import,*
from,buildbot.steps.trigger,import,Trigger
from,commonsteps,import,*
class,sandbox:
BRANCHES,=,["sandbox"]
#######,SCHEDULERS
from,buildbot.scheduler,import,*
#,custom.buildbot_ext.scheduler,import,MUST,happen,after,importing,buildbot.scheduler
from,custom.buildbot_ext.scheduler,import,*
####,SANDBOX
compile,=,Scheduler(name="compile-sandbox",,branch=BRANCHES,,treeStableTimer=30,,properties={'silent':'true'},
builderNames=["windows-compile-sandbox",,"windows64-compile-sandbox",
"mac-intel-10.5-compile-sandbox",,"mac64-intel-compile-sandbox",
"linux-compile-sandbox",
"linux64-compile-sandbox",
"android-compile-sandbox",
"linux-arm-compile-sandbox",
"linux-mips-compile-sandbox",
])
smoke,=,BuilderDependent(name="smoke-sandbox",upstream=compile,,callbackInterval=60,,properties={'silent':'true'},
builderNames=["windows-smoke-sandbox",,"windows64-smoke-sandbox",
"mac-intel-10.5-smoke-sandbox",,"mac64-intel-smoke-sandbox",
"linux-smoke-sandbox",
"linux64-smoke-sandbox",
"android-smoke-sandbox",
"linux-arm-smoke-sandbox",
"linux-mips-smoke-sandbox",
],
builderDependencies=[
["windows-smoke-sandbox",,"windows-compile-sandbox"],,
["windows64-smoke-sandbox",,"windows64-compile-sandbox"],,
["mac-intel-10.5-smoke-sandbox",,"mac-intel-10.5-compile-sandbox"],
["mac64-intel-smoke-sandbox",,"mac64-intel-compile-sandbox"],
["linux-smoke-sandbox",,"linux-compile-sandbox"],
["linux64-smoke-sandbox",,"linux64-compile-sandbox"],
["android-smoke-sandbox","android-compile-sandbox"],
["linux-arm-smoke-sandbox","linux-arm-compile-sandbox"],
["linux-mips-smoke-sandbox","linux-mips-compile-sandbox"],
])
test,=,BuilderDependent(name="test-sandbox",upstream=smoke,,callbackInterval=60,,properties={'silent':'true'},
builderNames=["windows-test-sandbox",,"windows64-test-sandbox",
"mac-intel-10.5-test-sandbox",,"mac64-intel-test-sandbox",
"linux-test-sandbox",
"linux64-test-sandbox",
"android-test-sandbox",
"linux-arm-test-sandbox",
"linux-mips-test-sandbox",
],
builderDependencies=[
["windows-test-sandbox",,"windows-smoke-sandbox"],,
["windows64-test-sandbox",,"windows64-smoke-sandbox"],,
["mac-intel-10.5-test-sandbox",,"mac-intel-10.5-smoke-sandbox"],
["mac64-intel-test-sandbox",,"mac64-intel-smoke-sandbox"],
["linux-test-sandbox",,"linux-smoke-sandbox"],
["linux64-test-sandbox",,"linux64-smoke-sandbox"],
["android-test-sandbox",,"android-smoke-sandbox"],
["linux-arm-test-sandbox",,"linux-arm-smoke-sandbox"],
["linux-mips-test-sandbox",,"linux-mips-smoke-sandbox"],
])
schedulers,=,[compile,,smoke,,test]
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,SANDBOX,COMPILE,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
#############################################
####,builder,for,windows-compile-sandbox,####
#############################################
sb_windows_compile_factory,=,factory.BuildFactory()
sb_windows_compile_factory.addStep(sync_clean)
sb_windows_compile_factory.addStep(sync_clone_sandbox)
sb_windows_compile_factory.addStep(sync_update)
sb_windows_compile_factory.addStep(bb_slaveupdate(slave="windows"))
sb_windows_compile_factory.addStep(verify_builtinabc),,,,,,,,
sb_windows_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args=",",,upload="false"))
sb_windows_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-debug",,upload="false"))
sb_windows_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s",,args="--enable-debugger",,upload="false"))
sb_windows_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd",,args="--enable-debug,--enable-debugger",,upload="false"))
sb_windows_compile_factory.addStep(compile_buildcheck)
sb_windows_compile_factory.addStep(verify_tracers),,,,
sb_windows_compile_factory.addStep(util_upload_asteam)
sb_windows_compile_factory.addStep(BuildShellCommand(
command=['../all/file-check.py',,'../../../../../repo'],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='running,file-check,against,source...',
descriptionDone='finished,file-check.',
name="FileCheck",
workdir="../repo/build/buildbot/slaves/scripts")
)
sb_windows_compile_builder,=,{
'name':,"windows-compile-sandbox",
'slavename':,"windows",
'factory':,sb_windows_compile_factory,
'builddir':,'./sandbox-windows-compile',
}
###############################################
####,builder,for,windows64-compile-sandbox,####
###############################################
sb_windows_64_compile_factory,=,factory.BuildFactory()
sb_windows_64_compile_factory.addStep(sync_clean)
sb_windows_64_compile_factory.addStep(sync_clone_sandbox)
sb_windows_64_compile_factory.addStep(sync_update)
sb_windows_64_compile_factory.addStep(bb_slaveupdate(slave="windows64"))
sb_windows_64_compile_factory.addStep(verify_builtinabc),,,,,,,,
sb_windows_64_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_64",,args="--target=x86_64-win",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64"))
sb_windows_64_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d_64",,args="--enable-debug,--target=x86_64-win",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64"))
sb_windows_64_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,args="--enable-debugger,--target=x86_64-win",,upload="false",,features="'+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER"))
sb_windows_64_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,args="--enable-debug,--enable-debugger,--target=x86_64-win",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER"))
sb_windows_64_compile_factory.addStep(compile_buildcheck)
sb_windows_64_compile_factory.addStep(verify_tracers),,,,
sb_windows_64_compile_factory.addStep(util_upload_asteam)
sb_windows_64_compile_builder,=,{
'name':,"windows64-compile-sandbox",
'slavename':,"windows64",
'factory':,sb_windows_64_compile_factory,
'builddir':,'./sandbox-windows64-compile',
}
####################################################
####,builder,for,mac-intel-10_5-compile-sandbox,####
####################################################
sb_mac_intel_105_compile_factory,=,factory.BuildFactory()
sb_mac_intel_105_compile_factory.addStep(sync_clean)
sb_mac_intel_105_compile_factory.addStep(sync_clone_sandbox)
sb_mac_intel_105_compile_factory.addStep(sync_update)
sb_mac_intel_105_compile_factory.addStep(bb_slaveupdate(slave="mac-intel-10_5"))
sb_mac_intel_105_compile_factory.addStep(verify_builtinabc),,,,
sb_mac_intel_105_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="--mac-sdk=105,--target=i686-darwin",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32"))
sb_mac_intel_105_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-debug,--mac-sdk=105,--target=i686-darwin",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32"))
sb_mac_intel_105_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s",,args="--enable-debugger,--mac-sdk=105,--target=i686-darwin",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_DEBUGGER"))
sb_mac_intel_105_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd",,args="--enable-debug,--enable-debugger,--mac-sdk=105,--target=i686-darwin",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_DEBUGGER"))
sb_mac_intel_105_compile_factory.addStep(compile_buildcheck)
sb_mac_intel_105_compile_factory.addStep(verify_tracers)
sb_mac_intel_105_compile_factory.addStep(util_upload_asteam)
sb_mac_intel_105_compile_builder,=,{
'name':,"mac-intel-10.5-compile-sandbox",
'slavename':,"mac-intel-10_5",
'factory':,sb_mac_intel_105_compile_factory,
'builddir':,'./sandbox-mac-intel-10_5-compile',
}
##################################################
####,builder,for,mac-intel-64-compile-sandbox,####
##################################################
sb_mac_intel_64_compile_factory,=,factory.BuildFactory()
sb_mac_intel_64_compile_factory.addStep(sync_clean)
sb_mac_intel_64_compile_factory.addStep(sync_clone_sandbox)
sb_mac_intel_64_compile_factory.addStep(sync_update)
sb_mac_intel_64_compile_factory.addStep(bb_slaveupdate(slave="mac64-intel"))
sb_mac_intel_64_compile_factory.addStep(verify_builtinabc),,,,
sb_mac_intel_64_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_64",,args="--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64"))
sb_mac_intel_64_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d_64",,args="--enable-debug,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64"))
sb_mac_intel_64_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,args="--enable-debugger,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER"))
sb_mac_intel_64_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,args="--enable-debug,--enable-debugger,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER"))
sb_mac_intel_64_compile_factory.addStep(compile_buildcheck)
sb_mac_intel_64_compile_factory.addStep(compile_testmedia),,,,
sb_mac_intel_64_compile_factory.addStep(util_upload_asteam_local)
sb_mac_intel_64_compile_factory.addStep(verify_tracers)
sb_mac_intel_64_compile_builder,=,{
'name':,"mac64-intel-compile-sandbox",
'slavename':,"mac64-intel",
'factory':,sb_mac_intel_64_compile_factory,
'builddir':,'./sandbox-mac64-intel-compile',
}
###########################################
####,builder,for,linux-compile-sandbox,####
###########################################
sb_linux_compile_factory,=,factory.BuildFactory()
sb_linux_compile_factory.addStep(sync_clean)
sb_linux_compile_factory.addStep(sync_clone_sandbox)
sb_linux_compile_factory.addStep(sync_update)
sb_linux_compile_factory.addStep(bb_slaveupdate(slave="linux"))
sb_linux_compile_factory.addStep(verify_builtinabc),,,,
sb_linux_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="--target=i686-linux",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32"))
sb_linux_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-debug,--target=i686-linux",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32"))
sb_linux_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s",,args="--enable-debugger,--target=i686-linux",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_DEBUGGER"))
sb_linux_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd",,args="--enable-debug,--enable-debugger,--target=i686-linux",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_DEBUGGER"))
sb_linux_compile_factory.addStep(compile_buildcheck)
sb_linux_compile_factory.addStep(verify_tracers)
sb_linux_compile_factory.addStep(util_upload_asteam)
sb_linux_compile_builder,=,{
'name':,"linux-compile-sandbox",
'slavename':,"linux",
'factory':,sb_linux_compile_factory,
'builddir':,'./sandbox-linux-compile',
}
#############################################
####,builder,for,linux64-compile-sandbox,####
#############################################
sb_linux_64_compile_factory,=,factory.BuildFactory()
sb_linux_64_compile_factory.addStep(sync_clean)
sb_linux_64_compile_factory.addStep(sync_clone_sandbox)
sb_linux_64_compile_factory.addStep(sync_update)
sb_linux_64_compile_factory.addStep(bb_slaveupdate(slave="linux64"))
sb_linux_64_compile_factory.addStep(verify_builtinabc),,,,
sb_linux_64_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_64",,args=",",,upload="false"))
sb_linux_64_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d_64",,args="--enable-debug",,upload="false"))
sb_linux_64_compile_factory.addStep(compile_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,args="--enable-debugger",,upload="false"))
sb_linux_64_compile_factory.addStep(compile_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,args="--enable-debug,--enable-debugger",,upload="false"))
sb_linux_64_compile_factory.addStep(verify_tracers)
sb_linux_64_compile_factory.addStep(compile_buildcheck)
sb_linux_64_compile_factory.addStep(util_upload_asteam)
sb_linux_64_compile_builder,=,{
'name':,"linux64-compile-sandbox",
'slavename':,"linux64",
'factory':,sb_linux_64_compile_factory,
'builddir':,'./sandbox-linux64-compile',
}
###########################################
####,builder,for,android,on,mac,,,,,,,,####
###########################################
sb_android_compile_factory,=,factory.BuildFactory()
sb_android_compile_factory.addStep(sync_clean)
sb_android_compile_factory.addStep(sync_clone_sandbox)
sb_android_compile_factory.addStep(sync_update)
sb_android_compile_factory.addStep(bb_slaveupdate(slave="android"))
sb_android_compile_factory.addStep(verify_builtinabc),,,,
sb_android_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell",,args="--arm-arch=armv7-a,--target=arm-android",,upload="false"))
sb_android_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_d",,args="--enable-debug,--arm-arch=armv7-a,--target=arm-android",,upload="false"))
sb_android_compile_factory.addStep(verify_tracers)
sb_android_compile_factory.addStep(compile_buildcheck_local)
sb_android_compile_factory.addStep(util_upload_asteam_local)
sb_android_compile_builder,=,{
'name':,"android-compile-sandbox",
'slavename':,"android",
'factory':,sb_android_compile_factory,
'builddir':,'./sandbox-android-compile',
}
###############################
####,builder,for,linux-arm,####
###############################
sb_linux_arm_compile_factory,=,factory.BuildFactory()
sb_linux_arm_compile_factory.addStep(sync_clean)
sb_linux_arm_compile_factory.addStep(sync_clone_sandbox)
sb_linux_arm_compile_factory.addStep(sync_update)
sb_linux_arm_compile_factory.addStep(bb_slaveupdate(slave="linux-arm"))
sb_linux_arm_compile_factory.addStep(verify_builtinabc),,,,
sb_linux_arm_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_neon_arm",,args="--enable-arm-neon,--arm-arch=armv7-a,--target=arm-linux,--enable-sys-root-dir=/usr/local/arm-linux/debian5",,upload="false",,features=""))
sb_linux_arm_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_neon_arm_d",,args="--enable-debug,--enable-arm-neon,--arm-arch=armv7-a,--target=arm-linux,--enable-sys-root-dir=/usr/local/arm-linux/debian5",,upload="false",,features=""))
sb_linux_arm_compile_factory.addStep(verify_tracers)
sb_linux_arm_compile_factory.addStep(compile_buildcheck_local)
sb_linux_arm_compile_factory.addStep(util_upload_asteam_local)
sb_linux_arm_compile_builder,=,{
'name':,"linux-arm-compile-sandbox",
'slavename':,"linux-arm",
'factory':,sb_linux_arm_compile_factory,
'builddir':,'./sandbox-linux-arm-compile',
}
################################
####,builder,for,linux-mips,####
################################
sb_linux_mips_compile_factory,=,factory.BuildFactory()
sb_linux_mips_compile_factory.addStep(sync_clean)
sb_linux_mips_compile_factory.addStep(sync_clone_sandbox)
sb_linux_mips_compile_factory.addStep(sync_update)
sb_linux_mips_compile_factory.addStep(bb_slaveupdate(slave="linux-mips"))
sb_linux_mips_compile_factory.addStep(verify_builtinabc),,,,
sb_linux_mips_compile_factory.addStep(compile_generic(name="Release",,shellname="avmshell_mips",,args="--target=mips-linux",,upload="false",,features=""))
sb_linux_mips_compile_factory.addStep(compile_generic(name="Debug",,shellname="avmshell_mips_d",,args="--enable-debug,--target=mips-linux",,upload="false",,features=""))
sb_linux_mips_compile_factory.addStep(verify_tracers)
sb_linux_mips_compile_factory.addStep(compile_buildcheck_local)
sb_linux_mips_compile_factory.addStep(util_upload_asteam_local)
sb_linux_mips_compile_builder,=,{
'name':,"linux-mips-compile-sandbox",
'slavename':,"linux-mips",
'factory':,sb_linux_mips_compile_factory,
'builddir':,'./sandbox-linux-mips-compile',
}
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,SANDBOX,SMOKE,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
###########################################
####,builder,for,windows-smoke-sandbox,####
###########################################
sb_windows_smoke_factory,=,factory.BuildFactory()
sb_windows_smoke_factory.addStep(download_testmedia)
sb_windows_smoke_factory.addStep(test_smoke)
sb_windows_smoke_factory.addStep(util_process_clean)
sb_windows_smoke_builder,=,{
'name':,"windows-smoke-sandbox",
'slavename':,"windows",
'factory':,sb_windows_smoke_factory,
'builddir':,'./sandbox-windows-smoke',
}
#############################################
####,builder,for,windows64-smoke-sandbox,####
#############################################
sb_windows_64_smoke_factory,=,factory.BuildFactory()
sb_windows_64_smoke_factory.addStep(download_testmedia)
sb_windows_64_smoke_factory.addStep(test_smoke)
sb_windows_64_smoke_factory.addStep(util_process_clean)
sb_windows_64_smoke_builder,=,{
'name':,"windows64-smoke-sandbox",
'slavename':,"windows64",
'factory':,sb_windows_64_smoke_factory,
'builddir':,'./sandbox-windows64-smoke',
}
##################################################
####,builder,for,mac-intel-10_5-smoke-sandbox,####
##################################################
sb_mac_intel_105_smoke_factory,=,factory.BuildFactory()
sb_mac_intel_105_smoke_factory.addStep(download_testmedia)
sb_mac_intel_105_smoke_factory.addStep(test_smoke)
sb_mac_intel_105_smoke_factory.addStep(util_process_clean)
sb_mac_intel_105_smoke_builder,=,{
'name':,"mac-intel-10.5-smoke-sandbox",
'slavename':,"mac-intel-10_5",
'factory':,sb_mac_intel_105_smoke_factory,
'builddir':,'./sandbox-mac-intel-10_5-smoke',
}
###############################################
####,builder,for,mac64-intel-smoke-sandbox,####
###############################################
sb_mac_intel_64_smoke_factory,=,factory.BuildFactory()
sb_mac_intel_64_smoke_factory.addStep(download_testmedia)
sb_mac_intel_64_smoke_factory.addStep(test_smoke)
sb_mac_intel_64_smoke_factory.addStep(util_process_clean)
sb_mac_intel_64_smoke_builder,=,{
'name':,"mac64-intel-smoke-sandbox",
'slavename':,"mac64-intel",
'factory':,sb_mac_intel_64_smoke_factory,
'builddir':,'./sandbox-mac64-intel-smoke',
}
#########################################
####,builder,for,linux-smoke-sandbox,####
#########################################
sb_linux_smoke_factory,=,factory.BuildFactory()
sb_linux_smoke_factory.addStep(download_testmedia)
sb_linux_smoke_factory.addStep(test_smoke)
sb_linux_smoke_factory.addStep(util_process_clean)
sb_linux_smoke_builder,=,{
'name':,"linux-smoke-sandbox",
'slavename':,"linux",
'factory':,sb_linux_smoke_factory,
'builddir':,'./sandbox-linux-smoke',
}
###########################################
####,builder,for,linux64-smoke-sandbox,####
###########################################
sb_linux_64_smoke_factory,=,factory.BuildFactory()
sb_linux_64_smoke_factory.addStep(download_testmedia)
sb_linux_64_smoke_factory.addStep(test_smoke)
sb_linux_64_smoke_factory.addStep(util_process_clean)
sb_linux_64_smoke_builder,=,{
'name':,"linux64-smoke-sandbox",
'slavename':,"linux64",
'factory':,sb_linux_64_smoke_factory,
'builddir':,'./sandbox-linux64-smoke',
}
#########################################
####,builder,for,android-smoke,,,,,,,####
#########################################
sb_android_smoke_factory,=,factory.BuildFactory()
sb_android_smoke_factory.addStep(download_testmedia)
sb_android_smoke_factory.addStep(test_smoke_local)
sb_android_smoke_factory.addStep(util_process_clean)
sb_android_smoke_builder,=,{
'name':,"android-smoke-sandbox",
'slavename':,"android",
'factory':,sb_android_smoke_factory,
'builddir':,'./sanbox-android-smoke',
}
###########################################
####,builder,for,linxu-arm-smoke,,,,,,,####
###########################################
sb_linux_arm_smoke_factory,=,factory.BuildFactory()
sb_linux_arm_smoke_factory.addStep(download_testmedia)
sb_linux_arm_smoke_factory.addStep(TestSuiteShellCommand(
command=['../all/run-smoketests-ssh.sh',,WithProperties('%s','revision'),,'./runsmokes-ssh.txt'],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,to,run,smoke,tests...',
descriptionDone='finished,smoke,tests.',
name="SmokeTest",
workdir="../repo/build/buildbot/slaves/scripts")
)
sb_linux_arm_smoke_factory.addStep(util_process_clean)
sb_linux_arm_smoke_builder,=,{
'name':,"linux-arm-smoke-sandbox",
'slavename':,"linux-arm",
'factory':,sb_linux_arm_smoke_factory,
'builddir':,'./sandbox-linux-arm-smoke',
}
#########################################
####,builder,for,linux-mips-smoke,,,,####
#########################################
sb_linux_mips_smoke_factory,=,factory.BuildFactory()
sb_linux_mips_smoke_factory.addStep(download_testmedia)
sb_linux_mips_smoke_factory.addStep(test_smoke_ssh)
sb_linux_mips_smoke_factory.addStep(util_process_clean_ssh)
sb_linux_mips_smoke_builder,=,{
'name':,"linux-mips-smoke-sandbox",
'slavename':,"linux-mips",
'factory':,sb_linux_mips_smoke_factory,
'builddir':,'./sandbox-linux-mips-smoke',
}
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,SANDBOX,TEST,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
##########################################
####,builder,for,windows-test-sandbox,####
##########################################
sb_windows_test_factory,=,factory.BuildFactory()
sb_windows_test_factory.addStep(test_commandline)
sb_windows_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
sb_windows_test_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
sb_windows_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
sb_windows_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
sb_windows_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
sb_windows_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
sb_windows_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
sb_windows_test_factory.addStep(test_differential)
sb_windows_test_factory.addStep(util_process_clean)
sb_windows_test_factory.addStep(util_clean_buildsdir)
sb_windows_test_factory.addStep(sync_clean)
sb_windows_test_builder,=,{
'name':,"windows-test-sandbox",
'slavename':,"windows",
'factory':,sb_windows_test_factory,
'builddir':,'./sandbox-windows-test',
}
############################################
####,builder,for,windows64-test-sandbox,####
############################################
sb_windows_64_test_factory,=,factory.BuildFactory()
sb_windows_64_test_factory.addStep(test_commandline)
sb_windows_64_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_64"))
sb_windows_64_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_64",,vmargs="",,config="",,scriptargs=""))
sb_windows_64_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
sb_windows_64_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_64",,vmargs="-Ojit",,config="",,scriptargs=""))
sb_windows_64_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,vmargs="",,config="",,scriptargs=""))
sb_windows_64_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="",,scriptargs=""))
sb_windows_64_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs=""))
sb_windows_64_test_factory.addStep(util_process_clean)
sb_windows_64_test_factory.addStep(util_clean_buildsdir)
sb_windows_64_test_factory.addStep(sync_clean)
sb_windows_64_test_builder,=,{
'name':,"windows64-test-sandbox",
'slavename':,"windows64",
'factory':,sb_windows_64_test_factory,
'builddir':,'./sandbox-windows64-test',
}
#################################################
####,builder,for,mac-intel-10_5-test-sandbox,####
#################################################
sb_mac_intel_105_test_factory,=,factory.BuildFactory()
sb_mac_intel_105_test_factory.addStep(test_commandline)
sb_mac_intel_105_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
sb_mac_intel_105_test_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_105_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
sb_mac_intel_105_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
sb_mac_intel_105_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_105_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_105_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_105_test_factory.addStep(test_differential)
sb_mac_intel_105_test_factory.addStep(util_process_clean)
sb_mac_intel_105_test_factory.addStep(util_clean_buildsdir)
sb_mac_intel_105_test_factory.addStep(sync_clean)
sb_mac_intel_105_test_builder,=,{
'name':,"mac-intel-10.5-test-sandbox",
'slavename':,"mac-intel-10_5",
'factory':,sb_mac_intel_105_test_factory,
'builddir':,'./sandbox-mac-intel-10_5-test',
}
##############################################
####,builder,for,mac64-intel-test-sandbox,####
##############################################
sb_mac_intel_64_test_factory,=,factory.BuildFactory()
sb_mac_intel_64_test_factory.addStep(test_commandline)
sb_mac_intel_64_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_64"))
sb_mac_intel_64_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_64",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_64_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
sb_mac_intel_64_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_64",,vmargs="-Ojit",,config="",,scriptargs=""))
sb_mac_intel_64_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_64_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_64_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs=""))
sb_mac_intel_64_test_factory.addStep(util_process_clean)
sb_mac_intel_64_test_factory.addStep(util_clean_buildsdir)
sb_mac_intel_64_test_factory.addStep(sync_clean)
sb_mac_intel_64_test_builder,=,{
'name':,"mac64-intel-test-sandbox",
'slavename':,"mac64-intel",
'factory':,sb_mac_intel_64_test_factory,
'builddir':,'./sandbox-mac64-intel-test',
}
########################################
####,builder,for,linux-test-sandbox,####
########################################
sb_linux_test_factory,=,factory.BuildFactory()
sb_linux_test_factory.addStep(test_commandline)
sb_linux_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell"))
sb_linux_test_factory.addStep(test_generic(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
sb_linux_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
sb_linux_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
sb_linux_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s",,vmargs="",,config="",,scriptargs=""))
sb_linux_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
sb_linux_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs=""))
sb_linux_test_factory.addStep(test_differential)
sb_linux_test_factory.addStep(util_process_clean)
sb_linux_test_factory.addStep(util_clean_buildsdir)
sb_linux_test_factory.addStep(sync_clean)
sb_linux_test_builder,=,{
'name':,"linux-test-sandbox",
'slavename':,"linux",
'factory':,sb_linux_test_factory,
'builddir':,'./sandbox-linux-test',
}
##########################################
####,builder,for,linux64-test-sandbox,####
##########################################
sb_linux_64_test_factory,=,factory.BuildFactory()
sb_linux_64_test_factory.addStep(test_commandline)
sb_linux_64_test_factory.addStep(test_selftest(name="Release",,shellname="avmshell_64"))
sb_linux_64_test_factory.addStep(test_generic(name="Release",,shellname="avmshell_64",,vmargs="",,config="",,scriptargs=""))
sb_linux_64_test_factory.addStep(test_generic(name="Release-interp",,shellname="avmshell_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
sb_linux_64_test_factory.addStep(test_generic(name="Release-jit",,shellname="avmshell_64",,vmargs="-Ojit",,config="",,scriptargs=""))
sb_linux_64_test_factory.addStep(test_generic(name="ReleaseDebugger",,shellname="avmshell_s_64",,vmargs="",,config="",,scriptargs=""))
sb_linux_64_test_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="",,scriptargs=""))
sb_linux_64_test_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs=""))
sb_linux_64_test_factory.addStep(util_process_clean)
sb_linux_64_test_factory.addStep(util_clean_buildsdir)
sb_linux_64_test_factory.addStep(sync_clean)
sb_linux_64_test_builder,=,{
'name':,"linux64-test-sandbox",
'slavename':,"linux64",
'factory':,sb_linux_64_test_factory,
'builddir':,'./sandbox-linux64-test',
}
########################################
####,builder,for,android-test,,,,,,,####
########################################
sb_android_test_factory,=,factory.BuildFactory()
sb_android_test_factory.addStep(test_generic_adb(name="Release",,shellname="avmshell",,vmargs="",,config="",,scriptargs=""))
sb_android_test_factory.addStep(test_generic_adb(name="Release-interp",,shellname="avmshell",,vmargs="-Dinterp",,config="",,scriptargs=""))
sb_android_test_factory.addStep(test_generic_adb(name="Release-jit",,shellname="avmshell",,vmargs="-Ojit",,config="",,scriptargs=""))
sb_android_test_factory.addStep(test_generic_adb(name="Debug",,shellname="avmshell_d",,vmargs="",,config="",,scriptargs=""))
sb_android_test_factory.addStep(util_process_clean)
sb_android_test_factory.addStep(util_clean_buildsdir)
sb_android_test_factory.addStep(sync_clean)
sb_android_test_builder,=,{
'name':,"android-test-sandbox",
'slavename':,"android",
'factory':,sb_android_test_factory,
'builddir':,'./sandbox-android-test',
}
##########################################
####,builder,for,linux-arm-test,,,,,,,####
##########################################
sb_linux_arm_test_factory,=,factory.BuildFactory()
sb_linux_arm_test_factory.addStep(test_selftest_ssh(name="Release",,shellname="avmshell_neon_arm"))
sb_linux_arm_test_factory.addStep(test_generic_ssh(name="Release-vfp",,shellname="avmshell_neon_arm",,vmargs="-Darm_arch,7,-Darm_vfp",,config="arm-lnx-tvm-release",,scriptargs=""))
sb_linux_arm_test_factory.addStep(test_generic_ssh(name="Release-interp",,shellname="avmshell_neon_arm",,vmargs="-Dinterp",,config="arm-lnx-tvm-release-Dinterp",,scriptargs=""))
sb_linux_arm_test_factory.addStep(test_generic_ssh(name="Release-jit-vfp",,shellname="avmshell_neon_arm",,vmargs="-Darm_arch,7,-Darm_vfp,-Ojit",,config="arm-lnx-tvm-release-Ojit",,scriptargs=""))
sb_linux_arm_test_factory.addStep(util_acceptance_clean_ssh)
sb_linux_arm_test_factory.addStep(util_clean_buildsdir)
sb_linux_arm_test_factory.addStep(sync_clean)
sb_linux_arm_test_builder,=,{
'name':,"linux-arm-test-sandbox",
'slavename':,"linux-arm",
'factory':,sb_linux_arm_test_factory,
'builddir':,'./sandbox-linux-arm-test',
}
##########################################
####,builder,for,linux-mips-test,,,,,,####
##########################################
sb_linux_mips_test_factory,=,factory.BuildFactory()
sb_linux_mips_test_factory.addStep(test_generic_ssh(name="Release",,shellname="avmshell_mips",,vmargs="",,config="mips-lnx-tvm-release",,scriptargs=""))
sb_linux_mips_test_factory.addStep(test_generic_ssh(name="Debug",,shellname="avmshell_mips_d",,vmargs="",,config="mips-lnx-tvm-debug",,scriptargs=""))
sb_linux_mips_test_factory.addStep(util_process_clean_ssh)
sb_linux_mips_test_factory.addStep(util_clean_buildsdir)
sb_linux_mips_test_factory.addStep(sync_clean)
sb_linux_mips_test_builder,=,{
'name':,"linux-mips-test-sandbox",
'slavename':,"linux-mips",
'factory':,sb_linux_mips_test_factory,
'builddir':,'./sandbox-linux-mips-test',
}
builders,=,[
sb_windows_compile_builder,
sb_windows_64_compile_builder,
sb_mac_intel_105_compile_builder,
sb_mac_intel_64_compile_builder,
sb_linux_compile_builder,
sb_linux_64_compile_builder,
sb_android_compile_builder,
sb_linux_arm_compile_builder,
sb_linux_mips_compile_builder,
sb_windows_smoke_builder,
sb_windows_64_smoke_builder,
sb_mac_intel_105_smoke_builder,
sb_mac_intel_64_smoke_builder,
sb_linux_smoke_builder,
sb_linux_64_smoke_builder,
sb_android_smoke_builder,
sb_linux_arm_smoke_builder,
sb_linux_mips_smoke_builder,
sb_windows_test_builder,
sb_windows_64_test_builder,
sb_mac_intel_105_test_builder,
sb_mac_intel_64_test_builder,
sb_linux_test_builder,
sb_linux_64_test_builder,
sb_android_test_builder,
sb_linux_arm_test_builder,
sb_linux_mips_test_builder,
]
#,-*-,python,-*-
#,ex:,set,syntax=python:
#,,This,Source,Code,Form,is,subject,to,the,terms,of,the,Mozilla,Public
#,,License,,v.,2.0.,If,a,copy,of,the,MPL,was,not,distributed,with,this
#,,file,,You,can,obtain,one,at,http://mozilla.org/MPL/2.0/.
from,buildbot.process,import,factory
from,buildbot.steps.source,import,Mercurial
from,buildbot.steps.shell,import,*
from,custom.buildbot_ext.steps.shellAddons,import,*
from,buildbot.steps.trigger,import,Trigger
from,commonsteps,import,*
class,tamarinredux:
HG_URL,=,"http://asteam.macromedia.com/hg/mirror-tamarin-redux/"
BRANCHES_DEEP,=,["tamarin-redux-deep"]
branch_deep_priorities,=,[('tamarin-redux-deep',,2)]
#######,SCHEDULERS
from,buildbot.scheduler,import,*
#,custom.buildbot_ext.scheduler,import,MUST,happen,after,importing,buildbot.scheduler
from,custom.buildbot_ext.scheduler,import,*
deep,=,PhaseTwoScheduler(name="deep",,branch=BRANCHES_DEEP,,treeStableTimer=30,,properties={'silent':'false'},
fileIsImportant=startCompile,,priorities=branch_deep_priorities,,changeDir="changes/deep/processed",
builderNames=["windows-deep",
"windows64-deep",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"mac-deep",
"mac64-deep",
"linux-deep",
"linux-arm-deep",
"linux-mips-deep",
],
builderDependencies=[
["windows-deep",,"windows-test"],
["windows64-deep",,"windows64-test"],
["mac-deep","mac-intel-10.5-test"],
["mac64-deep","mac64-intel-test"],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
["linux-deep",,"linux-test"],
["linux-arm-deep",,"linux-arm-test"],
["linux-mips-deep",,"linux-mips-test"],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
])
#,The,promote_build,phase,only,runs,when,deep,passes,all,tests.
promote_build,=,Dependent(name="promote_build",,upstream=deep,,properties={'silent':'false'},
builderNames=["promote-build"],
)
schedulers,=,[deep,,promote_build]
################################################################################
################################################################################
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,DEEP,TEST,BUILDERS,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
####,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,####
################################################################################
################################################################################
##################################
####,builder,for,windows-deep,####
##################################
windows_deep_factory,=,factory.BuildFactory()
windows_deep_factory.addStep(sync_clean)
windows_deep_factory.addStep(sync_clone_sandbox)
windows_deep_factory.addStep(sync_update)
windows_deep_factory.addStep(bb_slaveupdate(slave="windows-deep"))
windows_deep_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode",,args="--enable-wordcode-interp",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_WORDCODE_INTERP"))
windows_deep_factory.addStep(compile_generic(name="DebugDebugger-wordcode",,shellname="avmshell_sd_wordcode",,args="--enable-debug,--enable-debugger,--enable-wordcode-interp",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_WORDCODE_INTERP")),,,,
windows_deep_factory.addStep(download_testmedia)
windows_deep_factory.addStep(deep_release_esc)
windows_deep_factory.addStep(test_misc)
windows_deep_factory.addStep(test_selftest(name="Debug",,shellname="avmshell_d"))
windows_deep_factory.addStep(test_selftest(name="ReleaseDebugger",,shellname="avmshell_s"))
windows_deep_factory.addStep(test_selftest(name="DebugDebugger",,shellname="avmshell_sd"))
windows_deep_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="DebugDebugger-wordcode-interp",,shellname="avmshell_sd_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,args="--enable-override-global-new,--enable-use-system-malloc,--enable-debugger",,upload="true",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_DEBUGGER,+AVMFEATURE_OVERRIDE_GLOBAL_NEW,+AVMFEATURE_USE_SYSTEM_MALLOC"))
windows_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,vmargs="",,config="",,scriptargs=""))
windows_deep_factory.addStep(compile_generic(name="Release-osr",,shellname="avmshell_osr",,args="--enable-osr",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_OSR"))
windows_deep_factory.addStep(compile_generic(name="Debug-osr",,shellname="avmshell_d_osr",,args="--enable-debug,--enable-osr",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_OSR")),,,,
windows_deep_factory.addStep(test_generic(name="Release-osr-17",,shellname="avmshell_osr",,vmargs="-osr=17",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="Release-osr-0",,shellname="avmshell_osr",,vmargs="-osr=0",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="Debug-osr-17",,shellname="avmshell_d_osr",,vmargs="-osr=17",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="Debug-osr-0",,shellname="avmshell_d_osr",,vmargs="-osr=0",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random,--threads=1"))
windows_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyAll",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random,--threads=1"))
windows_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyOnly",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verifyonly,--timeout=300,--random,--threads=1"))
windows_deep_factory.addStep(test_generic(name="Release-GCthreshold",,shellname="avmshell",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="DebugDebugger-GCthreshold",,shellname="avmshell_sd",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
windows_deep_factory.addStep(test_generic(name="Debug-jit",,shellname="avmshell_d",,vmargs="-Ojit",,config="",,scriptargs=""))
windows_deep_factory.addStep(compile_generic(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph",,args="--enable-heap-graph",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMTWEAK_HEAP_GRAPH"))
windows_deep_factory.addStep(test_selftest(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph"))
windows_deep_factory.addStep(BuildShellCommand(
command=['./build-vtune.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='starting,VTune,build...',
descriptionDone='finished,VTune,build.',
name="VTune",
workdir="../repo/build/buildbot/slaves/scripts")
)
#####################
#,Start,float,testing
windows_deep_factory.addStep(BuildShellCommand(
command=['../all/float-pre.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='prepare,for,float...',
descriptionDone='finished,preparing,for,float',
name="Float-pre",
workdir="../repo/build/buildbot/slaves/scripts")
)
windows_deep_factory.addStep(compile_generic(name="Release-Float",,shellname="avmshell_float",,args="--target=i686-windows,--enable-float",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_FLOAT"))
windows_deep_factory.addStep(compile_generic(name="Debug-Float",,shellname="avmshell_d_float",,args="--target=i686-windows,--enable-float,--enable-debug",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_FLOAT"))
#,Force,a,recompilation,of,the,test,media,on,the,first,run,of,acceptance,since,media,needs,to,be,recompiled
windows_deep_factory.addStep(test_generic(name="Release-float",,shellname="avmshell_float",,vmargs="",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float,-f"))
windows_deep_factory.addStep(test_generic(name="Release-float-Ojit",,shellname="avmshell_float",,vmargs="-Ojit",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float"))
windows_deep_factory.addStep(test_generic(name="Debug-float",,shellname="avmshell_d_float",,vmargs="",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float"))
windows_deep_factory.addStep(test_generic(name="Debug-float-Ojit",,shellname="avmshell_d_float",,vmargs="-Ojit",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float"))
windows_deep_factory.addStep(BuildShellCommand(
command=['../all/float-post.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='revert,from,,float...',
descriptionDone='finished,reverting,from,float',
name="Float-post",
workdir="../repo/build/buildbot/slaves/scripts")
)
#,End,float,testing
###################
#,Do,a,test,run,where,we,compile,with,-ES.,MUST,be,the,last,step,of,the,build,as,it,recompiles,the,.abc,files,used,by,all,the,other,steps
windows_deep_factory.addStep(test_generic(name="Release_ES",,shellname="avmshell",,vmargs="",,config="",
scriptargs="--ascargs=-no-AS3,--addtoconfig=-ES,-f,-x,abcasm,ecma3,spidermonkey"))
windows_deep_factory.addStep(download_testmedia),#,grab,test,media,again,,to,protect,against,previous,-ES,run
windows_deep_factory.addStep(util_process_clean)
windows_deep_factory.addStep(util_clean_buildsdir)
windows_deep_factory.addStep(sync_clean)
windows_deep_builder,=,{
'name':,"windows-deep",
'slavename':,"windows-deep",
'factory':,windows_deep_factory,
'builddir':,'./windows-deep',
}
##################################
####,builder,for,windows64-deep,####
##################################
windows_64_deep_factory,=,factory.BuildFactory()
windows_64_deep_factory.addStep(sync_clean)
windows_64_deep_factory.addStep(sync_clone_sandbox)
windows_64_deep_factory.addStep(sync_update)
windows_64_deep_factory.addStep(bb_slaveupdate(slave="windows64-deep"))
windows_64_deep_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode_64",,args="--enable-wordcode-interp,--target=x86_64-win",,upload="true",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_WORDCODE_INTERP"))
windows_64_deep_factory.addStep(compile_generic(name="DebugDebugger-wordcode",,shellname="avmshell_sd_wordcode_64",,args="--enable-debug,--enable-debugger,--enable-wordcode-interp,--target=x86_64-win",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_WORDCODE_INTERP")),,,,
windows_64_deep_factory.addStep(download_testmedia)
windows_64_deep_factory.addStep(test_selftest(name="Debug",,shellname="avmshell_d_64"))
windows_64_deep_factory.addStep(test_selftest(name="ReleaseDebugger",,shellname="avmshell_s_64"))
windows_64_deep_factory.addStep(test_selftest(name="DebugDebugger",,shellname="avmshell_sd_64"))
windows_64_deep_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger-wordcode-interp",,shellname="avmshell_sd_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_64",,args="--enable-override-global-new,--enable-use-system-malloc,--enable-debugger,--target=x86_64-win",,upload="true",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER,+AVMFEATURE_OVERRIDE_GLOBAL_NEW,+AVMFEATURE_USE_SYSTEM_MALLOC"))
windows_64_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_64",,vmargs="",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(compile_generic(name="Release-osr",,shellname="avmshell_osr_64",,args="--enable-osr,--target=x86_64-win",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_OSR"))
windows_64_deep_factory.addStep(compile_generic(name="Debug-osr",,shellname="avmshell_d_osr_64",,args="--enable-debug,--enable-osr,--target=x86_64-win",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_OSR"))
windows_64_deep_factory.addStep(test_generic(name="Release-osr-17",,shellname="avmshell_osr_64",,vmargs="-osr=17",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="Release-osr-0",,shellname="avmshell_osr_64",,vmargs="-osr=0",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="Debug-osr-17",,shellname="avmshell_d_osr_64",,vmargs="-osr=17",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="Debug-osr-0",,shellname="avmshell_d_osr_64",,vmargs="-osr=0",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="Debug",,shellname="avmshell_d_64",,vmargs="",,config="x64-win-tvm-debug-deep",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger",,shellname="avmshell_sd_64",,vmargs="",,config="x64-win-tvm-debugdebugger-deep",,scriptargs=""))
windows_64_deep_factory.addStep(deep_release_esc)
windows_64_deep_factory.addStep(test_generic(name="ReleaseDebugger-Dverifyall",,shellname="avmshell_s_64",,vmargs="-Dverifyall",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger-Dverifyall",,shellname="avmshell_sd_64",,vmargs="-Dverifyall",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="Release-GCthreshold",,shellname="avmshell_64",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger-GCthreshold",,shellname="avmshell_sd_64",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(test_generic(name="Debug-jit",,shellname="avmshell_d_64",,vmargs="-Ojit",,config="",,scriptargs=""))
windows_64_deep_factory.addStep(compile_generic(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph_64",,args="--enable-heap-graph,--target=x86_64-win",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMTWEAK_HEAP_GRAPH"))
windows_64_deep_factory.addStep(test_selftest(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph_64"))
windows_64_deep_factory.addStep(,TestSuiteShellCommand(
command=['../all/run-acceptance-avmdiff-3264.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch')},
description='starting,to,run,32-64,differential,vmtests...',
descriptionDone='finished,32-64,differential,vmtests.',
name="Testsuite_Differential3264",
workdir="../repo/build/buildbot/slaves/scripts"
)
)
windows_64_deep_factory.addStep(test_misc)
windows_64_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell_64",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random,--threads=1"))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyAll",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random,--threads=1"))
windows_64_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyOnly",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs="--verifyonly,--timeout=300,--random,--threads=1"))
windows_64_deep_factory.addStep(deep_codecoverage(compilecsv="../all/codecoverage-compile.csv",,testcsv="../all/codecoverage-test.csv"))
windows_64_deep_factory.addStep(deep_codecoverage_process)
windows_64_deep_factory.addStep(download_testmedia),#,grab,test,media,again,,to,protect,against,previous,-ES,run,in,code,coverage
#,Do,a,test,run,where,we,compile,with,-ES.,MUST,be,the,last,step,of,the,build,as,it,recompiles,the,.abc,files,used,by,all,the,other,steps
windows_64_deep_factory.addStep(test_generic(name="Release_ES",,shellname="avmshell",,vmargs="",,config="",
scriptargs="--ascargs=-no-AS3,--addtoconfig=-ES,-f,-x,abcasm,ecma3,spidermonkey"))
windows_64_deep_factory.addStep(download_testmedia),#,grab,test,media,again,,to,protect,against,previous,-ES,run
windows_64_deep_factory.addStep(util_process_clean)
windows_64_deep_factory.addStep(util_clean_buildsdir)
windows_64_deep_factory.addStep(sync_clean)
windows_64_deep_builder,=,{
'name':,"windows64-deep",
'slavename':,"windows64-deep",
'factory':,windows_64_deep_factory,
'builddir':,'./windows64-deep',
}
##################################
####,builder,for,mac-deep,####
##################################
mac_deep_factory,=,factory.BuildFactory()
mac_deep_factory.addStep(sync_clean)
mac_deep_factory.addStep(sync_clone_sandbox)
mac_deep_factory.addStep(sync_update)
mac_deep_factory.addStep(bb_slaveupdate(slave="mac-deep"))
mac_deep_factory.addStep(verify_builtinabc)
mac_deep_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode",,args="--enable-wordcode-interp,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_WORDCODE_INTERP"))
mac_deep_factory.addStep(compile_generic(name="DebugDebugger-wordcode",,shellname="avmshell_sd_wordcode",,args="--enable-debug,--enable-debugger,--enable-wordcode-interp,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_WORDCODE_INTERP")),,,,
mac_deep_factory.addStep(download_testmedia)
mac_deep_factory.addStep(deep_release_esc)
mac_deep_factory.addStep(test_misc)
mac_deep_factory.addStep(test_selftest(name="Debug",,shellname="avmshell_d"))
mac_deep_factory.addStep(test_selftest(name="ReleaseDebugger",,shellname="avmshell_s"))
mac_deep_factory.addStep(test_selftest(name="DebugDebugger",,shellname="avmshell_sd"))
mac_deep_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_deep_factory.addStep(test_generic(name="DebugDebugger-wordcode-interp",,shellname="avmshell_sd_wordcode",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,args="--enable-override-global-new,--enable-use-system-malloc,--enable-debugger",,upload="true",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_DEBUGGER,+AVMFEATURE_OVERRIDE_GLOBAL_NEW,+AVMFEATURE_USE_SYSTEM_MALLOC"))
mac_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,vmargs="",,config="x86-mac-tvm-releasedebugger-air",,scriptargs=""))
mac_deep_factory.addStep(compile_generic(name="Release-osr",,shellname="avmshell_osr",,args="--enable-osr,--target=i686-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_OSR"))
mac_deep_factory.addStep(compile_generic(name="Debug-osr",,shellname="avmshell_d_osr",,args="--enable-debug,--enable-osr,--target=i686-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_OSR"))
mac_deep_factory.addStep(test_generic(name="Release-osr-17",,shellname="avmshell_osr",,vmargs="-osr=17",,config="",,scriptargs=""))
mac_deep_factory.addStep(test_generic(name="Release-osr-0",,shellname="avmshell_osr",,vmargs="-osr=0",,config="",,scriptargs=""))
mac_deep_factory.addStep(test_generic(name="Debug-osr-17",,shellname="avmshell_d_osr",,vmargs="-osr=17",,config="",,scriptargs=""))
mac_deep_factory.addStep(test_generic(name="Debug-osr-0",,shellname="avmshell_d_osr",,vmargs="-osr=0",,config="",,scriptargs=""))
mac_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random,--threads=1"))
mac_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyAll",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random,--threads=1"))
mac_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyOnly",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verifyonly,--timeout=300,--random,--threads=1"))
mac_deep_factory.addStep(test_generic(name="Release-GCthreshold",,shellname="avmshell",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
mac_deep_factory.addStep(test_generic(name="DebugDebugger-GCthreshold",,shellname="avmshell_sd",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
mac_deep_factory.addStep(test_generic(name="Debug-jit",,shellname="avmshell_d",,vmargs="-Ojit",,config="",,scriptargs=""))
mac_deep_factory.addStep(compile_generic(name="Release-aot",,shellname="avmshell_aot",,args="--enable-aot,--disable-eval,--target=i686-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_AOT"))
#,Commenting,because,of,bug,696275,-,mac_deep_factory.addStep(compile_generic(name="Debug-aot",,shellname="avmshell_d_aot",,args="--enable-debug,--enable-aot,--target=i686-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_AOT"))
mac_deep_factory.addStep(compile_generic(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph",,args="--enable-heap-graph,--target=i686-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMTWEAK_HEAP_GRAPH"))
mac_deep_factory.addStep(test_selftest(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph"))
mac_deep_factory.addStep(deep_run_brightspot(name='ReleaseDebugger',,shell='avmshell_s',,testargs='--quiet'))
mac_deep_factory.addStep(deep_codecoverage(compilecsv="../all/codecoverage-compile.csv",,testcsv="../all/codecoverage-test.csv"))
mac_deep_factory.addStep(deep_codecoverage_process)
mac_deep_factory.addStep(download_testmedia),#,grab,test,media,again,,to,protect,against,previous,-ES,run,in,code,coverage
mac_deep_factory.addStep(BuildShellCommand(
command=['../all/build-doxygen.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='starting,doxygen,build...',
descriptionDone='finished,doxygen,build.',
name="Doxygen",
workdir="../repo/build/buildbot/slaves/scripts")
)
mac_deep_factory.addStep(compile_generic(name="ReleaseDebugger-Valgrind",,shellname="avmshell_s_valgrind",,args="--enable-debugger,--enable-valgrind",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_DEBUGGER,+AVMFEATURE_VALGRIND"))
mac_deep_factory.addStep(test_generic(name="ReleaseDebugger-Valgrind",,shellname="avmshell_s_valgrind",,vmargs="",,config="",,scriptargs="--valgrind"))
#####################
#,Start,float,testing
mac_deep_factory.addStep(BuildShellCommand(
command=['../all/float-pre.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='prepare,for,float...',
descriptionDone='finished,preparing,for,float',
name="Float-pre",
workdir="../repo/build/buildbot/slaves/scripts")
)
mac_deep_factory.addStep(compile_generic(name="Release-Float",,shellname="avmshell_float",,args="--target=i686-darwin,--enable-float",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_FLOAT"))
mac_deep_factory.addStep(compile_generic(name="Debug-Float",,shellname="avmshell_d_float",,args="--target=i686-darwin,--enable-float,--enable-debug",,upload="false",,features="+AVMSYSTEM_32BIT,+AVMSYSTEM_IA32,+AVMFEATURE_FLOAT"))
#,Force,a,recompilation,of,the,test,media,on,the,first,run,of,acceptance,since,media,needs,to,be,recompiled
mac_deep_factory.addStep(test_generic(name="Release-float",,shellname="avmshell_float",,vmargs="",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float,-f"))
mac_deep_factory.addStep(test_generic(name="Release-float-Ojit",,shellname="avmshell_float",,vmargs="-Ojit",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float"))
mac_deep_factory.addStep(test_generic(name="Debug-float",,shellname="avmshell_d_float",,vmargs="",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float"))
mac_deep_factory.addStep(test_generic(name="Debug-float-Ojit",,shellname="avmshell_d_float",,vmargs="-Ojit",,config="",
scriptargs="--ascargs=-abcfuture,--addtoconfig=-float"))
mac_deep_factory.addStep(BuildShellCommand(
command=['../all/float-post.sh',,WithProperties('%s','revision')],
env={'branch':,WithProperties('%s','branch'),,'silent':WithProperties('%s','silent')},
description='revert,from,,float...',
descriptionDone='finished,reverting,from,float',
name="Float-post",
workdir="../repo/build/buildbot/slaves/scripts")
)
#,End,float,testing
###################
#,Do,a,test,run,where,we,compile,with,-ES.,MUST,be,the,last,step,of,the,build,as,it,recompiles,the,.abc,files,used,by,all,the,other,steps
mac_deep_factory.addStep(test_generic(name="Release_ES",,shellname="avmshell",,vmargs="",,config="",
scriptargs="--ascargs=-no-AS3,--addtoconfig=-ES,-f,-x,abcasm,ecma3,spidermonkey"))
mac_deep_factory.addStep(download_testmedia),#,grab,test,media,again,,to,protect,against,previous,-ES,run
mac_deep_factory.addStep(util_process_clean)
mac_deep_factory.addStep(util_clean_buildsdir)
mac_deep_factory.addStep(sync_clean)
mac_deep_builder,=,{
'name':,"mac-deep",
'slavename':,"mac-deep",
'factory':,mac_deep_factory,
'builddir':,'./mac-deep',
}
################################
####,builder,for,mac64-deep,####
################################
mac64_deep_factory,=,factory.BuildFactory()
mac64_deep_factory.addStep(sync_clean)
mac64_deep_factory.addStep(sync_clone_sandbox)
mac64_deep_factory.addStep(sync_update)
mac64_deep_factory.addStep(bb_slaveupdate(slave="mac64-deep"))
mac64_deep_factory.addStep(verify_builtinabc)
mac64_deep_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode_64",,args="--enable-wordcode-interp,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_WORDCODE_INTERP"))
mac64_deep_factory.addStep(compile_generic(name="DebugDebugger-wordcode",,shellname="avmshell_sd_wordcode_64",,args="--enable-debug,--enable-debugger,--enable-wordcode-interp,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_WORDCODE_INTERP")),,,,
mac64_deep_factory.addStep(download_testmedia)
mac64_deep_factory.addStep(deep_release_esc)
mac64_deep_factory.addStep(test_misc)
mac64_deep_factory.addStep(test_selftest(name="Debug",,shellname="avmshell_d_64"))
mac64_deep_factory.addStep(test_selftest(name="ReleaseDebugger",,shellname="avmshell_s_64"))
mac64_deep_factory.addStep(test_selftest(name="DebugDebugger",,shellname="avmshell_sd_64"))
mac64_deep_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac64_deep_factory.addStep(test_generic(name="DebugDebugger-wordcode-interp",,shellname="avmshell_sd_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
mac64_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_64",,args="--target=x86_64-darwin,--enable-override-global-new,--enable-use-system-malloc,--enable-debugger",,upload="true",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER,+AVMFEATURE_OVERRIDE_GLOBAL_NEW,+AVMFEATURE_USE_SYSTEM_MALLOC"))
mac64_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air_64",,vmargs="",,config="",,scriptargs=""))
mac64_deep_factory.addStep(compile_generic(name="Release-osr",,shellname="avmshell_osr_64",,args="--enable-osr,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_OSR"))
mac64_deep_factory.addStep(compile_generic(name="Debug-osr",,shellname="avmshell_d_osr_64",,args="--enable-debug,--enable-osr,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_OSR"))
mac64_deep_factory.addStep(test_generic(name="Release-osr-17",,shellname="avmshell_osr_64",,vmargs="-osr=17",,config="",,scriptargs=""))
mac64_deep_factory.addStep(test_generic(name="Release-osr-0",,shellname="avmshell_osr_64",,vmargs="-osr=0",,config="",,scriptargs=""))
mac64_deep_factory.addStep(test_generic(name="Debug-osr-17",,shellname="avmshell_d_osr_64",,vmargs="-osr=17",,config="",,scriptargs=""))
mac64_deep_factory.addStep(test_generic(name="Debug-osr-0",,shellname="avmshell_d_osr_64",,vmargs="-osr=0",,config="",,scriptargs=""))
mac64_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell_64",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random,--threads=1"))
mac64_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyAll",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random,--threads=1"))
mac64_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyOnly",,shellname="avmshell_sd_64",,vmargs="",,config="",,scriptargs="--verifyonly,--timeout=300,--random,--threads=1"))
mac64_deep_factory.addStep(test_generic(name="Release-GCthreshold",,shellname="avmshell_64",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
mac64_deep_factory.addStep(test_generic(name="DebugDebugger-GCthreshold",,shellname="avmshell_sd_64",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
mac64_deep_factory.addStep(compile_generic(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph_64",,args="--enable-heap-graph,--target=x86_64-darwin,--mac-sdk=105",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMTWEAK_HEAP_GRAPH"))
mac64_deep_factory.addStep(test_selftest(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph_64"))
mac64_deep_factory.addStep(deep_run_brightspot(name='ReleaseDebugger',,shell='avmshell_s_64',,testargs='--quiet'))
mac64_deep_factory.addStep(compile_generic(name="ReleaseDebugger-Valgrind",,shellname="avmshell_s_valgrind_64",,args="--enable-debugger,--enable-valgrind,--mac-sdk=105,--target=x86_64-darwin",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER,+AVMFEATURE_VALGRIND"))
mac64_deep_factory.addStep(test_generic(name="ReleaseDebugger-Valgrind",,shellname="avmshell_s_valgrind_64",,vmargs="",,config="",,scriptargs="--valgrind"))
mac64_deep_factory.addStep(test_generic(name="Debug-jit",,shellname="avmshell_d_64",,vmargs="-Ojit",,config="",,scriptargs=""))
mac64_deep_factory.addStep(util_process_clean)
mac64_deep_factory.addStep(util_clean_buildsdir)
mac64_deep_factory.addStep(sync_clean)
mac64_deep_builder,=,{
'name':,"mac64-deep",
'slavename':,"mac64-deep",
'factory':,mac64_deep_factory,
'builddir':,'./mac64-deep',
}
##################################
####,builder,for,linux-deep,,,####
##################################
linux_deep_factory,=,factory.BuildFactory()
linux_deep_factory.addStep(sync_clean)
linux_deep_factory.addStep(sync_clone_sandbox)
linux_deep_factory.addStep(sync_update)
linux_deep_factory.addStep(bb_slaveupdate(slave="linux-deep"))
linux_deep_factory.addStep(compile_generic(name="Release-wordcode",,shellname="avmshell_wordcode_64",,args="--enable-wordcode-interp",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_WORDCODE_INTERP"))
linux_deep_factory.addStep(compile_generic(name="DebugDebugger-wordcode",,shellname="avmshell_sd_wordcode_64",,args="--enable-debug,--enable-debugger,--enable-wordcode-interp",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_WORDCODE_INTERP")),,,,
linux_deep_factory.addStep(download_testmedia)
linux_deep_factory.addStep(test_selftest(name="Debug",,shellname="avmshell_d"))
linux_deep_factory.addStep(test_selftest(name="ReleaseDebugger",,shellname="avmshell_s"))
linux_deep_factory.addStep(test_selftest(name="DebugDebugger",,shellname="avmshell_sd"))
linux_deep_factory.addStep(test_generic(name="Release-wordcode-interp",,shellname="avmshell_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="DebugDebugger-wordcode-interp",,shellname="avmshell_sd_wordcode_64",,vmargs="-Dinterp",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="Release-Djitordie",,shellname="avmshell",,vmargs="-Djitordie",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="ReleaseDebugger-nodebugger",,shellname="avmshell_s",,vmargs="-Dnodebugger",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="DebugDebugger-nodebugger",,shellname="avmshell_sd",,vmargs="-Dnodebugger",,config="",,scriptargs=""))
linux_deep_factory.addStep(compile_generic(name="Release-system-malloc",,shellname="avmshell_sysmalloc",,args="--enable-use-system-malloc",,upload="true",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_USE_SYSTEM_MALLOC"))
linux_deep_factory.addStep(test_generic(name="Release-system-malloc",,shellname="avmshell_sysmalloc",,vmargs="",,config="x64-lnx-tvm-release-use-system-malloc",,scriptargs=""))
linux_deep_factory.addStep(test_misc)
linux_deep_factory.addStep(compile_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,args="--enable-override-global-new,--enable-use-system-malloc,--enable-debugger",,upload="true",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER,+AVMFEATURE_OVERRIDE_GLOBAL_NEW,+AVMFEATURE_USE_SYSTEM_MALLOC"))
linux_deep_factory.addStep(test_generic(name="ReleaseDebugger-air",,shellname="avmshell_air",,vmargs="",,config="",,scriptargs=""))
linux_deep_factory.addStep(compile_generic(name="Release-osr",,shellname="avmshell_osr",,args="--enable-osr",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_OSR"))
linux_deep_factory.addStep(compile_generic(name="Debug-osr",,shellname="avmshell_d_osr",,args="--enable-debug,--enable-osr",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_OSR"))
linux_deep_factory.addStep(test_generic(name="Release-osr-17",,shellname="avmshell_osr",,vmargs="-osr=17",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="Release-osr-0",,shellname="avmshell_osr",,vmargs="-osr=0",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="Debug-osr-17",,shellname="avmshell_d_osr",,vmargs="-osr=17",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="Debug-osr-0",,shellname="avmshell_d_osr",,vmargs="-osr=0",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="Release-Dgreedy",,shellname="avmshell",,vmargs="-Dgreedy",,config="",,scriptargs="--timeout=180,--random,--threads=1"))
linux_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyAll",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verify,--timeout=300,--random,--threads=1"))
linux_deep_factory.addStep(test_generic(name="DebugDebugger_VerifyOnly",,shellname="avmshell_sd",,vmargs="",,config="",,scriptargs="--verifyonly,--timeout=300,--random,--threads=1"))
linux_deep_factory.addStep(test_generic(name="Release-GCthreshold",,shellname="avmshell",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="DebugDebugger-GCthreshold",,shellname="avmshell_sd",,vmargs="-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="",,scriptargs=""))
linux_deep_factory.addStep(test_generic(name="Debug-jit",,shellname="avmshell_d",,vmargs="-Ojit",,config="",,scriptargs=""))
linux_deep_factory.addStep(compile_generic(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph_64",,args="--enable-heap-graph",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMTWEAK_HEAP_GRAPH"))
linux_deep_factory.addStep(test_selftest(name="ReleaseHeapGraph",,shellname="avmshell_heapgraph_64"))
linux_deep_factory.addStep(compile_generic(name="ReleaseDebugger-Valgrind",,shellname="avmshell_s_valgrind_64",,args="--enable-debugger,--enable-valgrind",,upload="false",,features="+AVMSYSTEM_64BIT,+AVMSYSTEM_AMD64,+AVMFEATURE_DEBUGGER,+AVMFEATURE_VALGRIND"))
linux_deep_factory.addStep(test_generic(name="ReleaseDebugger-Valgrind",,shellname="avmshell_s_valgrind_64",,vmargs="",,config="",,scriptargs="--valgrind"))
linux_deep_factory.addStep(deep_codecoverage(compilecsv="../all/codecoverage-compile.csv",,testcsv="../all/codecoverage-test.csv"))
linux_deep_factory.addStep(deep_codecoverage_process)
linux_deep_factory.addStep(download_testmedia),#,grab,test,media,again,,to,protect,against,previous,-ES,run,in,code,coverage
#,Do,a,test,run,where,we,compile,with,-ES.,MUST,be,the,last,step,of,the,build,as,it,recompiles,the,.abc,files,used,by,all,the,other,steps
linux_deep_factory.addStep(test_generic(name="Release_ES",,shellname="avmshell",,vmargs="",,config="",
scriptargs="--ascargs=-no-AS3,--addtoconfig=-ES,-f,-x,abcasm,ecma3,spidermonkey"))
linux_deep_factory.addStep(download_testmedia),#,grab,test,media,again,,to,protect,against,previous,-ES,run
linux_deep_factory.addStep(deep_run_brightspot(name='DebugDebugger',,shell='avmshell_sd',,testargs='--timelimit=120,--random,--quiet'))
linux_deep_factory.addStep(util_process_clean)
linux_deep_factory.addStep(util_clean_buildsdir)
linux_deep_factory.addStep(sync_clean)
linux_deep_builder,=,{
'name':,"linux-deep",
'slavename':,"linux-deep",
'factory':,linux_deep_factory,
'builddir':,'./linux-deep',
}
######################################
####,builder,for,linux-arm-deep,,,####
######################################
linux_arm_deep_factory,=,factory.BuildFactory()
linux_arm_deep_factory.addStep(sync_clean)
linux_arm_deep_factory.addStep(sync_clone_sandbox)
linux_arm_deep_factory.addStep(sync_update)
linux_arm_deep_factory.addStep(bb_slaveupdate(slave="linux-arm-deep"))
linux_arm_deep_factory.addStep(download_testmedia)
linux_arm_deep_factory.addStep(test_generic_ssh(name="Release-softfloat",,shellname="avmshell_neon_arm",,vmargs="",,config="arm-lnx-tvm-release",,scriptargs=""))
linux_arm_deep_factory.addStep(test_selftest_ssh(name="Debug",,shellname="avmshell_neon_arm_d"))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Debug-vfp",,shellname="avmshell_neon_arm_d",,vmargs="-Darm_arch,7,-Darm_vfp",,config="arm-lnx-tvm-debug",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Debug-softfloat",,shellname="avmshell_neon_arm_d",,vmargs="",,config="arm-lnx-tvm-debug",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Release-softfloat-deep",,shellname="avmshell_neon_arm",,vmargs="",,config="arm-lnx-tvm-release-deep",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Release-deep",,shellname="avmshell_neon_arm",,vmargs="-Darm_arch,7,-Darm_vfp",,config="arm-lnx-tvm-release-deep",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Release-Dinterp-deep",,shellname="avmshell_neon_arm",,vmargs="-Dinterp",,config="arm-lnx-tvm-release-Dinterp-deep",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Release-GCthreshold",,shellname="avmshell_neon_arm",,vmargs="-Darm_arch,7,-Darm_vfp,-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="arm-lnx-tvm-release",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="DebugDebugger-GCthreshold",,shellname="avmshell_neon_arm_d",,vmargs="-Darm_arch,7,-Darm_vfp,-Dgcthreshold,128,-load,1.05,1,1.05,5,1.05,20",,config="arm-lnx-tvm-debug",,scriptargs=""))
linux_arm_deep_factory.addStep(compile_generic(name="Release-osr",,shellname="avmshell_neon_arm_osr",,args="--enable-arm-neon,--arm-arch=armv7-a,--target=arm-linux,--enable-sys-root-dir=/usr/local/arm-linux/debian5,--enable-osr",,upload="false",,features=""))
linux_arm_deep_factory.addStep(compile_generic(name="Debug-osr",,shellname="avmshell_neon_arm_d_osr",,args="--enable-debug,--enable-arm-neon,--arm-arch=armv7-a,--target=arm-linux,--enable-sys-root-dir=/usr/local/arm-linux/debian5,--enable-osr",,upload="false",,features=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Release-osr-17",,shellname="avmshell_neon_arm_osr",,vmargs="-osr=17",,config="arm-lnx-tvm-release-osr=17",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Release-osr-0",,shellname="avmshell_neon_arm_osr",,vmargs="-osr=0",,config="arm-lnx-tvm-release-osr=0",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Debug-osr-17",,shellname="avmshell_neon_arm_d_osr",,vmargs="-osr=17",,config="arm-lnx-tvm-debug-osr=17",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Debug-osr-0",,shellname="avmshell_neon_arm_d_osr",,vmargs="-osr=0",,config="arm-lnx-tvm-debug-osr=0",,scriptargs=""))
linux_arm_deep_factory.addStep(test_generic_ssh(name="Debug-jit-vfp",,shellname="avmshell_neon_arm_d",,vmargs="-Darm_arch,7,-Darm_vfp,-Ojit",,config="arm-lnx-tvm-debug-Ojit",,scriptargs=""))
linux_arm_deep_factory.addStep(util_acceptance_clean_ssh)
linux_arm_deep_factory.addStep(util_clean_buildsdir)
linux_arm_deep_factory.addStep(sync_clean)
linux_arm_deep_builder,=,{
'name':,"linux-arm-deep",
'slavename':,"linux-arm-deep",
'factory':,linux_arm_deep_factory,
'builddir':,'./linux-arm-deep',
}
